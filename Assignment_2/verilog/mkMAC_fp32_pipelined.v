//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov  3 23:43:43 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// foutput_MAC                    O    32
// RDY_foutput_MAC                O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_foutput_MAC                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC_fp32_pipelined(CLK,
			    RST_N,

			    get_A_a,
			    EN_get_A,
			    RDY_get_A,

			    get_B_b,
			    EN_get_B,
			    RDY_get_B,

			    get_C_c,
			    EN_get_C,
			    RDY_get_C,

			    EN_foutput_MAC,
			    foutput_MAC,
			    RDY_foutput_MAC);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // actionvalue method foutput_MAC
  input  EN_foutput_MAC;
  output [31 : 0] foutput_MAC;
  output RDY_foutput_MAC;

  // signals for module outputs
  wire [31 : 0] foutput_MAC;
  wire RDY_foutput_MAC, RDY_get_A, RDY_get_B, RDY_get_C;

  // inlined wires
  wire [32 : 0] abc_fifo_rv_port1__read,
		abc_fifo_rv_port1__write_1,
		abc_fifo_rv_port2__read,
		inpC_fifo_rv_port0__write_1,
		inpC_fifo_rv_port1__read,
		inpC_fifo_rv_port1__write_1,
		inpC_fifo_rv_port2__read;
  wire [16 : 0] ab_fifo_rv_port1__read,
		ab_fifo_rv_port1__write_1,
		ab_fifo_rv_port2__read,
		inpA_fifo_rv_port0__write_1,
		inpA_fifo_rv_port1__read,
		inpA_fifo_rv_port1__write_1,
		inpA_fifo_rv_port2__read,
		inpB_fifo_rv_port1__read,
		inpB_fifo_rv_port1__write_1,
		inpB_fifo_rv_port2__read;
  wire inpA_fifo_rv_EN_port0__write,
       inpB_fifo_rv_EN_port0__write,
       inpC_fifo_rv_EN_port0__write;

  // register ab_fifo_rv
  reg [16 : 0] ab_fifo_rv;
  wire [16 : 0] ab_fifo_rv_D_IN;
  wire ab_fifo_rv_EN;

  // register abc_fifo_rv
  reg [32 : 0] abc_fifo_rv;
  wire [32 : 0] abc_fifo_rv_D_IN;
  wire abc_fifo_rv_EN;

  // register add_initiated
  reg add_initiated;
  wire add_initiated_D_IN, add_initiated_EN;

  // register fmac_completed
  reg fmac_completed;
  wire fmac_completed_D_IN, fmac_completed_EN;

  // register init_done
  reg init_done;
  wire init_done_D_IN, init_done_EN;

  // register inpA_fifo_rv
  reg [16 : 0] inpA_fifo_rv;
  wire [16 : 0] inpA_fifo_rv_D_IN;
  wire inpA_fifo_rv_EN;

  // register inpB_fifo_rv
  reg [16 : 0] inpB_fifo_rv;
  wire [16 : 0] inpB_fifo_rv_D_IN;
  wire inpB_fifo_rv_EN;

  // register inpC_fifo_rv
  reg [32 : 0] inpC_fifo_rv;
  wire [32 : 0] inpC_fifo_rv_D_IN;
  wire inpC_fifo_rv_EN;

  // register mul_initiated
  reg mul_initiated;
  wire mul_initiated_D_IN, mul_initiated_EN;

  // register rg_a
  reg [15 : 0] rg_a;
  wire [15 : 0] rg_a_D_IN;
  wire rg_a_EN;

  // register rg_b
  reg [15 : 0] rg_b;
  wire [15 : 0] rg_b_D_IN;
  wire rg_b_EN;

  // register rg_c
  reg [31 : 0] rg_c;
  wire [31 : 0] rg_c_D_IN;
  wire rg_c_EN;

  // ports of submodule fadd
  wire [31 : 0] fadd_get_B_b, fadd_out_AaddB;
  wire [15 : 0] fadd_get_A_a;
  wire fadd_EN_get_A,
       fadd_EN_get_B,
       fadd_EN_out_AaddB,
       fadd_RDY_get_A,
       fadd_RDY_get_B,
       fadd_RDY_out_AaddB;

  // ports of submodule fmul
  wire [15 : 0] fmul_get_A_a, fmul_get_B_b, fmul_out_AB;
  wire fmul_EN_get_A,
       fmul_EN_get_B,
       fmul_EN_out_AB,
       fmul_RDY_get_A,
       fmul_RDY_get_B,
       fmul_RDY_out_AB;

  // rule scheduling signals
  wire CAN_FIRE_RL_do_add,
       CAN_FIRE_RL_do_mul,
       CAN_FIRE_RL_get_addres,
       CAN_FIRE_RL_get_mulres,
       CAN_FIRE_RL_init,
       CAN_FIRE_RL_restore_mac,
       CAN_FIRE_foutput_MAC,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       WILL_FIRE_RL_do_add,
       WILL_FIRE_RL_do_mul,
       WILL_FIRE_RL_get_addres,
       WILL_FIRE_RL_get_mulres,
       WILL_FIRE_RL_init,
       WILL_FIRE_RL_restore_mac,
       WILL_FIRE_foutput_MAC,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C;

  // inputs to muxes for submodule ports
  wire MUX_init_done_write_1__SEL_1;

  // action method get_A
  assign RDY_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = !inpC_fifo_rv_port1__read[32] ;
  assign CAN_FIRE_get_C = !inpC_fifo_rv_port1__read[32] ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // actionvalue method foutput_MAC
  assign foutput_MAC = abc_fifo_rv[31:0] ;
  assign RDY_foutput_MAC = abc_fifo_rv[32] ;
  assign CAN_FIRE_foutput_MAC = abc_fifo_rv[32] ;
  assign WILL_FIRE_foutput_MAC = EN_foutput_MAC ;

  // submodule fadd
  mkfp32_add_pipelined fadd(.CLK(CLK),
			    .RST_N(RST_N),
			    .get_A_a(fadd_get_A_a),
			    .get_B_b(fadd_get_B_b),
			    .EN_get_A(fadd_EN_get_A),
			    .EN_get_B(fadd_EN_get_B),
			    .EN_out_AaddB(fadd_EN_out_AaddB),
			    .RDY_get_A(fadd_RDY_get_A),
			    .RDY_get_B(fadd_RDY_get_B),
			    .out_AaddB(fadd_out_AaddB),
			    .RDY_out_AaddB(fadd_RDY_out_AaddB));

  // submodule fmul
  mkbf16_mul_pipelined fmul(.CLK(CLK),
			    .RST_N(RST_N),
			    .get_A_a(fmul_get_A_a),
			    .get_B_b(fmul_get_B_b),
			    .EN_get_A(fmul_EN_get_A),
			    .EN_get_B(fmul_EN_get_B),
			    .EN_out_AB(fmul_EN_out_AB),
			    .RDY_get_A(fmul_RDY_get_A),
			    .RDY_get_B(fmul_RDY_get_B),
			    .out_AB(fmul_out_AB),
			    .RDY_out_AB(fmul_RDY_out_AB));

  // rule RL_do_mul
  assign CAN_FIRE_RL_do_mul =
	     fmul_RDY_get_B && fmul_RDY_get_A && init_done && !mul_initiated ;
  assign WILL_FIRE_RL_do_mul = CAN_FIRE_RL_do_mul ;

  // rule RL_get_addres
  assign CAN_FIRE_RL_get_addres =
	     fadd_RDY_out_AaddB && !abc_fifo_rv_port1__read[32] &&
	     add_initiated ;
  assign WILL_FIRE_RL_get_addres = CAN_FIRE_RL_get_addres ;

  // rule RL_do_add
  assign CAN_FIRE_RL_do_add =
	     ab_fifo_rv[16] && fadd_RDY_get_B && fadd_RDY_get_A ;
  assign WILL_FIRE_RL_do_add = CAN_FIRE_RL_do_add ;

  // rule RL_init
  assign CAN_FIRE_RL_init =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && inpC_fifo_rv[32] &&
	     !init_done ;
  assign WILL_FIRE_RL_init = CAN_FIRE_RL_init ;

  // rule RL_get_mulres
  assign CAN_FIRE_RL_get_mulres =
	     fmul_RDY_out_AB && !ab_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_RL_get_mulres = CAN_FIRE_RL_get_mulres ;

  // rule RL_restore_mac
  assign CAN_FIRE_RL_restore_mac = fmac_completed ;
  assign WILL_FIRE_RL_restore_mac = MUX_init_done_write_1__SEL_1 ;

  // inputs to muxes for submodule ports
  assign MUX_init_done_write_1__SEL_1 =
	     fmac_completed && !WILL_FIRE_RL_get_addres ;

  // inlined wires
  assign inpA_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && inpC_fifo_rv[32] &&
	     !init_done ;
  assign inpA_fifo_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpA_fifo_rv_port1__read =
	     inpA_fifo_rv_EN_port0__write ?
	       inpA_fifo_rv_port0__write_1 :
	       inpA_fifo_rv ;
  assign inpA_fifo_rv_port1__write_1 = { 1'd1, get_A_a } ;
  assign inpA_fifo_rv_port2__read =
	     EN_get_A ?
	       inpA_fifo_rv_port1__write_1 :
	       inpA_fifo_rv_port1__read ;
  assign inpB_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && inpC_fifo_rv[32] &&
	     !init_done ;
  assign inpB_fifo_rv_port1__read =
	     inpB_fifo_rv_EN_port0__write ?
	       inpA_fifo_rv_port0__write_1 :
	       inpB_fifo_rv ;
  assign inpB_fifo_rv_port1__write_1 = { 1'd1, get_B_b } ;
  assign inpB_fifo_rv_port2__read =
	     EN_get_B ?
	       inpB_fifo_rv_port1__write_1 :
	       inpB_fifo_rv_port1__read ;
  assign inpC_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && inpC_fifo_rv[32] &&
	     !init_done ;
  assign inpC_fifo_rv_port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpC_fifo_rv_port1__read =
	     inpC_fifo_rv_EN_port0__write ?
	       inpC_fifo_rv_port0__write_1 :
	       inpC_fifo_rv ;
  assign inpC_fifo_rv_port1__write_1 = { 1'd1, get_C_c } ;
  assign inpC_fifo_rv_port2__read =
	     EN_get_C ?
	       inpC_fifo_rv_port1__write_1 :
	       inpC_fifo_rv_port1__read ;
  assign ab_fifo_rv_port1__read =
	     CAN_FIRE_RL_do_add ? inpA_fifo_rv_port0__write_1 : ab_fifo_rv ;
  assign ab_fifo_rv_port1__write_1 = { 1'd1, fmul_out_AB } ;
  assign ab_fifo_rv_port2__read =
	     CAN_FIRE_RL_get_mulres ?
	       ab_fifo_rv_port1__write_1 :
	       ab_fifo_rv_port1__read ;
  assign abc_fifo_rv_port1__read =
	     EN_foutput_MAC ? inpC_fifo_rv_port0__write_1 : abc_fifo_rv ;
  assign abc_fifo_rv_port1__write_1 = { 1'd1, fadd_out_AaddB } ;
  assign abc_fifo_rv_port2__read =
	     CAN_FIRE_RL_get_addres ?
	       abc_fifo_rv_port1__write_1 :
	       abc_fifo_rv_port1__read ;

  // register ab_fifo_rv
  assign ab_fifo_rv_D_IN = ab_fifo_rv_port2__read ;
  assign ab_fifo_rv_EN = 1'b1 ;

  // register abc_fifo_rv
  assign abc_fifo_rv_D_IN = abc_fifo_rv_port2__read ;
  assign abc_fifo_rv_EN = 1'b1 ;

  // register add_initiated
  assign add_initiated_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign add_initiated_EN = WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_do_add ;

  // register fmac_completed
  assign fmac_completed_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign fmac_completed_EN =
	     WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_get_addres ;

  // register init_done
  assign init_done_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign init_done_EN = WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_init ;

  // register inpA_fifo_rv
  assign inpA_fifo_rv_D_IN = inpA_fifo_rv_port2__read ;
  assign inpA_fifo_rv_EN = 1'b1 ;

  // register inpB_fifo_rv
  assign inpB_fifo_rv_D_IN = inpB_fifo_rv_port2__read ;
  assign inpB_fifo_rv_EN = 1'b1 ;

  // register inpC_fifo_rv
  assign inpC_fifo_rv_D_IN = inpC_fifo_rv_port2__read ;
  assign inpC_fifo_rv_EN = 1'b1 ;

  // register mul_initiated
  assign mul_initiated_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign mul_initiated_EN = WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_do_mul ;

  // register rg_a
  assign rg_a_D_IN = inpA_fifo_rv[15:0] ;
  assign rg_a_EN = CAN_FIRE_RL_init ;

  // register rg_b
  assign rg_b_D_IN = inpB_fifo_rv[15:0] ;
  assign rg_b_EN = CAN_FIRE_RL_init ;

  // register rg_c
  assign rg_c_D_IN = inpC_fifo_rv[31:0] ;
  assign rg_c_EN = CAN_FIRE_RL_init ;

  // submodule fadd
  assign fadd_get_A_a = ab_fifo_rv[15:0] ;
  assign fadd_get_B_b = rg_c ;
  assign fadd_EN_get_A = CAN_FIRE_RL_do_add ;
  assign fadd_EN_get_B = CAN_FIRE_RL_do_add ;
  assign fadd_EN_out_AaddB = CAN_FIRE_RL_get_addres ;

  // submodule fmul
  assign fmul_get_A_a = rg_a ;
  assign fmul_get_B_b = rg_b ;
  assign fmul_EN_get_A = CAN_FIRE_RL_do_mul ;
  assign fmul_EN_get_B = CAN_FIRE_RL_do_mul ;
  assign fmul_EN_out_AB = CAN_FIRE_RL_get_mulres ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        ab_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	abc_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	add_initiated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fmac_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	init_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpC_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	mul_initiated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (ab_fifo_rv_EN)
	  ab_fifo_rv <= `BSV_ASSIGNMENT_DELAY ab_fifo_rv_D_IN;
	if (abc_fifo_rv_EN)
	  abc_fifo_rv <= `BSV_ASSIGNMENT_DELAY abc_fifo_rv_D_IN;
	if (add_initiated_EN)
	  add_initiated <= `BSV_ASSIGNMENT_DELAY add_initiated_D_IN;
	if (fmac_completed_EN)
	  fmac_completed <= `BSV_ASSIGNMENT_DELAY fmac_completed_D_IN;
	if (init_done_EN) init_done <= `BSV_ASSIGNMENT_DELAY init_done_D_IN;
	if (inpA_fifo_rv_EN)
	  inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA_fifo_rv_D_IN;
	if (inpB_fifo_rv_EN)
	  inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpB_fifo_rv_D_IN;
	if (inpC_fifo_rv_EN)
	  inpC_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpC_fifo_rv_D_IN;
	if (mul_initiated_EN)
	  mul_initiated <= `BSV_ASSIGNMENT_DELAY mul_initiated_D_IN;
	if (rg_a_EN) rg_a <= `BSV_ASSIGNMENT_DELAY rg_a_D_IN;
	if (rg_b_EN) rg_b <= `BSV_ASSIGNMENT_DELAY rg_b_D_IN;
	if (rg_c_EN) rg_c <= `BSV_ASSIGNMENT_DELAY rg_c_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ab_fifo_rv = 17'h0AAAA;
    abc_fifo_rv = 33'h0AAAAAAAA;
    add_initiated = 1'h0;
    fmac_completed = 1'h0;
    init_done = 1'h0;
    inpA_fifo_rv = 17'h0AAAA;
    inpB_fifo_rv = 17'h0AAAA;
    inpC_fifo_rv = 33'h0AAAAAAAA;
    mul_initiated = 1'h0;
    rg_a = 16'hAAAA;
    rg_b = 16'hAAAA;
    rg_c = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC_fp32_pipelined

