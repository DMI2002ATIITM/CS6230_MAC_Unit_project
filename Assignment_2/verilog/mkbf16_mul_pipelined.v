//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov  3 23:43:40 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AB                         O    16
// RDY_out_AB                     O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_out_AB                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbf16_mul_pipelined(CLK,
			    RST_N,

			    get_A_a,
			    EN_get_A,
			    RDY_get_A,

			    get_B_b,
			    EN_get_B,
			    RDY_get_B,

			    EN_out_AB,
			    out_AB,
			    RDY_out_AB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // actionvalue method out_AB
  input  EN_out_AB;
  output [15 : 0] out_AB;
  output RDY_out_AB;

  // signals for module outputs
  wire [15 : 0] out_AB;
  wire RDY_get_A, RDY_get_B, RDY_out_AB;

  // inlined wires
  wire [16 : 0] inpA_fifo_rv_port0__write_1,
		inpA_fifo_rv_port1__read,
		inpA_fifo_rv_port1__write_1,
		inpA_fifo_rv_port2__read,
		inpB_fifo_rv_port1__read,
		inpB_fifo_rv_port1__write_1,
		inpB_fifo_rv_port2__read,
		out_fifo_rv_port1__read,
		out_fifo_rv_port1__write_1,
		out_fifo_rv_port2__read;
  wire inpA_fifo_rv_EN_port0__write, inpB_fifo_rv_EN_port0__write;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register bf_a
  reg [15 : 0] bf_a;
  wire [15 : 0] bf_a_D_IN;
  wire bf_a_EN;

  // register bf_b
  reg [15 : 0] bf_b;
  wire [15 : 0] bf_b_D_IN;
  wire bf_b_EN;

  // register calculate_mantissa
  reg calculate_mantissa;
  wire calculate_mantissa_D_IN, calculate_mantissa_EN;

  // register count
  reg [3 : 0] count;
  wire [3 : 0] count_D_IN;
  wire count_EN;

  // register exp_c
  reg [7 : 0] exp_c;
  wire [7 : 0] exp_c_D_IN;
  wire exp_c_EN;

  // register expone_calculated
  reg expone_calculated;
  wire expone_calculated_D_IN, expone_calculated_EN;

  // register final_output
  reg [15 : 0] final_output;
  wire [15 : 0] final_output_D_IN;
  wire final_output_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register handled_zero
  reg handled_zero;
  wire handled_zero_D_IN, handled_zero_EN;

  // register init_done
  reg init_done;
  wire init_done_D_IN, init_done_EN;

  // register inpA_fifo_rv
  reg [16 : 0] inpA_fifo_rv;
  wire [16 : 0] inpA_fifo_rv_D_IN;
  wire inpA_fifo_rv_EN;

  // register inpB_fifo_rv
  reg [16 : 0] inpB_fifo_rv;
  wire [16 : 0] inpB_fifo_rv_D_IN;
  wire inpB_fifo_rv_EN;

  // register man_c
  reg [6 : 0] man_c;
  wire [6 : 0] man_c_D_IN;
  wire man_c_EN;

  // register man_c_and_final_exp
  reg [14 : 0] man_c_and_final_exp;
  wire [14 : 0] man_c_and_final_exp_D_IN;
  wire man_c_and_final_exp_EN;

  // register out_fifo_rv
  reg [16 : 0] out_fifo_rv;
  wire [16 : 0] out_fifo_rv_D_IN;
  wire out_fifo_rv_EN;

  // register rounding_done
  reg rounding_done;
  wire rounding_done_D_IN, rounding_done_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register sign_calculated
  reg sign_calculated;
  wire sign_calculated_D_IN, sign_calculated_EN;

  // register temp_A
  reg [15 : 0] temp_A;
  wire [15 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [15 : 0] temp_B;
  wire [15 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_prod
  reg [15 : 0] temp_prod;
  wire [15 : 0] temp_prod_D_IN;
  wire temp_prod_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expone,
       CAN_FIRE_RL_calculate_sign,
       CAN_FIRE_RL_deassert_assembled_answer,
       CAN_FIRE_RL_handle_case_zero,
       CAN_FIRE_RL_init,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_RL_round_nearest,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_out_AB,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expone,
       WILL_FIRE_RL_calculate_sign,
       WILL_FIRE_RL_deassert_assembled_answer,
       WILL_FIRE_RL_handle_case_zero,
       WILL_FIRE_RL_init,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_RL_round_nearest,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_out_AB;

  // inputs to muxes for submodule ports
  wire [16 : 0] MUX_out_fifo_rv_port1__write_1__VAL_1;
  wire [15 : 0] MUX_temp_A_write_1__VAL_1,
		MUX_temp_A_write_1__VAL_2,
		MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_prod_write_1__VAL_2;
  wire [3 : 0] MUX_count_write_1__VAL_2;
  wire MUX_assembled_answer_write_1__SEL_2,
       MUX_count_write_1__SEL_1,
       MUX_sign_calculated_write_1__SEL_2;

  // remaining internal signals
  wire [15 : 0] IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5;
  wire [14 : 0] IF_IF_temp_prod_40_BIT_15_41_THEN_IF_NOT_temp__ETC__q8;
  wire [13 : 0] temp_prod_40_BIT_13_49_XOR_temp_A_42_BIT_13_50_ETC___d256;
  wire [11 : 0] temp_prod_40_BIT_11_57_XOR_temp_A_42_BIT_11_58_ETC___d255;
  wire [9 : 0] temp_prod_40_BIT_9_65_XOR_temp_A_42_BIT_9_66_6_ETC___d254;
  wire [8 : 0] IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7,
	       IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6;
  wire [7 : 0] IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q4,
	       IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q3,
	       IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2,
	       IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1,
	       _theResult___snd__h12974,
	       _theResult___snd_fst__h13049,
	       _theResult___snd_fst__h16065,
	       _theResult___snd_fst__h16073,
	       exp_c_76_BIT_7_77_XOR_exp_c_76_BIT_6_78_AND_ex_ETC___d331,
	       temp_prod_40_BIT_7_73_XOR_temp_A_42_BIT_7_74_7_ETC___d253,
	       x__h13046;
  wire [6 : 0] IF_NOT_temp_prod_40_BIT_6_77_34_OR_temp_prod_4_ETC___d387,
	       IF_NOT_temp_prod_40_BIT_7_73_70_OR_temp_prod_4_ETC___d368,
	       IF_temp_prod_40_BIT_15_41_THEN_IF_NOT_temp_pro_ETC___d388,
	       x__h11042,
	       x__h11065,
	       x__h12977,
	       x__h13000;
  wire [5 : 0] bf_a_8_BIT_12_1_XOR_bf_b_4_BIT_12_2_4_XOR_bf_a_ETC___d125,
	       exp_c_76_BIT_5_79_XOR_exp_c_76_BIT_4_80_AND_ex_ETC___d330,
	       temp_prod_40_BIT_5_81_XOR_temp_A_42_BIT_5_82_8_ETC___d252;
  wire [4 : 0] temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d384,
	       temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d365;
  wire [3 : 0] bf_a_8_BIT_10_9_XOR_bf_b_4_BIT_10_0_2_XOR_bf_a_ETC___d124,
	       exp_c_76_BIT_3_81_XOR_exp_c_76_BIT_2_82_AND_ex_ETC___d329,
	       temp_prod_40_BIT_3_89_XOR_temp_A_42_BIT_3_90_9_ETC___d251;
  wire [1 : 0] temp_prod_40_BIT_1_97_XOR_temp_A_42_BIT_1_98_0_ETC___d250;
  wire exp_c_76_BIT_7_77_XOR_exp_c_76_BIT_6_78_AND_ex_ETC___d291,
       init_done_AND_sign_calculated_2_9_AND_expone_c_ETC___d264,
       temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d356,
       temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d374,
       temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d355,
       temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d373,
       temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d354,
       temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d372,
       temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d353,
       temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d371,
       temp_prod_40_BIT_14_45_XOR_temp_prod_40_BIT_13_ETC___d352,
       temp_prod_40_BIT_15_41_AND_temp_prod_40_BIT_14_ETC___d311,
       temp_prod_40_BIT_15_41_XOR_temp_prod_40_BIT_14_ETC___d346,
       temp_prod_40_BIT_8_69_XOR_temp_prod_40_BIT_7_73___d376,
       temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_69___d357,
       temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_6_ETC___d375,
       x__h14830,
       x__h14956,
       x__h15142,
       x__h15328,
       x__h15514,
       x__h15700,
       x__h2616,
       x__h2743,
       x__h2800,
       x__h2929,
       x__h2986,
       x__h3115,
       x__h3172,
       x__h3301,
       x__h3358,
       x__h3487,
       x__h3544,
       x__h3673,
       x__h3730,
       x__h3903,
       x__h4029,
       x__h4215,
       x__h4401,
       x__h4587,
       x__h4773,
       x__h4959,
       x__h5944,
       x__h5991,
       x__h6136,
       x__h6183,
       x__h6328,
       x__h6375,
       x__h6520,
       x__h6567,
       x__h6712,
       x__h6759,
       x__h6904,
       x__h6951,
       x__h7096,
       x__h7143,
       x__h7288,
       x__h7335,
       x__h7480,
       x__h7527,
       x__h7672,
       x__h7719,
       x__h7864,
       x__h7911,
       x__h8056,
       x__h8103,
       x__h8248,
       x__h8295,
       x__h8381,
       x__h8440,
       x__h8487,
       y__h10116,
       y__h10302,
       y__h10488,
       y__h10674,
       y__h11679,
       y__h11865,
       y__h12051,
       y__h12237,
       y__h12423,
       y__h12609,
       y__h12795,
       y__h14957,
       y__h15143,
       y__h15329,
       y__h15515,
       y__h15701,
       y__h15887,
       y__h16464,
       y__h16653,
       y__h16842,
       y__h17031,
       y__h17220,
       y__h17409,
       y__h2617,
       y__h2744,
       y__h2801,
       y__h2930,
       y__h2987,
       y__h3116,
       y__h3173,
       y__h3302,
       y__h3359,
       y__h3488,
       y__h3545,
       y__h3674,
       y__h3731,
       y__h4030,
       y__h4216,
       y__h4402,
       y__h4588,
       y__h4774,
       y__h4960,
       y__h5886,
       y__h5945,
       y__h5992,
       y__h6078,
       y__h6137,
       y__h6270,
       y__h6329,
       y__h6462,
       y__h6521,
       y__h6654,
       y__h6713,
       y__h6846,
       y__h6905,
       y__h7038,
       y__h7097,
       y__h7230,
       y__h7289,
       y__h7422,
       y__h7481,
       y__h7614,
       y__h7673,
       y__h7806,
       y__h7865,
       y__h7998,
       y__h8057,
       y__h8190,
       y__h8249,
       y__h8382,
       y__h8441,
       y__h9744,
       y__h9930;

  // action method get_A
  assign RDY_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // actionvalue method out_AB
  assign out_AB = out_fifo_rv[15:0] ;
  assign RDY_out_AB = out_fifo_rv[16] && assembled_answer ;
  assign CAN_FIRE_out_AB = out_fifo_rv[16] && assembled_answer ;
  assign WILL_FIRE_out_AB = EN_out_AB ;

  // rule RL_init
  assign CAN_FIRE_RL_init =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && !init_done ;
  assign WILL_FIRE_RL_init = CAN_FIRE_RL_init ;

  // rule RL_calculate_sign
  assign CAN_FIRE_RL_calculate_sign =
	     init_done && !sign_calculated && !handle_zero ;
  assign WILL_FIRE_RL_calculate_sign = CAN_FIRE_RL_calculate_sign ;

  // rule RL_handle_case_zero
  assign CAN_FIRE_RL_handle_case_zero =
	     !out_fifo_rv_port1__read[16] && init_done && handle_zero &&
	     !handled_zero ;
  assign WILL_FIRE_RL_handle_case_zero = CAN_FIRE_RL_handle_case_zero ;

  // rule RL_calculate_expone
  assign CAN_FIRE_RL_calculate_expone =
	     init_done && sign_calculated && !expone_calculated &&
	     !handle_zero ;
  assign WILL_FIRE_RL_calculate_expone = CAN_FIRE_RL_calculate_expone ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     init_done && count != 4'd0 && sign_calculated &&
	     expone_calculated &&
	     calculate_mantissa &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_round_nearest
  assign CAN_FIRE_RL_round_nearest =
	     init_done_AND_sign_calculated_2_9_AND_expone_c_ETC___d264 &&
	     count == 4'd0 &&
	     !rounding_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_round_nearest = CAN_FIRE_RL_round_nearest ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     !out_fifo_rv_port1__read[16] &&
	     init_done_AND_sign_calculated_2_9_AND_expone_c_ETC___d264 &&
	     rounding_done &&
	     !assembled_answer &&
	     !handle_zero ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // rule RL_deassert_assembled_answer
  assign CAN_FIRE_RL_deassert_assembled_answer = assembled_answer ;
  assign WILL_FIRE_RL_deassert_assembled_answer = MUX_count_write_1__SEL_1 ;

  // inputs to muxes for submodule ports
  assign MUX_assembled_answer_write_1__SEL_2 =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_handle_case_zero ;
  assign MUX_count_write_1__SEL_1 =
	     assembled_answer && !WILL_FIRE_RL_handle_case_zero ;
  assign MUX_sign_calculated_write_1__SEL_2 =
	     WILL_FIRE_RL_calculate_sign &&
	     (bf_a[14:7] != 8'd0 || bf_a[6:0] != 7'd0) &&
	     (bf_b[14:7] != 8'd0 || bf_b[6:0] != 7'd0) ;
  assign MUX_count_write_1__VAL_2 = count - 4'd1 ;
  assign MUX_out_fifo_rv_port1__write_1__VAL_1 =
	     { 1'd1, sign_c, man_c_and_final_exp } ;
  assign MUX_temp_A_write_1__VAL_1 = { 9'd1, bf_a[6:0] } ;
  assign MUX_temp_A_write_1__VAL_2 = { temp_A[14:0], 1'd0 } ;
  assign MUX_temp_B_write_1__VAL_1 = { 9'd1, bf_b[6:0] } ;
  assign MUX_temp_B_write_1__VAL_2 = { 1'd0, temp_B[15:1] } ;
  assign MUX_temp_prod_write_1__VAL_2 =
	     { x__h8381 ^ y__h8382,
	       x__h8487 ^ y__h8190,
	       temp_prod_40_BIT_13_49_XOR_temp_A_42_BIT_13_50_ETC___d256 } ;

  // inlined wires
  assign inpA_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && !init_done ;
  assign inpA_fifo_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpA_fifo_rv_port1__read =
	     inpA_fifo_rv_EN_port0__write ?
	       inpA_fifo_rv_port0__write_1 :
	       inpA_fifo_rv ;
  assign inpA_fifo_rv_port1__write_1 = { 1'd1, get_A_a } ;
  assign inpA_fifo_rv_port2__read =
	     EN_get_A ?
	       inpA_fifo_rv_port1__write_1 :
	       inpA_fifo_rv_port1__read ;
  assign inpB_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && !init_done ;
  assign inpB_fifo_rv_port1__read =
	     inpB_fifo_rv_EN_port0__write ?
	       inpA_fifo_rv_port0__write_1 :
	       inpB_fifo_rv ;
  assign inpB_fifo_rv_port1__write_1 = { 1'd1, get_B_b } ;
  assign inpB_fifo_rv_port2__read =
	     EN_get_B ?
	       inpB_fifo_rv_port1__write_1 :
	       inpB_fifo_rv_port1__read ;
  assign out_fifo_rv_port1__read =
	     EN_out_AB ? inpA_fifo_rv_port0__write_1 : out_fifo_rv ;
  assign out_fifo_rv_port1__write_1 =
	     WILL_FIRE_RL_assemble_answer ?
	       MUX_out_fifo_rv_port1__write_1__VAL_1 :
	       17'd65536 ;
  assign out_fifo_rv_port2__read =
	     MUX_assembled_answer_write_1__SEL_2 ?
	       out_fifo_rv_port1__write_1 :
	       out_fifo_rv_port1__read ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_handle_case_zero ;

  // register bf_a
  assign bf_a_D_IN = inpA_fifo_rv[15:0] ;
  assign bf_a_EN = CAN_FIRE_RL_init ;

  // register bf_b
  assign bf_b_D_IN = inpB_fifo_rv[15:0] ;
  assign bf_b_EN = CAN_FIRE_RL_init ;

  // register calculate_mantissa
  assign calculate_mantissa_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign calculate_mantissa_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expone ;

  // register count
  assign count_D_IN =
	     WILL_FIRE_RL_deassert_assembled_answer ?
	       4'd8 :
	       MUX_count_write_1__VAL_2 ;
  assign count_EN =
	     WILL_FIRE_RL_rl_multiply ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register exp_c
  assign exp_c_D_IN =
	     { x__h4959 ^ y__h4960,
	       x__h4773 ^ y__h4774,
	       bf_a_8_BIT_12_1_XOR_bf_b_4_BIT_12_2_4_XOR_bf_a_ETC___d125 } ;
  assign exp_c_EN = CAN_FIRE_RL_calculate_expone ;

  // register expone_calculated
  assign expone_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign expone_calculated_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expone ;

  // register final_output
  assign final_output_D_IN = 16'h0 ;
  assign final_output_EN = 1'b0 ;

  // register handle_zero
  assign handle_zero_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_calculate_sign &&
	     (bf_a[14:7] == 8'd0 && bf_a[6:0] == 7'd0 ||
	      bf_b[14:7] == 8'd0 && bf_b[6:0] == 7'd0) ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register handled_zero
  assign handled_zero_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign handled_zero_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_handle_case_zero ;

  // register init_done
  assign init_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign init_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_init ;

  // register inpA_fifo_rv
  assign inpA_fifo_rv_D_IN = inpA_fifo_rv_port2__read ;
  assign inpA_fifo_rv_EN = 1'b1 ;

  // register inpB_fifo_rv
  assign inpB_fifo_rv_D_IN = inpB_fifo_rv_port2__read ;
  assign inpB_fifo_rv_EN = 1'b1 ;

  // register man_c
  assign man_c_D_IN = 7'h0 ;
  assign man_c_EN = 1'b0 ;

  // register man_c_and_final_exp
  assign man_c_and_final_exp_D_IN =
	     { x__h13046,
	       IF_temp_prod_40_BIT_15_41_THEN_IF_NOT_temp_pro_ETC___d388[6:1],
	       IF_IF_temp_prod_40_BIT_15_41_THEN_IF_NOT_temp__ETC__q8[0] } ;
  assign man_c_and_final_exp_EN = CAN_FIRE_RL_round_nearest ;

  // register out_fifo_rv
  assign out_fifo_rv_D_IN = out_fifo_rv_port2__read ;
  assign out_fifo_rv_EN = 1'b1 ;

  // register rounding_done
  assign rounding_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign rounding_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_round_nearest ;

  // register sign_c
  assign sign_c_D_IN = bf_a[15] ^ bf_b[15] ;
  assign sign_c_EN = MUX_sign_calculated_write_1__SEL_2 ;

  // register sign_calculated
  assign sign_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign sign_calculated_EN =
	     WILL_FIRE_RL_calculate_sign &&
	     (bf_a[14:7] != 8'd0 || bf_a[6:0] != 7'd0) &&
	     (bf_b[14:7] != 8'd0 || bf_b[6:0] != 7'd0) ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register temp_A
  assign temp_A_D_IN =
	     WILL_FIRE_RL_calculate_expone ?
	       MUX_temp_A_write_1__VAL_1 :
	       MUX_temp_A_write_1__VAL_2 ;
  assign temp_A_EN =
	     WILL_FIRE_RL_calculate_expone || WILL_FIRE_RL_rl_multiply ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_calculate_expone ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN =
	     WILL_FIRE_RL_calculate_expone || WILL_FIRE_RL_rl_multiply ;

  // register temp_prod
  assign temp_prod_D_IN =
	     WILL_FIRE_RL_deassert_assembled_answer ?
	       16'd0 :
	       MUX_temp_prod_write_1__VAL_2 ;
  assign temp_prod_EN =
	     WILL_FIRE_RL_rl_multiply && temp_B[0] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // remaining internal signals
  assign IF_IF_temp_prod_40_BIT_15_41_THEN_IF_NOT_temp__ETC__q8 =
	     IF_temp_prod_40_BIT_15_41_THEN_IF_NOT_temp_pro_ETC___d388[0] ?
	       15'd1 :
	       15'd0 ;
  assign IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q4 =
	     (~IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q3 =
	     (~IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2 = (~exp_c[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7 =
	     (~temp_prod[7]) ? 9'd1 : 9'd0 ;
  assign IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6 =
	     (~temp_prod[8]) ? 9'd1 : 9'd0 ;
  assign IF_NOT_temp_prod_40_BIT_6_77_34_OR_temp_prod_4_ETC___d387 =
	     (!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
	       temp_prod[13:7] :
	       (temp_prod_40_BIT_15_41_XOR_temp_prod_40_BIT_14_ETC___d346 ?
		  x__h12977 :
		  x__h13000) ;
  assign IF_NOT_temp_prod_40_BIT_7_73_70_OR_temp_prod_4_ETC___d368 =
	     (!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
	       temp_prod[14:8] :
	       (temp_prod_40_BIT_15_41_AND_temp_prod_40_BIT_14_ETC___d311 ?
		  x__h11042 :
		  x__h11065) ;
  assign IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1 =
	     (bf_a[7] ^ bf_b[7]) ? 8'd1 : 8'd0 ;
  assign IF_temp_prod_40_BIT_15_41_THEN_IF_NOT_temp_pro_ETC___d388 =
	     temp_prod[15] ?
	       IF_NOT_temp_prod_40_BIT_7_73_70_OR_temp_prod_4_ETC___d368 :
	       IF_NOT_temp_prod_40_BIT_6_77_34_OR_temp_prod_4_ETC___d387 ;
  assign IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5 =
	     (temp_prod[0] ^ temp_A[0]) ? 16'd1 : 16'd0 ;
  assign _theResult___snd__h12974 =
	     { exp_c_76_BIT_7_77_XOR_exp_c_76_BIT_6_78_AND_ex_ETC___d291,
	       x__h15700,
	       x__h15514,
	       x__h15328,
	       x__h15142,
	       x__h14956,
	       x__h14830,
	       IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign _theResult___snd_fst__h13049 =
	     (!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
	       _theResult___snd__h12974 :
	       (temp_prod_40_BIT_15_41_AND_temp_prod_40_BIT_14_ETC___d311 ?
		  exp_c_76_BIT_7_77_XOR_exp_c_76_BIT_6_78_AND_ex_ETC___d331 :
		  _theResult___snd__h12974) ;
  assign _theResult___snd_fst__h16065 =
	     (!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
	       exp_c :
	       _theResult___snd_fst__h16073 ;
  assign _theResult___snd_fst__h16073 =
	     temp_prod_40_BIT_15_41_XOR_temp_prod_40_BIT_14_ETC___d346 ?
	       _theResult___snd__h12974 :
	       exp_c ;
  assign bf_a_8_BIT_10_9_XOR_bf_b_4_BIT_10_0_2_XOR_bf_a_ETC___d124 =
	     { x__h4215 ^ y__h4216,
	       x__h4029 ^ y__h4030,
	       x__h3903 ^ IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0],
	       IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q3[0] } ;
  assign bf_a_8_BIT_12_1_XOR_bf_b_4_BIT_12_2_4_XOR_bf_a_ETC___d125 =
	     { x__h4587 ^ y__h4588,
	       x__h4401 ^ y__h4402,
	       bf_a_8_BIT_10_9_XOR_bf_b_4_BIT_10_0_2_XOR_bf_a_ETC___d124 } ;
  assign exp_c_76_BIT_3_81_XOR_exp_c_76_BIT_2_82_AND_ex_ETC___d329 =
	     { x__h15142 ^ y__h15143,
	       x__h14956 ^ y__h14957,
	       x__h14830 ^ IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0],
	       IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q4[0] } ;
  assign exp_c_76_BIT_5_79_XOR_exp_c_76_BIT_4_80_AND_ex_ETC___d330 =
	     { x__h15514 ^ y__h15515,
	       x__h15328 ^ y__h15329,
	       exp_c_76_BIT_3_81_XOR_exp_c_76_BIT_2_82_AND_ex_ETC___d329 } ;
  assign exp_c_76_BIT_7_77_XOR_exp_c_76_BIT_6_78_AND_ex_ETC___d291 =
	     exp_c[7] ^ y__h17409 ;
  assign exp_c_76_BIT_7_77_XOR_exp_c_76_BIT_6_78_AND_ex_ETC___d331 =
	     { exp_c_76_BIT_7_77_XOR_exp_c_76_BIT_6_78_AND_ex_ETC___d291 ^
	       y__h15887,
	       x__h15700 ^ y__h15701,
	       exp_c_76_BIT_5_79_XOR_exp_c_76_BIT_4_80_AND_ex_ETC___d330 } ;
  assign init_done_AND_sign_calculated_2_9_AND_expone_c_ETC___d264 =
	     init_done && sign_calculated && expone_calculated &&
	     calculate_mantissa ;
  assign temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d356 =
	     temp_prod[10] ^ y__h9744 ;
  assign temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d374 =
	     temp_prod[10] ^ y__h11865 ;
  assign temp_prod_40_BIT_11_57_XOR_temp_A_42_BIT_11_58_ETC___d255 =
	     { x__h7911 ^ y__h7614,
	       x__h7719 ^ y__h7422,
	       temp_prod_40_BIT_9_65_XOR_temp_A_42_BIT_9_66_6_ETC___d254 } ;
  assign temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d355 =
	     temp_prod[11] ^ y__h9930 ;
  assign temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d373 =
	     temp_prod[11] ^ y__h12051 ;
  assign temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d384 =
	     { temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d373,
	       temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d374,
	       temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_6_ETC___d375,
	       temp_prod_40_BIT_8_69_XOR_temp_prod_40_BIT_7_73___d376,
	       IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7[0] } ;
  assign temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d354 =
	     temp_prod[12] ^ y__h10116 ;
  assign temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d365 =
	     { temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d354,
	       temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d355,
	       temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d356,
	       temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_69___d357,
	       IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6[0] } ;
  assign temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d372 =
	     temp_prod[12] ^ y__h12237 ;
  assign temp_prod_40_BIT_13_49_XOR_temp_A_42_BIT_13_50_ETC___d256 =
	     { x__h8295 ^ y__h7998,
	       x__h8103 ^ y__h7806,
	       temp_prod_40_BIT_11_57_XOR_temp_A_42_BIT_11_58_ETC___d255 } ;
  assign temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d353 =
	     temp_prod[13] ^ y__h10302 ;
  assign temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d371 =
	     temp_prod[13] ^ y__h12423 ;
  assign temp_prod_40_BIT_14_45_XOR_temp_prod_40_BIT_13_ETC___d352 =
	     temp_prod[14] ^ y__h10488 ;
  assign temp_prod_40_BIT_15_41_AND_temp_prod_40_BIT_14_ETC___d311 =
	     temp_prod[15] & y__h10674 ;
  assign temp_prod_40_BIT_15_41_XOR_temp_prod_40_BIT_14_ETC___d346 =
	     temp_prod[15] ^ y__h12795 ;
  assign temp_prod_40_BIT_1_97_XOR_temp_A_42_BIT_1_98_0_ETC___d250 =
	     { x__h5991 ^ y__h5992,
	       IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5[0] } ;
  assign temp_prod_40_BIT_3_89_XOR_temp_A_42_BIT_3_90_9_ETC___d251 =
	     { x__h6375 ^ y__h6078,
	       x__h6183 ^ y__h5886,
	       temp_prod_40_BIT_1_97_XOR_temp_A_42_BIT_1_98_0_ETC___d250 } ;
  assign temp_prod_40_BIT_5_81_XOR_temp_A_42_BIT_5_82_8_ETC___d252 =
	     { x__h6759 ^ y__h6462,
	       x__h6567 ^ y__h6270,
	       temp_prod_40_BIT_3_89_XOR_temp_A_42_BIT_3_90_9_ETC___d251 } ;
  assign temp_prod_40_BIT_7_73_XOR_temp_A_42_BIT_7_74_7_ETC___d253 =
	     { x__h7143 ^ y__h6846,
	       x__h6951 ^ y__h6654,
	       temp_prod_40_BIT_5_81_XOR_temp_A_42_BIT_5_82_8_ETC___d252 } ;
  assign temp_prod_40_BIT_8_69_XOR_temp_prod_40_BIT_7_73___d376 =
	     temp_prod[8] ^ temp_prod[7] ;
  assign temp_prod_40_BIT_9_65_XOR_temp_A_42_BIT_9_66_6_ETC___d254 =
	     { x__h7527 ^ y__h7230,
	       x__h7335 ^ y__h7038,
	       temp_prod_40_BIT_7_73_XOR_temp_A_42_BIT_7_74_7_ETC___d253 } ;
  assign temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_69___d357 =
	     temp_prod[9] ^ temp_prod[8] ;
  assign temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_6_ETC___d375 =
	     temp_prod[9] ^ y__h11679 ;
  assign x__h11042 =
	     { temp_prod[15] ^ y__h10674,
	       temp_prod_40_BIT_14_45_XOR_temp_prod_40_BIT_13_ETC___d352,
	       temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d353,
	       temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d354,
	       temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d355,
	       temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d356,
	       temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_69___d357 } ;
  assign x__h11065 =
	     { temp_prod_40_BIT_14_45_XOR_temp_prod_40_BIT_13_ETC___d352,
	       temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d353,
	       temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d365 } ;
  assign x__h12977 =
	     { temp_prod[14] ^ y__h12609,
	       temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d371,
	       temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d372,
	       temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d373,
	       temp_prod_40_BIT_10_61_XOR_temp_prod_40_BIT_9__ETC___d374,
	       temp_prod_40_BIT_9_65_XOR_temp_prod_40_BIT_8_6_ETC___d375,
	       temp_prod_40_BIT_8_69_XOR_temp_prod_40_BIT_7_73___d376 } ;
  assign x__h13000 =
	     { temp_prod_40_BIT_13_49_XOR_temp_prod_40_BIT_12_ETC___d371,
	       temp_prod_40_BIT_12_53_XOR_temp_prod_40_BIT_11_ETC___d372,
	       temp_prod_40_BIT_11_57_XOR_temp_prod_40_BIT_10_ETC___d384 } ;
  assign x__h13046 =
	     temp_prod[15] ?
	       _theResult___snd_fst__h13049 :
	       _theResult___snd_fst__h16065 ;
  assign x__h14830 = exp_c[1] ^ exp_c[0] ;
  assign x__h14956 = exp_c[2] ^ y__h16464 ;
  assign x__h15142 = exp_c[3] ^ y__h16653 ;
  assign x__h15328 = exp_c[4] ^ y__h16842 ;
  assign x__h15514 = exp_c[5] ^ y__h17031 ;
  assign x__h15700 = exp_c[6] ^ y__h17220 ;
  assign x__h2616 = bf_a[8] ^ bf_b[8] ;
  assign x__h2743 = bf_a[9] ^ bf_b[9] ;
  assign x__h2800 = bf_a[8] & bf_b[8] ;
  assign x__h2929 = bf_a[10] ^ bf_b[10] ;
  assign x__h2986 = bf_a[9] & bf_b[9] ;
  assign x__h3115 = bf_a[11] ^ bf_b[11] ;
  assign x__h3172 = bf_a[10] & bf_b[10] ;
  assign x__h3301 = bf_a[12] ^ bf_b[12] ;
  assign x__h3358 = bf_a[11] & bf_b[11] ;
  assign x__h3487 = bf_a[13] ^ bf_b[13] ;
  assign x__h3544 = bf_a[12] & bf_b[12] ;
  assign x__h3673 = bf_a[14] ^ bf_b[14] ;
  assign x__h3730 = bf_a[13] & bf_b[13] ;
  assign x__h3903 = x__h2616 ^ y__h2617 ;
  assign x__h4029 = x__h2743 ^ y__h2744 ;
  assign x__h4215 = x__h2929 ^ y__h2930 ;
  assign x__h4401 = x__h3115 ^ y__h3116 ;
  assign x__h4587 = x__h3301 ^ y__h3302 ;
  assign x__h4773 = x__h3487 ^ y__h3488 ;
  assign x__h4959 = ~(x__h3673 ^ y__h3674) ;
  assign x__h5944 = temp_prod[1] & temp_A[1] ;
  assign x__h5991 = temp_prod[1] ^ temp_A[1] ;
  assign x__h6136 = temp_prod[2] & temp_A[2] ;
  assign x__h6183 = temp_prod[2] ^ temp_A[2] ;
  assign x__h6328 = temp_prod[3] & temp_A[3] ;
  assign x__h6375 = temp_prod[3] ^ temp_A[3] ;
  assign x__h6520 = temp_prod[4] & temp_A[4] ;
  assign x__h6567 = temp_prod[4] ^ temp_A[4] ;
  assign x__h6712 = temp_prod[5] & temp_A[5] ;
  assign x__h6759 = temp_prod[5] ^ temp_A[5] ;
  assign x__h6904 = temp_prod[6] & temp_A[6] ;
  assign x__h6951 = temp_prod[6] ^ temp_A[6] ;
  assign x__h7096 = temp_prod[7] & temp_A[7] ;
  assign x__h7143 = temp_prod[7] ^ temp_A[7] ;
  assign x__h7288 = temp_prod[8] & temp_A[8] ;
  assign x__h7335 = temp_prod[8] ^ temp_A[8] ;
  assign x__h7480 = temp_prod[9] & temp_A[9] ;
  assign x__h7527 = temp_prod[9] ^ temp_A[9] ;
  assign x__h7672 = temp_prod[10] & temp_A[10] ;
  assign x__h7719 = temp_prod[10] ^ temp_A[10] ;
  assign x__h7864 = temp_prod[11] & temp_A[11] ;
  assign x__h7911 = temp_prod[11] ^ temp_A[11] ;
  assign x__h8056 = temp_prod[12] & temp_A[12] ;
  assign x__h8103 = temp_prod[12] ^ temp_A[12] ;
  assign x__h8248 = temp_prod[13] & temp_A[13] ;
  assign x__h8295 = temp_prod[13] ^ temp_A[13] ;
  assign x__h8381 = temp_prod[15] ^ temp_A[15] ;
  assign x__h8440 = temp_prod[14] & temp_A[14] ;
  assign x__h8487 = temp_prod[14] ^ temp_A[14] ;
  assign y__h10116 = temp_prod[11] & y__h9930 ;
  assign y__h10302 = temp_prod[12] & y__h10116 ;
  assign y__h10488 = temp_prod[13] & y__h10302 ;
  assign y__h10674 = temp_prod[14] & y__h10488 ;
  assign y__h11679 = temp_prod[8] & temp_prod[7] ;
  assign y__h11865 = temp_prod[9] & y__h11679 ;
  assign y__h12051 = temp_prod[10] & y__h11865 ;
  assign y__h12237 = temp_prod[11] & y__h12051 ;
  assign y__h12423 = temp_prod[12] & y__h12237 ;
  assign y__h12609 = temp_prod[13] & y__h12423 ;
  assign y__h12795 = temp_prod[14] & y__h12609 ;
  assign y__h14957 = x__h14830 & IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h15143 = x__h14956 & y__h14957 ;
  assign y__h15329 = x__h15142 & y__h15143 ;
  assign y__h15515 = x__h15328 & y__h15329 ;
  assign y__h15701 = x__h15514 & y__h15515 ;
  assign y__h15887 = x__h15700 & y__h15701 ;
  assign y__h16464 = exp_c[1] & exp_c[0] ;
  assign y__h16653 = exp_c[2] & y__h16464 ;
  assign y__h16842 = exp_c[3] & y__h16653 ;
  assign y__h17031 = exp_c[4] & y__h16842 ;
  assign y__h17220 = exp_c[5] & y__h17031 ;
  assign y__h17409 = exp_c[6] & y__h17220 ;
  assign y__h2617 = bf_a[7] & bf_b[7] ;
  assign y__h2744 = x__h2800 | y__h2801 ;
  assign y__h2801 = x__h2616 & y__h2617 ;
  assign y__h2930 = x__h2986 | y__h2987 ;
  assign y__h2987 = x__h2743 & y__h2744 ;
  assign y__h3116 = x__h3172 | y__h3173 ;
  assign y__h3173 = x__h2929 & y__h2930 ;
  assign y__h3302 = x__h3358 | y__h3359 ;
  assign y__h3359 = x__h3115 & y__h3116 ;
  assign y__h3488 = x__h3544 | y__h3545 ;
  assign y__h3545 = x__h3301 & y__h3302 ;
  assign y__h3674 = x__h3730 | y__h3731 ;
  assign y__h3731 = x__h3487 & y__h3488 ;
  assign y__h4030 =
	     x__h3903 & IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0] ;
  assign y__h4216 = x__h4029 & y__h4030 ;
  assign y__h4402 = x__h4215 & y__h4216 ;
  assign y__h4588 = x__h4401 & y__h4402 ;
  assign y__h4774 = x__h4587 & y__h4588 ;
  assign y__h4960 = x__h4773 & y__h4774 ;
  assign y__h5886 = x__h5944 | y__h5945 ;
  assign y__h5945 = x__h5991 & y__h5992 ;
  assign y__h5992 = temp_prod[0] & temp_A[0] ;
  assign y__h6078 = x__h6136 | y__h6137 ;
  assign y__h6137 = x__h6183 & y__h5886 ;
  assign y__h6270 = x__h6328 | y__h6329 ;
  assign y__h6329 = x__h6375 & y__h6078 ;
  assign y__h6462 = x__h6520 | y__h6521 ;
  assign y__h6521 = x__h6567 & y__h6270 ;
  assign y__h6654 = x__h6712 | y__h6713 ;
  assign y__h6713 = x__h6759 & y__h6462 ;
  assign y__h6846 = x__h6904 | y__h6905 ;
  assign y__h6905 = x__h6951 & y__h6654 ;
  assign y__h7038 = x__h7096 | y__h7097 ;
  assign y__h7097 = x__h7143 & y__h6846 ;
  assign y__h7230 = x__h7288 | y__h7289 ;
  assign y__h7289 = x__h7335 & y__h7038 ;
  assign y__h7422 = x__h7480 | y__h7481 ;
  assign y__h7481 = x__h7527 & y__h7230 ;
  assign y__h7614 = x__h7672 | y__h7673 ;
  assign y__h7673 = x__h7719 & y__h7422 ;
  assign y__h7806 = x__h7864 | y__h7865 ;
  assign y__h7865 = x__h7911 & y__h7614 ;
  assign y__h7998 = x__h8056 | y__h8057 ;
  assign y__h8057 = x__h8103 & y__h7806 ;
  assign y__h8190 = x__h8248 | y__h8249 ;
  assign y__h8249 = x__h8295 & y__h7998 ;
  assign y__h8382 = x__h8440 | y__h8441 ;
  assign y__h8441 = x__h8487 & y__h8190 ;
  assign y__h9744 = temp_prod[9] & temp_prod[8] ;
  assign y__h9930 = temp_prod[10] & y__h9744 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bf_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	calculate_mantissa <= `BSV_ASSIGNMENT_DELAY 1'd0;
	count <= `BSV_ASSIGNMENT_DELAY 4'd8;
	exp_c <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expone_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	final_output <= `BSV_ASSIGNMENT_DELAY 16'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handled_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	init_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	man_c <= `BSV_ASSIGNMENT_DELAY 7'd0;
	man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY 15'd0;
	out_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	rounding_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	temp_prod <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (bf_a_EN) bf_a <= `BSV_ASSIGNMENT_DELAY bf_a_D_IN;
	if (bf_b_EN) bf_b <= `BSV_ASSIGNMENT_DELAY bf_b_D_IN;
	if (calculate_mantissa_EN)
	  calculate_mantissa <= `BSV_ASSIGNMENT_DELAY calculate_mantissa_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (exp_c_EN) exp_c <= `BSV_ASSIGNMENT_DELAY exp_c_D_IN;
	if (expone_calculated_EN)
	  expone_calculated <= `BSV_ASSIGNMENT_DELAY expone_calculated_D_IN;
	if (final_output_EN)
	  final_output <= `BSV_ASSIGNMENT_DELAY final_output_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (handled_zero_EN)
	  handled_zero <= `BSV_ASSIGNMENT_DELAY handled_zero_D_IN;
	if (init_done_EN) init_done <= `BSV_ASSIGNMENT_DELAY init_done_D_IN;
	if (inpA_fifo_rv_EN)
	  inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA_fifo_rv_D_IN;
	if (inpB_fifo_rv_EN)
	  inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpB_fifo_rv_D_IN;
	if (man_c_EN) man_c <= `BSV_ASSIGNMENT_DELAY man_c_D_IN;
	if (man_c_and_final_exp_EN)
	  man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY
	      man_c_and_final_exp_D_IN;
	if (out_fifo_rv_EN)
	  out_fifo_rv <= `BSV_ASSIGNMENT_DELAY out_fifo_rv_D_IN;
	if (rounding_done_EN)
	  rounding_done <= `BSV_ASSIGNMENT_DELAY rounding_done_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (sign_calculated_EN)
	  sign_calculated <= `BSV_ASSIGNMENT_DELAY sign_calculated_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_prod_EN) temp_prod <= `BSV_ASSIGNMENT_DELAY temp_prod_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    assembled_answer = 1'h0;
    bf_a = 16'hAAAA;
    bf_b = 16'hAAAA;
    calculate_mantissa = 1'h0;
    count = 4'hA;
    exp_c = 8'hAA;
    expone_calculated = 1'h0;
    final_output = 16'hAAAA;
    handle_zero = 1'h0;
    handled_zero = 1'h0;
    init_done = 1'h0;
    inpA_fifo_rv = 17'h0AAAA;
    inpB_fifo_rv = 17'h0AAAA;
    man_c = 7'h2A;
    man_c_and_final_exp = 15'h2AAA;
    out_fifo_rv = 17'h0AAAA;
    rounding_done = 1'h0;
    sign_c = 1'h0;
    sign_calculated = 1'h0;
    temp_A = 16'hAAAA;
    temp_B = 16'hAAAA;
    temp_prod = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbf16_mul_pipelined

