//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov  3 23:43:42 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32
// RDY_out_AaddB                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_out_AaddB                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add_pipelined(CLK,
			    RST_N,

			    get_A_a,
			    EN_get_A,
			    RDY_get_A,

			    get_B_b,
			    EN_get_B,
			    RDY_get_B,

			    EN_out_AaddB,
			    out_AaddB,
			    RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // actionvalue method out_AaddB
  input  EN_out_AaddB;
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // inlined wires
  reg [32 : 0] out_fifo_rv_port1__write_1;
  wire [32 : 0] inpB_fifo_rv_port0__write_1,
		inpB_fifo_rv_port1__read,
		inpB_fifo_rv_port1__write_1,
		inpB_fifo_rv_port2__read,
		out_fifo_rv_port1__read,
		out_fifo_rv_port2__read;
  wire [16 : 0] inpA_fifo_rv_port0__write_1,
		inpA_fifo_rv_port1__read,
		inpA_fifo_rv_port1__write_1,
		inpA_fifo_rv_port2__read;
  wire inpA_fifo_rv_EN_port0__write,
       inpB_fifo_rv_EN_port0__write,
       out_fifo_rv_EN_port1__write;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  reg [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register adj_done
  reg adj_done;
  wire adj_done_D_IN, adj_done_EN;

  // register adj_sub
  reg adj_sub;
  wire adj_sub_D_IN, adj_sub_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register do_add
  reg do_add;
  reg do_add_D_IN;
  wire do_add_EN;

  // register do_sub
  reg do_sub;
  reg do_sub_D_IN;
  wire do_sub_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  reg [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register handle_oneinpzero
  reg handle_oneinpzero;
  wire handle_oneinpzero_D_IN, handle_oneinpzero_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register init_done
  reg init_done;
  wire init_done_D_IN, init_done_EN;

  // register inpA_fifo_rv
  reg [16 : 0] inpA_fifo_rv;
  wire [16 : 0] inpA_fifo_rv_D_IN;
  wire inpA_fifo_rv_EN;

  // register inpB_fifo_rv
  reg [32 : 0] inpB_fifo_rv;
  wire [32 : 0] inpB_fifo_rv_D_IN;
  wire inpB_fifo_rv_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register out_fifo_rv
  reg [32 : 0] out_fifo_rv;
  wire [32 : 0] out_fifo_rv_D_IN;
  wire out_fifo_rv_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  reg [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_adjust_subres,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_deassert_assembled_answer,
       CAN_FIRE_RL_handle_oneinpzero_case,
       CAN_FIRE_RL_handle_zero_case,
       CAN_FIRE_RL_init,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_round_sub,
       CAN_FIRE_RL_sub,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_out_AaddB,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_adjust_subres,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_deassert_assembled_answer,
       WILL_FIRE_RL_handle_oneinpzero_case,
       WILL_FIRE_RL_handle_zero_case,
       WILL_FIRE_RL_init,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_round_sub,
       WILL_FIRE_RL_sub,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_out_AaddB;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_3,
		MUX_temp_sum_write_1__VAL_4;
  wire [32 : 0] MUX_out_fifo_rv_port1__write_1__VAL_1,
		MUX_out_fifo_rv_port1__write_1__VAL_2;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2,
		MUX_fp_a_write_1__VAL_3,
		MUX_fp_b_write_1__VAL_1;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_2,
		MUX_add_res_with_adj_exp_write_1__VAL_3;
  wire MUX_do_add_write_1__SEL_2,
       MUX_do_sub_write_1__SEL_2,
       MUX_fp_a_write_1__SEL_1,
       MUX_fp_a_write_1__SEL_2,
       MUX_fp_b_write_1__SEL_1,
       MUX_handle_zero_write_1__SEL_2,
       MUX_out_fifo_rv_port1__write_1__SEL_2,
       MUX_temp_B_write_1__SEL_1,
       MUX_temp_B_write_1__SEL_2;

  // remaining internal signals
  wire [49 : 0] IF_temp_A_BIT_0_XOR_INV_temp_B_55_39_PLUS_1_40_ETC__q11,
		IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10,
		INV_temp_B_55_39_PLUS_1___d540;
  wire [47 : 0] temp_A_63_BIT_47_71_XOR_INV_temp_B_55_39_PLUS__ETC___d860,
		temp_A_63_BIT_47_71_XOR_temp_B_55_BIT_47_72_74_ETC___d533;
  wire [45 : 0] temp_A_63_BIT_45_79_XOR_INV_temp_B_55_39_PLUS__ETC___d859,
		temp_A_63_BIT_45_79_XOR_temp_B_55_BIT_45_80_82_ETC___d532;
  wire [43 : 0] temp_A_63_BIT_43_87_XOR_INV_temp_B_55_39_PLUS__ETC___d858,
		temp_A_63_BIT_43_87_XOR_temp_B_55_BIT_43_88_90_ETC___d531;
  wire [41 : 0] temp_A_63_BIT_41_95_XOR_INV_temp_B_55_39_PLUS__ETC___d857,
		temp_A_63_BIT_41_95_XOR_temp_B_55_BIT_41_96_98_ETC___d530;
  wire [39 : 0] temp_A_63_BIT_39_03_XOR_INV_temp_B_55_39_PLUS__ETC___d856,
		temp_A_63_BIT_39_03_XOR_temp_B_55_BIT_39_04_06_ETC___d529;
  wire [37 : 0] temp_A_63_BIT_37_11_XOR_INV_temp_B_55_39_PLUS__ETC___d855,
		temp_A_63_BIT_37_11_XOR_temp_B_55_BIT_37_12_14_ETC___d528;
  wire [35 : 0] temp_A_63_BIT_35_19_XOR_INV_temp_B_55_39_PLUS__ETC___d854,
		temp_A_63_BIT_35_19_XOR_temp_B_55_BIT_35_20_22_ETC___d527;
  wire [33 : 0] temp_A_63_BIT_33_27_XOR_INV_temp_B_55_39_PLUS__ETC___d853,
		temp_A_63_BIT_33_27_XOR_temp_B_55_BIT_33_28_30_ETC___d526;
  wire [31 : 0] temp_A_63_BIT_31_35_XOR_INV_temp_B_55_39_PLUS__ETC___d852,
		temp_A_63_BIT_31_35_XOR_temp_B_55_BIT_31_36_38_ETC___d525;
  wire [30 : 0] IF_IF_temp_sum_69_BIT_48_70_THEN_IF_NOT_temp_s_ETC__q12,
		IF_IF_temp_sum_69_BIT_49_15_THEN_IF_NOT_temp_s_ETC__q13;
  wire [29 : 0] temp_A_63_BIT_29_43_XOR_INV_temp_B_55_39_PLUS__ETC___d851,
		temp_A_63_BIT_29_43_XOR_temp_B_55_BIT_29_44_46_ETC___d524;
  wire [27 : 0] temp_A_63_BIT_27_51_XOR_INV_temp_B_55_39_PLUS__ETC___d850,
		temp_A_63_BIT_27_51_XOR_temp_B_55_BIT_27_52_54_ETC___d523;
  wire [25 : 0] temp_A_63_BIT_25_59_XOR_INV_temp_B_55_39_PLUS__ETC___d849,
		temp_A_63_BIT_25_59_XOR_temp_B_55_BIT_25_60_62_ETC___d522;
  wire [24 : 0] IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5,
		IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [23 : 0] temp_A_63_BIT_23_67_XOR_INV_temp_B_55_39_PLUS__ETC___d848,
		temp_A_63_BIT_23_67_XOR_temp_B_55_BIT_23_68_70_ETC___d521;
  wire [22 : 0] IF_NOT_temp_sum_69_BIT_23_153_154_OR_temp_sum__ETC___d1265,
		IF_NOT_temp_sum_69_BIT_24_007_008_OR_temp_sum__ETC___d1141,
		IF_NOT_temp_sum_69_BIT_25_16_17_OR_temp_sum_69_ETC___d1090,
		IF_temp_sum_69_BIT_48_70_THEN_IF_NOT_temp_sum__ETC___d1266,
		IF_temp_sum_69_BIT_49_15_THEN_IF_NOT_temp_sum__ETC___d1142,
		v_fraction__h70776,
		x__h34962,
		x__h34985,
		x__h56453,
		x__h56476,
		x__h61732,
		x__h61755;
  wire [21 : 0] temp_A_63_BIT_21_75_XOR_INV_temp_B_55_39_PLUS__ETC___d847,
		temp_A_63_BIT_21_75_XOR_temp_B_55_BIT_21_76_78_ETC___d520;
  wire [19 : 0] temp_A_63_BIT_19_83_XOR_INV_temp_B_55_39_PLUS__ETC___d846,
		temp_A_63_BIT_19_83_XOR_temp_B_55_BIT_19_84_86_ETC___d519;
  wire [17 : 0] temp_A_63_BIT_17_91_XOR_INV_temp_B_55_39_PLUS__ETC___d845,
		temp_A_63_BIT_17_91_XOR_temp_B_55_BIT_17_92_94_ETC___d518;
  wire [15 : 0] temp_A_63_BIT_15_99_XOR_INV_temp_B_55_39_PLUS__ETC___d844,
		temp_A_63_BIT_15_99_XOR_temp_B_55_BIT_15_00_02_ETC___d517;
  wire [13 : 0] temp_A_63_BIT_13_07_XOR_INV_temp_B_55_39_PLUS__ETC___d843,
		temp_A_63_BIT_13_07_XOR_temp_B_55_BIT_13_08_10_ETC___d516;
  wire [11 : 0] temp_A_63_BIT_11_15_XOR_INV_temp_B_55_39_PLUS__ETC___d842,
		temp_A_63_BIT_11_15_XOR_temp_B_55_BIT_11_16_18_ETC___d515;
  wire [9 : 0] temp_A_63_BIT_9_23_XOR_INV_temp_B_55_39_PLUS_1_ETC___d841,
	       temp_A_63_BIT_9_23_XOR_temp_B_55_BIT_9_24_26_X_ETC___d514;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_exp___11216_BIT_0_THEN_1_ELSE_0__q7,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h40238,
	       _theResult___snd__h56450,
	       _theResult___snd_fst__h40313,
	       _theResult___snd_fst__h43312,
	       _theResult___snd_fst__h43320,
	       _theResult___snd_fst__h61804,
	       _theResult___snd_fst__h61812,
	       exp___1__h51216,
	       fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d1004,
	       temp_A_63_BIT_7_31_XOR_INV_temp_B_55_39_PLUS_1_ETC___d840,
	       temp_A_63_BIT_7_31_XOR_temp_B_55_BIT_7_32_34_X_ETC___d513,
	       v_exponent__h70775,
	       x__h40310,
	       x__h61801,
	       x_exponent__h27338;
  wire [5 : 0] INV_fp_a_3_BIT_28_8_74_XOR_fp_a_3_BIT_27_02_OR_ETC___d903,
	       fp_a_3_BITS_30_TO_23_4_MINUS_0b1_159_BIT_5_186_ETC___d1210,
	       fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d147,
	       fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_02_AND_fp_a__ETC___d1003,
	       temp_A_63_BIT_5_39_XOR_INV_temp_B_55_39_PLUS_1_ETC___d839,
	       temp_A_63_BIT_5_39_XOR_temp_B_55_BIT_5_40_42_X_ETC___d512;
  wire [4 : 0] temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1254,
	       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1130,
	       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1079;
  wire [3 : 0] INV_fp_a_3_BIT_26_06_76_XOR_fp_a_3_BIT_25_10_O_ETC___d902,
	       fp_a_3_BIT_26_06_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d146,
	       fp_a_3_BIT_26_06_XOR_fp_a_3_BIT_25_10_AND_fp_a_ETC___d1002,
	       temp_A_63_BIT_3_47_XOR_INV_temp_B_55_39_PLUS_1_ETC___d838,
	       temp_A_63_BIT_3_47_XOR_temp_B_55_BIT_3_48_50_X_ETC___d511;
  wire [1 : 0] fp_a_3_BIT_24_14_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d145,
	       temp_A_63_BIT_1_55_XOR_INV_temp_B_55_39_PLUS_1_ETC___d837,
	       temp_A_63_BIT_1_55_XOR_temp_B_55_BIT_1_56_58_X_ETC___d510;
  wire NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d55,
       NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d61,
       NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d67,
       fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d30,
       fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d27,
       fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d52,
       fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d930,
       fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34,
       init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d1280,
       init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d158,
       temp_sum_69_BIT_24_007_XOR_temp_sum_69_BIT_23_153___d1238,
       temp_sum_69_BIT_25_16_XOR_temp_sum_69_BIT_24_0_ETC___d1237,
       temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_16___d1114,
       temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_1_ETC___d1236,
       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_20___d1063,
       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1113,
       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1235,
       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1062,
       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1112,
       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1234,
       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1061,
       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1111,
       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1233,
       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1060,
       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1110,
       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1232,
       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1059,
       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1109,
       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1231,
       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1058,
       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1108,
       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1230,
       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1057,
       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1107,
       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1229,
       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1056,
       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1106,
       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1228,
       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1055,
       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1105,
       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1227,
       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1054,
       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1104,
       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1226,
       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1053,
       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1103,
       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1225,
       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1052,
       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1102,
       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1224,
       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1051,
       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1101,
       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1223,
       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1050,
       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1100,
       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1222,
       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1049,
       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1099,
       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1221,
       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1048,
       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1098,
       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1220,
       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1047,
       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1097,
       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1219,
       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1046,
       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1096,
       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1218,
       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1045,
       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1095,
       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1217,
       temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1044,
       temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1094,
       temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1043,
       temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1093,
       temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1183,
       temp_sum_69_BIT_48_70_XOR_temp_sum_69_BIT_47_4_ETC___d1042,
       temp_sum_69_BIT_49_15_AND_temp_sum_69_BIT_48_7_ETC___d984,
       temp_sum_69_BIT_49_15_XOR_temp_sum_69_BIT_48_7_ETC___d1036,
       v_sign__h70774,
       x__h10048,
       x__h10095,
       x__h10240,
       x__h10287,
       x__h10432,
       x__h10479,
       x__h10624,
       x__h10671,
       x__h10816,
       x__h10863,
       x__h11008,
       x__h11055,
       x__h11200,
       x__h11247,
       x__h11392,
       x__h11439,
       x__h11584,
       x__h11631,
       x__h11776,
       x__h11823,
       x__h11968,
       x__h12015,
       x__h12160,
       x__h12207,
       x__h12352,
       x__h12399,
       x__h12544,
       x__h12591,
       x__h12736,
       x__h12783,
       x__h12928,
       x__h12975,
       x__h13120,
       x__h13167,
       x__h13312,
       x__h13359,
       x__h13504,
       x__h13551,
       x__h13696,
       x__h13743,
       x__h13888,
       x__h13935,
       x__h14080,
       x__h14127,
       x__h14272,
       x__h14319,
       x__h14464,
       x__h14511,
       x__h14656,
       x__h14703,
       x__h14848,
       x__h14895,
       x__h15040,
       x__h15087,
       x__h15232,
       x__h15279,
       x__h15424,
       x__h15471,
       x__h15616,
       x__h15663,
       x__h15808,
       x__h15855,
       x__h16000,
       x__h16047,
       x__h16192,
       x__h16239,
       x__h16325,
       x__h16384,
       x__h16431,
       x__h17851,
       x__h17980,
       x__h18039,
       x__h18172,
       x__h18231,
       x__h18364,
       x__h18423,
       x__h18556,
       x__h18615,
       x__h18748,
       x__h18807,
       x__h18940,
       x__h18999,
       x__h19132,
       x__h19191,
       x__h19324,
       x__h19383,
       x__h19516,
       x__h19575,
       x__h19708,
       x__h19767,
       x__h19900,
       x__h19959,
       x__h20092,
       x__h20151,
       x__h20284,
       x__h20343,
       x__h20476,
       x__h20535,
       x__h20668,
       x__h20727,
       x__h20860,
       x__h20919,
       x__h21052,
       x__h21111,
       x__h21244,
       x__h21303,
       x__h21436,
       x__h21495,
       x__h21628,
       x__h21687,
       x__h21820,
       x__h21879,
       x__h22012,
       x__h22071,
       x__h22204,
       x__h22263,
       x__h22396,
       x__h22455,
       x__h22588,
       x__h22647,
       x__h22780,
       x__h22839,
       x__h22972,
       x__h23031,
       x__h23164,
       x__h23223,
       x__h23356,
       x__h23415,
       x__h23548,
       x__h23607,
       x__h23740,
       x__h23799,
       x__h23932,
       x__h23991,
       x__h24124,
       x__h24183,
       x__h24316,
       x__h24375,
       x__h24508,
       x__h24567,
       x__h24700,
       x__h24759,
       x__h24892,
       x__h24951,
       x__h25084,
       x__h25143,
       x__h25276,
       x__h25335,
       x__h25468,
       x__h25527,
       x__h25660,
       x__h25719,
       x__h25852,
       x__h25911,
       x__h26044,
       x__h26103,
       x__h26236,
       x__h26295,
       x__h26428,
       x__h26487,
       x__h26620,
       x__h26679,
       x__h26812,
       x__h26871,
       x__h27004,
       x__h27063,
       x__h27603,
       x__h27730,
       x__h27918,
       x__h28106,
       x__h28294,
       x__h28482,
       x__h28670,
       x__h42077,
       x__h42203,
       x__h42389,
       x__h42575,
       x__h42761,
       x__h42947,
       x__h4344,
       x__h4471,
       x__h4528,
       x__h4657,
       x__h4714,
       x__h4843,
       x__h4900,
       x__h5029,
       x__h5086,
       x__h5215,
       x__h5272,
       x__h5401,
       x__h5458,
       x__h7360,
       x__h7407,
       x__h7552,
       x__h7599,
       x__h7744,
       x__h7791,
       x__h7936,
       x__h7983,
       x__h8128,
       x__h8175,
       x__h8320,
       x__h8367,
       x__h8512,
       x__h8559,
       x__h8704,
       x__h8751,
       x__h8896,
       x__h8943,
       x__h9088,
       x__h9135,
       x__h9280,
       x__h9327,
       x__h9472,
       x__h9519,
       x__h9664,
       x__h9711,
       x__h9856,
       x__h9903,
       y__h10049,
       y__h10182,
       y__h10241,
       y__h10374,
       y__h10433,
       y__h10566,
       y__h10625,
       y__h10758,
       y__h10817,
       y__h10950,
       y__h11009,
       y__h11142,
       y__h11201,
       y__h11334,
       y__h11393,
       y__h11526,
       y__h11585,
       y__h11718,
       y__h11777,
       y__h11910,
       y__h11969,
       y__h12102,
       y__h12161,
       y__h12294,
       y__h12353,
       y__h12486,
       y__h12545,
       y__h12678,
       y__h12737,
       y__h12870,
       y__h12929,
       y__h13062,
       y__h13121,
       y__h13254,
       y__h13313,
       y__h13446,
       y__h13505,
       y__h13638,
       y__h13697,
       y__h13830,
       y__h13889,
       y__h14022,
       y__h14081,
       y__h14214,
       y__h14273,
       y__h14406,
       y__h14465,
       y__h14598,
       y__h14657,
       y__h14790,
       y__h14849,
       y__h14982,
       y__h15041,
       y__h15174,
       y__h15233,
       y__h15366,
       y__h15425,
       y__h15558,
       y__h15617,
       y__h15750,
       y__h15809,
       y__h15942,
       y__h16001,
       y__h16134,
       y__h16193,
       y__h16326,
       y__h16385,
       y__h17852,
       y__h17981,
       y__h18040,
       y__h18173,
       y__h18232,
       y__h18365,
       y__h18424,
       y__h18557,
       y__h18616,
       y__h18749,
       y__h18808,
       y__h18941,
       y__h19000,
       y__h19133,
       y__h19192,
       y__h19325,
       y__h19384,
       y__h19517,
       y__h19576,
       y__h19709,
       y__h19768,
       y__h19901,
       y__h19960,
       y__h20093,
       y__h20152,
       y__h20285,
       y__h20344,
       y__h20477,
       y__h20536,
       y__h20669,
       y__h20728,
       y__h20861,
       y__h20920,
       y__h21053,
       y__h21112,
       y__h21245,
       y__h21304,
       y__h21437,
       y__h21496,
       y__h21629,
       y__h21688,
       y__h21821,
       y__h21880,
       y__h22013,
       y__h22072,
       y__h22205,
       y__h22264,
       y__h22397,
       y__h22456,
       y__h22589,
       y__h22648,
       y__h22781,
       y__h22840,
       y__h22973,
       y__h23032,
       y__h23165,
       y__h23224,
       y__h23357,
       y__h23416,
       y__h23549,
       y__h23608,
       y__h23741,
       y__h23800,
       y__h23933,
       y__h23992,
       y__h24125,
       y__h24184,
       y__h24317,
       y__h24376,
       y__h24509,
       y__h24568,
       y__h24701,
       y__h24760,
       y__h24893,
       y__h24952,
       y__h25085,
       y__h25144,
       y__h25277,
       y__h25336,
       y__h25469,
       y__h25528,
       y__h25661,
       y__h25720,
       y__h25853,
       y__h25912,
       y__h26045,
       y__h26104,
       y__h26237,
       y__h26296,
       y__h26429,
       y__h26488,
       y__h26621,
       y__h26680,
       y__h26813,
       y__h26872,
       y__h27005,
       y__h27064,
       y__h27731,
       y__h27789,
       y__h27919,
       y__h27977,
       y__h28107,
       y__h28165,
       y__h28295,
       y__h28353,
       y__h28483,
       y__h28541,
       y__h28671,
       y__h28729,
       y__h30688,
       y__h30874,
       y__h31060,
       y__h31246,
       y__h31432,
       y__h31618,
       y__h31804,
       y__h3187,
       y__h31990,
       y__h32176,
       y__h32362,
       y__h32548,
       y__h32734,
       y__h32920,
       y__h33106,
       y__h33292,
       y__h33478,
       y__h33664,
       y__h3376,
       y__h33850,
       y__h34036,
       y__h34222,
       y__h34408,
       y__h34594,
       y__h3565,
       y__h3754,
       y__h3943,
       y__h40707,
       y__h40893,
       y__h41079,
       y__h41265,
       y__h4132,
       y__h41451,
       y__h41637,
       y__h42204,
       y__h42390,
       y__h42576,
       y__h42762,
       y__h42948,
       y__h43134,
       y__h4345,
       y__h4347,
       y__h4472,
       y__h4474,
       y__h4529,
       y__h4658,
       y__h4660,
       y__h4715,
       y__h4844,
       y__h4846,
       y__h4901,
       y__h5030,
       y__h5032,
       y__h5087,
       y__h5216,
       y__h52179,
       y__h5218,
       y__h52365,
       y__h52551,
       y__h5273,
       y__h52737,
       y__h52923,
       y__h53109,
       y__h53295,
       y__h53481,
       y__h53667,
       y__h53853,
       y__h5402,
       y__h54039,
       y__h5404,
       y__h54225,
       y__h54411,
       y__h5459,
       y__h54597,
       y__h54783,
       y__h54969,
       y__h55155,
       y__h55341,
       y__h55527,
       y__h55713,
       y__h55899,
       y__h56085,
       y__h56271,
       y__h57458,
       y__h57644,
       y__h57830,
       y__h58016,
       y__h58202,
       y__h58388,
       y__h58574,
       y__h58760,
       y__h58946,
       y__h59132,
       y__h59318,
       y__h59504,
       y__h59690,
       y__h59876,
       y__h60062,
       y__h60248,
       y__h60434,
       y__h60620,
       y__h60806,
       y__h60992,
       y__h61178,
       y__h61364,
       y__h61550,
       y__h62205,
       y__h62394,
       y__h62583,
       y__h62772,
       y__h62961,
       y__h63150,
       y__h7302,
       y__h7361,
       y__h7408,
       y__h7494,
       y__h7553,
       y__h7686,
       y__h7745,
       y__h7878,
       y__h7937,
       y__h8070,
       y__h8129,
       y__h8262,
       y__h8321,
       y__h8454,
       y__h8513,
       y__h8646,
       y__h8705,
       y__h8838,
       y__h8897,
       y__h9030,
       y__h9089,
       y__h9222,
       y__h9281,
       y__h9414,
       y__h9473,
       y__h9606,
       y__h9665,
       y__h9798,
       y__h9857,
       y__h9990;

  // action method get_A
  assign RDY_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !inpB_fifo_rv_port1__read[32] ;
  assign CAN_FIRE_get_B = !inpB_fifo_rv_port1__read[32] ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // actionvalue method out_AaddB
  assign out_AaddB = out_fifo_rv[31:0] ;
  assign RDY_out_AaddB = out_fifo_rv[32] && assembled_answer ;
  assign CAN_FIRE_out_AaddB = out_fifo_rv[32] && assembled_answer ;
  assign WILL_FIRE_out_AaddB = EN_out_AaddB ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     init_done && !operands_swapped_if_needed && !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;
  assign WILL_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     init_done && operands_swapped_if_needed && expdiff_calculated &&
	     round_addition_result &&
	     !round_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_round_sub
  assign CAN_FIRE_RL_round_sub =
	     init_done && operands_swapped_if_needed && expdiff_calculated &&
	     round_subtraction_result &&
	     !round_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_round_sub =
	     CAN_FIRE_RL_round_sub && !WILL_FIRE_RL_round_add ;

  // rule RL_adjust_subres
  assign CAN_FIRE_RL_adjust_subres =
	     init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d158 &&
	     adj_sub &&
	     !adj_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_adjust_subres = CAN_FIRE_RL_adjust_subres ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d158 &&
	     do_add &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_sub
  assign CAN_FIRE_RL_sub =
	     init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d158 &&
	     do_sub &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_sub = CAN_FIRE_RL_sub ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     !out_fifo_rv_port1__read[32] &&
	     init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d1280 ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;
  assign WILL_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;

  // rule RL_handle_zero_case
  assign CAN_FIRE_RL_handle_zero_case = MUX_handle_zero_write_1__SEL_2 ;
  assign WILL_FIRE_RL_handle_zero_case = MUX_handle_zero_write_1__SEL_2 ;

  // rule RL_handle_oneinpzero_case
  assign CAN_FIRE_RL_handle_oneinpzero_case =
	     MUX_out_fifo_rv_port1__write_1__SEL_2 ;
  assign WILL_FIRE_RL_handle_oneinpzero_case =
	     MUX_out_fifo_rv_port1__write_1__SEL_2 ;

  // rule RL_init
  assign CAN_FIRE_RL_init =
	     inpA_fifo_rv[16] && inpB_fifo_rv[32] && !init_done ;
  assign WILL_FIRE_RL_init = CAN_FIRE_RL_init ;

  // rule RL_deassert_assembled_answer
  assign CAN_FIRE_RL_deassert_assembled_answer = assembled_answer ;
  assign WILL_FIRE_RL_deassert_assembled_answer =
	     assembled_answer && !WILL_FIRE_RL_handle_oneinpzero_case &&
	     !WILL_FIRE_RL_handle_zero_case ;

  // inputs to muxes for submodule ports
  assign MUX_do_add_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34 ;
  assign MUX_do_sub_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34 ;
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d67 ;
  assign MUX_fp_a_write_1__SEL_2 =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ;
  assign MUX_fp_b_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d55 ;
  assign MUX_handle_zero_write_1__SEL_2 =
	     !out_fifo_rv_port1__read[32] && handle_zero &&
	     !handle_oneinpzero ;
  assign MUX_out_fifo_rv_port1__write_1__SEL_2 =
	     !out_fifo_rv_port1__read[32] && handle_oneinpzero ;
  assign MUX_temp_B_write_1__SEL_1 =
	     init_done && operands_swapped_if_needed && expdiff_calculated &&
	     !add_prep_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign MUX_temp_B_write_1__SEL_2 =
	     init_done && operands_swapped_if_needed && !expdiff_calculated &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_2 =
	     { x__h61801,
	       IF_temp_sum_69_BIT_48_70_THEN_IF_NOT_temp_sum__ETC___d1266[22:1],
	       IF_IF_temp_sum_69_BIT_48_70_THEN_IF_NOT_temp_s_ETC__q12[0] } ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_3 =
	     { x__h40310,
	       IF_temp_sum_69_BIT_49_15_THEN_IF_NOT_temp_sum__ETC___d1142[22:1],
	       IF_IF_temp_sum_69_BIT_49_15_THEN_IF_NOT_temp_s_ETC__q13[0] } ;
  assign MUX_fp_a_write_1__VAL_2 =
	     { fp_a[31], x_exponent__h27338, fp_a[22:0] } ;
  assign MUX_fp_a_write_1__VAL_3 = { inpA_fifo_rv[15:0], 16'b0 } ;
  assign MUX_fp_b_write_1__VAL_1 =
	     (fp_a[30:23] == 8'd0 && fp_a[22:0] == 23'd0 ||
	      fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0) ?
	       { 1'd0, fp_b[30:0] } :
	       fp_a ;
  assign MUX_out_fifo_rv_port1__write_1__VAL_1 =
	     { 1'd1, sign_c, add_res_with_adj_exp } ;
  assign MUX_out_fifo_rv_port1__write_1__VAL_2 =
	     { 1'd1,
	       v_sign__h70774,
	       v_exponent__h70775,
	       v_fraction__h70776 } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_2 =
	     { x__h27004 ^ y__h27005,
	       x__h26812 ^ y__h26813,
	       temp_A_63_BIT_47_71_XOR_INV_temp_B_55_39_PLUS__ETC___d860 } ;
  assign MUX_temp_sum_write_1__VAL_3 =
	     { x__h16325 ^ y__h16326,
	       x__h16431 ^ y__h16134,
	       temp_A_63_BIT_47_71_XOR_temp_B_55_BIT_47_72_74_ETC___d533 } ;
  assign MUX_temp_sum_write_1__VAL_4 = { temp_sum[48:0], 1'd0 } ;

  // inlined wires
  assign inpA_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[32] && !init_done ;
  assign inpA_fifo_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpA_fifo_rv_port1__read =
	     inpA_fifo_rv_EN_port0__write ?
	       inpA_fifo_rv_port0__write_1 :
	       inpA_fifo_rv ;
  assign inpA_fifo_rv_port1__write_1 = { 1'd1, get_A_a } ;
  assign inpA_fifo_rv_port2__read =
	     EN_get_A ?
	       inpA_fifo_rv_port1__write_1 :
	       inpA_fifo_rv_port1__read ;
  assign inpB_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[32] && !init_done ;
  assign inpB_fifo_rv_port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpB_fifo_rv_port1__read =
	     inpB_fifo_rv_EN_port0__write ?
	       inpB_fifo_rv_port0__write_1 :
	       inpB_fifo_rv ;
  assign inpB_fifo_rv_port1__write_1 = { 1'd1, get_B_b } ;
  assign inpB_fifo_rv_port2__read =
	     EN_get_B ?
	       inpB_fifo_rv_port1__write_1 :
	       inpB_fifo_rv_port1__read ;
  assign out_fifo_rv_port1__read =
	     EN_out_AaddB ? inpB_fifo_rv_port0__write_1 : out_fifo_rv ;
  assign out_fifo_rv_EN_port1__write =
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_handle_oneinpzero_case ||
	     WILL_FIRE_RL_handle_zero_case ;
  always@(WILL_FIRE_RL_assemble_answer or
	  MUX_out_fifo_rv_port1__write_1__VAL_1 or
	  WILL_FIRE_RL_handle_oneinpzero_case or
	  MUX_out_fifo_rv_port1__write_1__VAL_2 or
	  WILL_FIRE_RL_handle_zero_case)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_assemble_answer:
	  out_fifo_rv_port1__write_1 = MUX_out_fifo_rv_port1__write_1__VAL_1;
      WILL_FIRE_RL_handle_oneinpzero_case:
	  out_fifo_rv_port1__write_1 = MUX_out_fifo_rv_port1__write_1__VAL_2;
      WILL_FIRE_RL_handle_zero_case:
	  out_fifo_rv_port1__write_1 = 33'h100000000;
      default: out_fifo_rv_port1__write_1 =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign out_fifo_rv_port2__read =
	     out_fifo_rv_EN_port1__write ?
	       out_fifo_rv_port1__write_1 :
	       out_fifo_rv_port1__read ;

  // register add_done
  assign add_done_D_IN = 1'd0 ;
  assign add_done_EN = WILL_FIRE_RL_deassert_assembled_answer ;

  // register add_prep_done
  assign add_prep_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign add_prep_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_round_sub or
	  MUX_add_res_with_adj_exp_write_1__VAL_2 or
	  WILL_FIRE_RL_round_add or MUX_add_res_with_adj_exp_write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: add_res_with_adj_exp_D_IN = 31'd0;
    WILL_FIRE_RL_round_sub:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_2;
    WILL_FIRE_RL_round_add:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_3;
    default: add_res_with_adj_exp_D_IN =
		 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_done
  assign adj_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_done_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_sub
  assign adj_sub_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_sub_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_sub ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_handle_oneinpzero_case ||
	     WILL_FIRE_RL_handle_zero_case ||
	     WILL_FIRE_RL_assemble_answer ;

  // register do_add
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_add_write_1__SEL_2 or WILL_FIRE_RL_add)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_add_D_IN = 1'd0;
    MUX_do_add_write_1__SEL_2: do_add_D_IN = 1'd1;
    WILL_FIRE_RL_add: do_add_D_IN = 1'd0;
    default: do_add_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_add_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34 ||
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_add ;

  // register do_sub
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_sub_write_1__SEL_2 or WILL_FIRE_RL_sub)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_sub_D_IN = 1'd0;
    MUX_do_sub_write_1__SEL_2: do_sub_D_IN = 1'd1;
    WILL_FIRE_RL_sub: do_sub_D_IN = 1'd0;
    default: do_sub_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_sub_EN =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34 ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h5401 ^ y__h5402,
	       x__h5215 ^ y__h5216,
	       fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d147 } ;
  assign expdiff_EN = MUX_temp_B_write_1__SEL_2 ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign expdiff_calculated_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  always@(MUX_fp_a_write_1__SEL_1 or
	  fp_b or
	  MUX_fp_a_write_1__SEL_2 or
	  MUX_fp_a_write_1__VAL_2 or
	  WILL_FIRE_RL_init or MUX_fp_a_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fp_a_write_1__SEL_1: fp_a_D_IN = fp_b;
      MUX_fp_a_write_1__SEL_2: fp_a_D_IN = MUX_fp_a_write_1__VAL_2;
      WILL_FIRE_RL_init: fp_a_D_IN = MUX_fp_a_write_1__VAL_3;
      default: fp_a_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d67 ||
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_init ;

  // register fp_b
  assign fp_b_D_IN =
	     MUX_fp_b_write_1__SEL_1 ?
	       MUX_fp_b_write_1__VAL_1 :
	       inpB_fifo_rv[31:0] ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d55 ||
	     WILL_FIRE_RL_init ;

  // register handle_oneinpzero
  assign handle_oneinpzero_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer &&
	     !WILL_FIRE_RL_handle_oneinpzero_case ;
  assign handle_oneinpzero_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d61 ||
	     WILL_FIRE_RL_handle_oneinpzero_case ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register handle_zero
  assign handle_zero_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer &&
	     !WILL_FIRE_RL_handle_zero_case ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d27 &&
	     fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d30 &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34 ||
	     WILL_FIRE_RL_handle_zero_case ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register init_done
  assign init_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign init_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_init ;

  // register inpA_fifo_rv
  assign inpA_fifo_rv_D_IN = inpA_fifo_rv_port2__read ;
  assign inpA_fifo_rv_EN = 1'b1 ;

  // register inpB_fifo_rv
  assign inpB_fifo_rv_D_IN = inpB_fifo_rv_port2__read ;
  assign inpB_fifo_rv_EN = 1'b1 ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign operands_swapped_if_needed_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_swap_operands_if_needed ;

  // register out_fifo_rv
  assign out_fifo_rv_D_IN = out_fifo_rv_port2__read ;
  assign out_fifo_rv_EN = 1'b1 ;

  // register round_addition_result
  assign round_addition_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_addition_result_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_subtraction_result_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = MUX_temp_B_write_1__SEL_1 ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = MUX_temp_B_write_1__SEL_2 ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_add_prep ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN = WILL_FIRE_RL_add_prep || WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_sub or
	  MUX_temp_sum_write_1__VAL_2 or
	  WILL_FIRE_RL_add or
	  MUX_temp_sum_write_1__VAL_3 or
	  MUX_fp_a_write_1__SEL_2 or MUX_temp_sum_write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: temp_sum_D_IN = 50'd0;
    WILL_FIRE_RL_sub: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_2;
    WILL_FIRE_RL_add: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_3;
    MUX_fp_a_write_1__SEL_2: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_4;
    default: temp_sum_D_IN =
		 50'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign temp_sum_EN =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_add ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_69_BIT_48_70_THEN_IF_NOT_temp_s_ETC__q12 =
	     IF_temp_sum_69_BIT_48_70_THEN_IF_NOT_temp_sum__ETC___d1266[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_IF_temp_sum_69_BIT_49_15_THEN_IF_NOT_temp_s_ETC__q13 =
	     IF_temp_sum_69_BIT_49_15_THEN_IF_NOT_temp_sum__ETC___d1142[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_exp___11216_BIT_0_THEN_1_ELSE_0__q7 =
	     (~exp___1__h51216[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5 =
	     (~temp_sum[23]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_NOT_temp_sum_69_BIT_23_153_154_OR_temp_sum__ETC___d1265 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       temp_sum[46:24] :
	       (temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1183 ?
		  x__h56453 :
		  x__h56476) ;
  assign IF_NOT_temp_sum_69_BIT_24_007_008_OR_temp_sum__ETC___d1141 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_69_BIT_49_15_XOR_temp_sum_69_BIT_48_7_ETC___d1036 ?
		  x__h61732 :
		  x__h61755) ;
  assign IF_NOT_temp_sum_69_BIT_25_16_17_OR_temp_sum_69_ETC___d1090 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_69_BIT_49_15_AND_temp_sum_69_BIT_48_7_ETC___d984 ?
		  x__h34962 :
		  x__h34985) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_A_BIT_0_XOR_INV_temp_B_55_39_PLUS_1_40_ETC__q11 =
	     (temp_A[0] ^ INV_temp_B_55_39_PLUS_1___d540[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10 =
	     (temp_A[0] ^ temp_B[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_sum_69_BIT_48_70_THEN_IF_NOT_temp_sum__ETC___d1266 =
	     temp_sum[48] ?
	       IF_NOT_temp_sum_69_BIT_24_007_008_OR_temp_sum__ETC___d1141 :
	       IF_NOT_temp_sum_69_BIT_23_153_154_OR_temp_sum__ETC___d1265 ;
  assign IF_temp_sum_69_BIT_49_15_THEN_IF_NOT_temp_sum__ETC___d1142 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_69_BIT_25_16_17_OR_temp_sum_69_ETC___d1090 :
	       IF_NOT_temp_sum_69_BIT_24_007_008_OR_temp_sum__ETC___d1141 ;
  assign INV_fp_a_3_BIT_26_06_76_XOR_fp_a_3_BIT_25_10_O_ETC___d902 =
	     { x__h27918 ^ y__h27919,
	       x__h27730 ^ y__h27731,
	       x__h27603 ^ fp_a[23],
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign INV_fp_a_3_BIT_28_8_74_XOR_fp_a_3_BIT_27_02_OR_ETC___d903 =
	     { x__h28294 ^ y__h28295,
	       x__h28106 ^ y__h28107,
	       INV_fp_a_3_BIT_26_06_76_XOR_fp_a_3_BIT_25_10_O_ETC___d902 } ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign INV_temp_B_55_39_PLUS_1___d540 = ~temp_B + 50'd1 ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d55 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d27 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d30 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34) &&
	     (fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0 ||
	      (fp_a[30:23] != 8'd0 || fp_a[22:0] != 23'd0) &&
	      fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d52) ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d61 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d27 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d30 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34) &&
	     (fp_a[30:23] == 8'd0 && fp_a[22:0] == 23'd0 ||
	      fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0) ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d67 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d27 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d30 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34) &&
	     (fp_a[30:23] != 8'd0 || fp_a[22:0] != 23'd0) &&
	     (fp_b[30:23] != 8'd0 || fp_b[22:0] != 23'd0) &&
	     fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d52 ;
  assign _theResult___snd__h40238 =
	     { fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d930,
	       x__h42947,
	       x__h42761,
	       x__h42575,
	       x__h42389,
	       x__h42203,
	       x__h42077,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd__h56450 =
	     { exp___1__h51216[7] ^ y__h63150,
	       exp___1__h51216[6] ^ y__h62961,
	       fp_a_3_BITS_30_TO_23_4_MINUS_0b1_159_BIT_5_186_ETC___d1210 } ;
  assign _theResult___snd_fst__h40313 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h40238 :
	       (temp_sum_69_BIT_49_15_AND_temp_sum_69_BIT_48_7_ETC___d984 ?
		  fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d1004 :
		  _theResult___snd__h40238) ;
  assign _theResult___snd_fst__h43312 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h43320 ;
  assign _theResult___snd_fst__h43320 =
	     temp_sum_69_BIT_49_15_XOR_temp_sum_69_BIT_48_7_ETC___d1036 ?
	       _theResult___snd__h40238 :
	       fp_a[30:23] ;
  assign _theResult___snd_fst__h61804 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       exp___1__h51216 :
	       _theResult___snd_fst__h61812 ;
  assign _theResult___snd_fst__h61812 =
	     temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1183 ?
	       _theResult___snd__h56450 :
	       exp___1__h51216 ;
  assign exp___1__h51216 = fp_a[30:23] - 8'b00000001 ;
  assign fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d30 =
	     fp_a[22:0] == fp_b[22:0] ;
  assign fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d27 =
	     fp_a[30:23] == fp_b[30:23] ;
  assign fp_a_3_BITS_30_TO_23_4_MINUS_0b1_159_BIT_5_186_ETC___d1210 =
	     { exp___1__h51216[5] ^ y__h62772,
	       exp___1__h51216[4] ^ y__h62583,
	       exp___1__h51216[3] ^ y__h62394,
	       exp___1__h51216[2] ^ y__h62205,
	       exp___1__h51216[1] ^ exp___1__h51216[0],
	       IF_INV_exp___11216_BIT_0_THEN_1_ELSE_0__q7[0] } ;
  assign fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d52 =
	     fp_a[30:23] < fp_b[30:23] ||
	     fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d27 &&
	     fp_a[22:0] < fp_b[22:0] ;
  assign fp_a_3_BIT_24_14_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d145 =
	     { x__h4344 ^ y__h4345,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9[0] } ;
  assign fp_a_3_BIT_26_06_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d146 =
	     { x__h4657 ^ y__h4658,
	       x__h4471 ^ y__h4472,
	       fp_a_3_BIT_24_14_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d145 } ;
  assign fp_a_3_BIT_26_06_XOR_fp_a_3_BIT_25_10_AND_fp_a_ETC___d1002 =
	     { x__h42389 ^ y__h42390,
	       x__h42203 ^ y__h42204,
	       x__h42077 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8[0] } ;
  assign fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d147 =
	     { x__h5029 ^ y__h5030,
	       x__h4843 ^ y__h4844,
	       fp_a_3_BIT_26_06_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d146 } ;
  assign fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_02_AND_fp_a__ETC___d1003 =
	     { x__h42761 ^ y__h42762,
	       x__h42575 ^ y__h42576,
	       fp_a_3_BIT_26_06_XOR_fp_a_3_BIT_25_10_AND_fp_a_ETC___d1002 } ;
  assign fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d1004 =
	     { fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d930 ^
	       y__h43134,
	       x__h42947 ^ y__h42948,
	       fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_02_AND_fp_a__ETC___d1003 } ;
  assign fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d930 =
	     fp_a[30] ^ y__h41637 ;
  assign fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d34 = fp_a[31] == fp_b[31] ;
  assign init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d1280 =
	     init_done && operands_swapped_if_needed && expdiff_calculated &&
	     round_done &&
	     !assembled_answer &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign init_done_AND_operands_swapped_if_needed_4_8_A_ETC___d158 =
	     init_done && operands_swapped_if_needed && expdiff_calculated &&
	     add_prep_done ;
  assign temp_A_63_BIT_11_15_XOR_INV_temp_B_55_39_PLUS__ETC___d842 =
	     { x__h19708 ^ y__h19709,
	       x__h19516 ^ y__h19517,
	       temp_A_63_BIT_9_23_XOR_INV_temp_B_55_39_PLUS_1_ETC___d841 } ;
  assign temp_A_63_BIT_11_15_XOR_temp_B_55_BIT_11_16_18_ETC___d515 =
	     { x__h9327 ^ y__h9030,
	       x__h9135 ^ y__h8838,
	       temp_A_63_BIT_9_23_XOR_temp_B_55_BIT_9_24_26_X_ETC___d514 } ;
  assign temp_A_63_BIT_13_07_XOR_INV_temp_B_55_39_PLUS__ETC___d843 =
	     { x__h20092 ^ y__h20093,
	       x__h19900 ^ y__h19901,
	       temp_A_63_BIT_11_15_XOR_INV_temp_B_55_39_PLUS__ETC___d842 } ;
  assign temp_A_63_BIT_13_07_XOR_temp_B_55_BIT_13_08_10_ETC___d516 =
	     { x__h9711 ^ y__h9414,
	       x__h9519 ^ y__h9222,
	       temp_A_63_BIT_11_15_XOR_temp_B_55_BIT_11_16_18_ETC___d515 } ;
  assign temp_A_63_BIT_15_99_XOR_INV_temp_B_55_39_PLUS__ETC___d844 =
	     { x__h20476 ^ y__h20477,
	       x__h20284 ^ y__h20285,
	       temp_A_63_BIT_13_07_XOR_INV_temp_B_55_39_PLUS__ETC___d843 } ;
  assign temp_A_63_BIT_15_99_XOR_temp_B_55_BIT_15_00_02_ETC___d517 =
	     { x__h10095 ^ y__h9798,
	       x__h9903 ^ y__h9606,
	       temp_A_63_BIT_13_07_XOR_temp_B_55_BIT_13_08_10_ETC___d516 } ;
  assign temp_A_63_BIT_17_91_XOR_INV_temp_B_55_39_PLUS__ETC___d845 =
	     { x__h20860 ^ y__h20861,
	       x__h20668 ^ y__h20669,
	       temp_A_63_BIT_15_99_XOR_INV_temp_B_55_39_PLUS__ETC___d844 } ;
  assign temp_A_63_BIT_17_91_XOR_temp_B_55_BIT_17_92_94_ETC___d518 =
	     { x__h10479 ^ y__h10182,
	       x__h10287 ^ y__h9990,
	       temp_A_63_BIT_15_99_XOR_temp_B_55_BIT_15_00_02_ETC___d517 } ;
  assign temp_A_63_BIT_19_83_XOR_INV_temp_B_55_39_PLUS__ETC___d846 =
	     { x__h21244 ^ y__h21245,
	       x__h21052 ^ y__h21053,
	       temp_A_63_BIT_17_91_XOR_INV_temp_B_55_39_PLUS__ETC___d845 } ;
  assign temp_A_63_BIT_19_83_XOR_temp_B_55_BIT_19_84_86_ETC___d519 =
	     { x__h10863 ^ y__h10566,
	       x__h10671 ^ y__h10374,
	       temp_A_63_BIT_17_91_XOR_temp_B_55_BIT_17_92_94_ETC___d518 } ;
  assign temp_A_63_BIT_1_55_XOR_INV_temp_B_55_39_PLUS_1_ETC___d837 =
	     { x__h17851 ^ y__h17852,
	       IF_temp_A_BIT_0_XOR_INV_temp_B_55_39_PLUS_1_40_ETC__q11[0] } ;
  assign temp_A_63_BIT_1_55_XOR_temp_B_55_BIT_1_56_58_X_ETC___d510 =
	     { x__h7407 ^ y__h7408,
	       IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10[0] } ;
  assign temp_A_63_BIT_21_75_XOR_INV_temp_B_55_39_PLUS__ETC___d847 =
	     { x__h21628 ^ y__h21629,
	       x__h21436 ^ y__h21437,
	       temp_A_63_BIT_19_83_XOR_INV_temp_B_55_39_PLUS__ETC___d846 } ;
  assign temp_A_63_BIT_21_75_XOR_temp_B_55_BIT_21_76_78_ETC___d520 =
	     { x__h11247 ^ y__h10950,
	       x__h11055 ^ y__h10758,
	       temp_A_63_BIT_19_83_XOR_temp_B_55_BIT_19_84_86_ETC___d519 } ;
  assign temp_A_63_BIT_23_67_XOR_INV_temp_B_55_39_PLUS__ETC___d848 =
	     { x__h22012 ^ y__h22013,
	       x__h21820 ^ y__h21821,
	       temp_A_63_BIT_21_75_XOR_INV_temp_B_55_39_PLUS__ETC___d847 } ;
  assign temp_A_63_BIT_23_67_XOR_temp_B_55_BIT_23_68_70_ETC___d521 =
	     { x__h11631 ^ y__h11334,
	       x__h11439 ^ y__h11142,
	       temp_A_63_BIT_21_75_XOR_temp_B_55_BIT_21_76_78_ETC___d520 } ;
  assign temp_A_63_BIT_25_59_XOR_INV_temp_B_55_39_PLUS__ETC___d849 =
	     { x__h22396 ^ y__h22397,
	       x__h22204 ^ y__h22205,
	       temp_A_63_BIT_23_67_XOR_INV_temp_B_55_39_PLUS__ETC___d848 } ;
  assign temp_A_63_BIT_25_59_XOR_temp_B_55_BIT_25_60_62_ETC___d522 =
	     { x__h12015 ^ y__h11718,
	       x__h11823 ^ y__h11526,
	       temp_A_63_BIT_23_67_XOR_temp_B_55_BIT_23_68_70_ETC___d521 } ;
  assign temp_A_63_BIT_27_51_XOR_INV_temp_B_55_39_PLUS__ETC___d850 =
	     { x__h22780 ^ y__h22781,
	       x__h22588 ^ y__h22589,
	       temp_A_63_BIT_25_59_XOR_INV_temp_B_55_39_PLUS__ETC___d849 } ;
  assign temp_A_63_BIT_27_51_XOR_temp_B_55_BIT_27_52_54_ETC___d523 =
	     { x__h12399 ^ y__h12102,
	       x__h12207 ^ y__h11910,
	       temp_A_63_BIT_25_59_XOR_temp_B_55_BIT_25_60_62_ETC___d522 } ;
  assign temp_A_63_BIT_29_43_XOR_INV_temp_B_55_39_PLUS__ETC___d851 =
	     { x__h23164 ^ y__h23165,
	       x__h22972 ^ y__h22973,
	       temp_A_63_BIT_27_51_XOR_INV_temp_B_55_39_PLUS__ETC___d850 } ;
  assign temp_A_63_BIT_29_43_XOR_temp_B_55_BIT_29_44_46_ETC___d524 =
	     { x__h12783 ^ y__h12486,
	       x__h12591 ^ y__h12294,
	       temp_A_63_BIT_27_51_XOR_temp_B_55_BIT_27_52_54_ETC___d523 } ;
  assign temp_A_63_BIT_31_35_XOR_INV_temp_B_55_39_PLUS__ETC___d852 =
	     { x__h23548 ^ y__h23549,
	       x__h23356 ^ y__h23357,
	       temp_A_63_BIT_29_43_XOR_INV_temp_B_55_39_PLUS__ETC___d851 } ;
  assign temp_A_63_BIT_31_35_XOR_temp_B_55_BIT_31_36_38_ETC___d525 =
	     { x__h13167 ^ y__h12870,
	       x__h12975 ^ y__h12678,
	       temp_A_63_BIT_29_43_XOR_temp_B_55_BIT_29_44_46_ETC___d524 } ;
  assign temp_A_63_BIT_33_27_XOR_INV_temp_B_55_39_PLUS__ETC___d853 =
	     { x__h23932 ^ y__h23933,
	       x__h23740 ^ y__h23741,
	       temp_A_63_BIT_31_35_XOR_INV_temp_B_55_39_PLUS__ETC___d852 } ;
  assign temp_A_63_BIT_33_27_XOR_temp_B_55_BIT_33_28_30_ETC___d526 =
	     { x__h13551 ^ y__h13254,
	       x__h13359 ^ y__h13062,
	       temp_A_63_BIT_31_35_XOR_temp_B_55_BIT_31_36_38_ETC___d525 } ;
  assign temp_A_63_BIT_35_19_XOR_INV_temp_B_55_39_PLUS__ETC___d854 =
	     { x__h24316 ^ y__h24317,
	       x__h24124 ^ y__h24125,
	       temp_A_63_BIT_33_27_XOR_INV_temp_B_55_39_PLUS__ETC___d853 } ;
  assign temp_A_63_BIT_35_19_XOR_temp_B_55_BIT_35_20_22_ETC___d527 =
	     { x__h13935 ^ y__h13638,
	       x__h13743 ^ y__h13446,
	       temp_A_63_BIT_33_27_XOR_temp_B_55_BIT_33_28_30_ETC___d526 } ;
  assign temp_A_63_BIT_37_11_XOR_INV_temp_B_55_39_PLUS__ETC___d855 =
	     { x__h24700 ^ y__h24701,
	       x__h24508 ^ y__h24509,
	       temp_A_63_BIT_35_19_XOR_INV_temp_B_55_39_PLUS__ETC___d854 } ;
  assign temp_A_63_BIT_37_11_XOR_temp_B_55_BIT_37_12_14_ETC___d528 =
	     { x__h14319 ^ y__h14022,
	       x__h14127 ^ y__h13830,
	       temp_A_63_BIT_35_19_XOR_temp_B_55_BIT_35_20_22_ETC___d527 } ;
  assign temp_A_63_BIT_39_03_XOR_INV_temp_B_55_39_PLUS__ETC___d856 =
	     { x__h25084 ^ y__h25085,
	       x__h24892 ^ y__h24893,
	       temp_A_63_BIT_37_11_XOR_INV_temp_B_55_39_PLUS__ETC___d855 } ;
  assign temp_A_63_BIT_39_03_XOR_temp_B_55_BIT_39_04_06_ETC___d529 =
	     { x__h14703 ^ y__h14406,
	       x__h14511 ^ y__h14214,
	       temp_A_63_BIT_37_11_XOR_temp_B_55_BIT_37_12_14_ETC___d528 } ;
  assign temp_A_63_BIT_3_47_XOR_INV_temp_B_55_39_PLUS_1_ETC___d838 =
	     { x__h18172 ^ y__h18173,
	       x__h17980 ^ y__h17981,
	       temp_A_63_BIT_1_55_XOR_INV_temp_B_55_39_PLUS_1_ETC___d837 } ;
  assign temp_A_63_BIT_3_47_XOR_temp_B_55_BIT_3_48_50_X_ETC___d511 =
	     { x__h7791 ^ y__h7494,
	       x__h7599 ^ y__h7302,
	       temp_A_63_BIT_1_55_XOR_temp_B_55_BIT_1_56_58_X_ETC___d510 } ;
  assign temp_A_63_BIT_41_95_XOR_INV_temp_B_55_39_PLUS__ETC___d857 =
	     { x__h25468 ^ y__h25469,
	       x__h25276 ^ y__h25277,
	       temp_A_63_BIT_39_03_XOR_INV_temp_B_55_39_PLUS__ETC___d856 } ;
  assign temp_A_63_BIT_41_95_XOR_temp_B_55_BIT_41_96_98_ETC___d530 =
	     { x__h15087 ^ y__h14790,
	       x__h14895 ^ y__h14598,
	       temp_A_63_BIT_39_03_XOR_temp_B_55_BIT_39_04_06_ETC___d529 } ;
  assign temp_A_63_BIT_43_87_XOR_INV_temp_B_55_39_PLUS__ETC___d858 =
	     { x__h25852 ^ y__h25853,
	       x__h25660 ^ y__h25661,
	       temp_A_63_BIT_41_95_XOR_INV_temp_B_55_39_PLUS__ETC___d857 } ;
  assign temp_A_63_BIT_43_87_XOR_temp_B_55_BIT_43_88_90_ETC___d531 =
	     { x__h15471 ^ y__h15174,
	       x__h15279 ^ y__h14982,
	       temp_A_63_BIT_41_95_XOR_temp_B_55_BIT_41_96_98_ETC___d530 } ;
  assign temp_A_63_BIT_45_79_XOR_INV_temp_B_55_39_PLUS__ETC___d859 =
	     { x__h26236 ^ y__h26237,
	       x__h26044 ^ y__h26045,
	       temp_A_63_BIT_43_87_XOR_INV_temp_B_55_39_PLUS__ETC___d858 } ;
  assign temp_A_63_BIT_45_79_XOR_temp_B_55_BIT_45_80_82_ETC___d532 =
	     { x__h15855 ^ y__h15558,
	       x__h15663 ^ y__h15366,
	       temp_A_63_BIT_43_87_XOR_temp_B_55_BIT_43_88_90_ETC___d531 } ;
  assign temp_A_63_BIT_47_71_XOR_INV_temp_B_55_39_PLUS__ETC___d860 =
	     { x__h26620 ^ y__h26621,
	       x__h26428 ^ y__h26429,
	       temp_A_63_BIT_45_79_XOR_INV_temp_B_55_39_PLUS__ETC___d859 } ;
  assign temp_A_63_BIT_47_71_XOR_temp_B_55_BIT_47_72_74_ETC___d533 =
	     { x__h16239 ^ y__h15942,
	       x__h16047 ^ y__h15750,
	       temp_A_63_BIT_45_79_XOR_temp_B_55_BIT_45_80_82_ETC___d532 } ;
  assign temp_A_63_BIT_5_39_XOR_INV_temp_B_55_39_PLUS_1_ETC___d839 =
	     { x__h18556 ^ y__h18557,
	       x__h18364 ^ y__h18365,
	       temp_A_63_BIT_3_47_XOR_INV_temp_B_55_39_PLUS_1_ETC___d838 } ;
  assign temp_A_63_BIT_5_39_XOR_temp_B_55_BIT_5_40_42_X_ETC___d512 =
	     { x__h8175 ^ y__h7878,
	       x__h7983 ^ y__h7686,
	       temp_A_63_BIT_3_47_XOR_temp_B_55_BIT_3_48_50_X_ETC___d511 } ;
  assign temp_A_63_BIT_7_31_XOR_INV_temp_B_55_39_PLUS_1_ETC___d840 =
	     { x__h18940 ^ y__h18941,
	       x__h18748 ^ y__h18749,
	       temp_A_63_BIT_5_39_XOR_INV_temp_B_55_39_PLUS_1_ETC___d839 } ;
  assign temp_A_63_BIT_7_31_XOR_temp_B_55_BIT_7_32_34_X_ETC___d513 =
	     { x__h8559 ^ y__h8262,
	       x__h8367 ^ y__h8070,
	       temp_A_63_BIT_5_39_XOR_temp_B_55_BIT_5_40_42_X_ETC___d512 } ;
  assign temp_A_63_BIT_9_23_XOR_INV_temp_B_55_39_PLUS_1_ETC___d841 =
	     { x__h19324 ^ y__h19325,
	       x__h19132 ^ y__h19133,
	       temp_A_63_BIT_7_31_XOR_INV_temp_B_55_39_PLUS_1_ETC___d840 } ;
  assign temp_A_63_BIT_9_23_XOR_temp_B_55_BIT_9_24_26_X_ETC___d514 =
	     { x__h8943 ^ y__h8646,
	       x__h8751 ^ y__h8454,
	       temp_A_63_BIT_7_31_XOR_temp_B_55_BIT_7_32_34_X_ETC___d513 } ;
  assign temp_sum_69_BIT_24_007_XOR_temp_sum_69_BIT_23_153___d1238 =
	     temp_sum[24] ^ temp_sum[23] ;
  assign temp_sum_69_BIT_25_16_XOR_temp_sum_69_BIT_24_0_ETC___d1237 =
	     temp_sum[25] ^ y__h52179 ;
  assign temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_16___d1114 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_1_ETC___d1236 =
	     temp_sum[26] ^ y__h52365 ;
  assign temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_20___d1063 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1113 =
	     temp_sum[27] ^ y__h57458 ;
  assign temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1235 =
	     temp_sum[27] ^ y__h52551 ;
  assign temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1254 =
	     { temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1235,
	       temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_1_ETC___d1236,
	       temp_sum_69_BIT_25_16_XOR_temp_sum_69_BIT_24_0_ETC___d1237,
	       temp_sum_69_BIT_24_007_XOR_temp_sum_69_BIT_23_153___d1238,
	       IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5[0] } ;
  assign temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1062 =
	     temp_sum[28] ^ y__h30688 ;
  assign temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1112 =
	     temp_sum[28] ^ y__h57644 ;
  assign temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1234 =
	     temp_sum[28] ^ y__h52737 ;
  assign temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1061 =
	     temp_sum[29] ^ y__h30874 ;
  assign temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1111 =
	     temp_sum[29] ^ y__h57830 ;
  assign temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1130 =
	     { temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1111,
	       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1112,
	       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1113,
	       temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_16___d1114,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4[0] } ;
  assign temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1233 =
	     temp_sum[29] ^ y__h52923 ;
  assign temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1060 =
	     temp_sum[30] ^ y__h31060 ;
  assign temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1079 =
	     { temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1060,
	       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1061,
	       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1062,
	       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_20___d1063,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1110 =
	     temp_sum[30] ^ y__h58016 ;
  assign temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1232 =
	     temp_sum[30] ^ y__h53109 ;
  assign temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1059 =
	     temp_sum[31] ^ y__h31246 ;
  assign temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1109 =
	     temp_sum[31] ^ y__h58202 ;
  assign temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1231 =
	     temp_sum[31] ^ y__h53295 ;
  assign temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1058 =
	     temp_sum[32] ^ y__h31432 ;
  assign temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1108 =
	     temp_sum[32] ^ y__h58388 ;
  assign temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1230 =
	     temp_sum[32] ^ y__h53481 ;
  assign temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1057 =
	     temp_sum[33] ^ y__h31618 ;
  assign temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1107 =
	     temp_sum[33] ^ y__h58574 ;
  assign temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1229 =
	     temp_sum[33] ^ y__h53667 ;
  assign temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1056 =
	     temp_sum[34] ^ y__h31804 ;
  assign temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1106 =
	     temp_sum[34] ^ y__h58760 ;
  assign temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1228 =
	     temp_sum[34] ^ y__h53853 ;
  assign temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1055 =
	     temp_sum[35] ^ y__h31990 ;
  assign temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1105 =
	     temp_sum[35] ^ y__h58946 ;
  assign temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1227 =
	     temp_sum[35] ^ y__h54039 ;
  assign temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1054 =
	     temp_sum[36] ^ y__h32176 ;
  assign temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1104 =
	     temp_sum[36] ^ y__h59132 ;
  assign temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1226 =
	     temp_sum[36] ^ y__h54225 ;
  assign temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1053 =
	     temp_sum[37] ^ y__h32362 ;
  assign temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1103 =
	     temp_sum[37] ^ y__h59318 ;
  assign temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1225 =
	     temp_sum[37] ^ y__h54411 ;
  assign temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1052 =
	     temp_sum[38] ^ y__h32548 ;
  assign temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1102 =
	     temp_sum[38] ^ y__h59504 ;
  assign temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1224 =
	     temp_sum[38] ^ y__h54597 ;
  assign temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1051 =
	     temp_sum[39] ^ y__h32734 ;
  assign temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1101 =
	     temp_sum[39] ^ y__h59690 ;
  assign temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1223 =
	     temp_sum[39] ^ y__h54783 ;
  assign temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1050 =
	     temp_sum[40] ^ y__h32920 ;
  assign temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1100 =
	     temp_sum[40] ^ y__h59876 ;
  assign temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1222 =
	     temp_sum[40] ^ y__h54969 ;
  assign temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1049 =
	     temp_sum[41] ^ y__h33106 ;
  assign temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1099 =
	     temp_sum[41] ^ y__h60062 ;
  assign temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1221 =
	     temp_sum[41] ^ y__h55155 ;
  assign temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1048 =
	     temp_sum[42] ^ y__h33292 ;
  assign temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1098 =
	     temp_sum[42] ^ y__h60248 ;
  assign temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1220 =
	     temp_sum[42] ^ y__h55341 ;
  assign temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1047 =
	     temp_sum[43] ^ y__h33478 ;
  assign temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1097 =
	     temp_sum[43] ^ y__h60434 ;
  assign temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1219 =
	     temp_sum[43] ^ y__h55527 ;
  assign temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1046 =
	     temp_sum[44] ^ y__h33664 ;
  assign temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1096 =
	     temp_sum[44] ^ y__h60620 ;
  assign temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1218 =
	     temp_sum[44] ^ y__h55713 ;
  assign temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1045 =
	     temp_sum[45] ^ y__h33850 ;
  assign temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1095 =
	     temp_sum[45] ^ y__h60806 ;
  assign temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1217 =
	     temp_sum[45] ^ y__h55899 ;
  assign temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1044 =
	     temp_sum[46] ^ y__h34036 ;
  assign temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1094 =
	     temp_sum[46] ^ y__h60992 ;
  assign temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1043 =
	     temp_sum[47] ^ y__h34222 ;
  assign temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1093 =
	     temp_sum[47] ^ y__h61178 ;
  assign temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1183 =
	     temp_sum[47] ^ y__h56271 ;
  assign temp_sum_69_BIT_48_70_XOR_temp_sum_69_BIT_47_4_ETC___d1042 =
	     temp_sum[48] ^ y__h34408 ;
  assign temp_sum_69_BIT_49_15_AND_temp_sum_69_BIT_48_7_ETC___d984 =
	     temp_sum[49] & y__h34594 ;
  assign temp_sum_69_BIT_49_15_XOR_temp_sum_69_BIT_48_7_ETC___d1036 =
	     temp_sum[49] ^ y__h61550 ;
  assign v_exponent__h70775 = fp_a[30:23] | fp_b[30:23] ;
  assign v_fraction__h70776 = fp_a[22:0] | fp_b[22:0] ;
  assign v_sign__h70774 = fp_a[31] | fp_b[31] ;
  assign x__h10048 = temp_A[15] & temp_B[15] ;
  assign x__h10095 = temp_A[15] ^ temp_B[15] ;
  assign x__h10240 = temp_A[16] & temp_B[16] ;
  assign x__h10287 = temp_A[16] ^ temp_B[16] ;
  assign x__h10432 = temp_A[17] & temp_B[17] ;
  assign x__h10479 = temp_A[17] ^ temp_B[17] ;
  assign x__h10624 = temp_A[18] & temp_B[18] ;
  assign x__h10671 = temp_A[18] ^ temp_B[18] ;
  assign x__h10816 = temp_A[19] & temp_B[19] ;
  assign x__h10863 = temp_A[19] ^ temp_B[19] ;
  assign x__h11008 = temp_A[20] & temp_B[20] ;
  assign x__h11055 = temp_A[20] ^ temp_B[20] ;
  assign x__h11200 = temp_A[21] & temp_B[21] ;
  assign x__h11247 = temp_A[21] ^ temp_B[21] ;
  assign x__h11392 = temp_A[22] & temp_B[22] ;
  assign x__h11439 = temp_A[22] ^ temp_B[22] ;
  assign x__h11584 = temp_A[23] & temp_B[23] ;
  assign x__h11631 = temp_A[23] ^ temp_B[23] ;
  assign x__h11776 = temp_A[24] & temp_B[24] ;
  assign x__h11823 = temp_A[24] ^ temp_B[24] ;
  assign x__h11968 = temp_A[25] & temp_B[25] ;
  assign x__h12015 = temp_A[25] ^ temp_B[25] ;
  assign x__h12160 = temp_A[26] & temp_B[26] ;
  assign x__h12207 = temp_A[26] ^ temp_B[26] ;
  assign x__h12352 = temp_A[27] & temp_B[27] ;
  assign x__h12399 = temp_A[27] ^ temp_B[27] ;
  assign x__h12544 = temp_A[28] & temp_B[28] ;
  assign x__h12591 = temp_A[28] ^ temp_B[28] ;
  assign x__h12736 = temp_A[29] & temp_B[29] ;
  assign x__h12783 = temp_A[29] ^ temp_B[29] ;
  assign x__h12928 = temp_A[30] & temp_B[30] ;
  assign x__h12975 = temp_A[30] ^ temp_B[30] ;
  assign x__h13120 = temp_A[31] & temp_B[31] ;
  assign x__h13167 = temp_A[31] ^ temp_B[31] ;
  assign x__h13312 = temp_A[32] & temp_B[32] ;
  assign x__h13359 = temp_A[32] ^ temp_B[32] ;
  assign x__h13504 = temp_A[33] & temp_B[33] ;
  assign x__h13551 = temp_A[33] ^ temp_B[33] ;
  assign x__h13696 = temp_A[34] & temp_B[34] ;
  assign x__h13743 = temp_A[34] ^ temp_B[34] ;
  assign x__h13888 = temp_A[35] & temp_B[35] ;
  assign x__h13935 = temp_A[35] ^ temp_B[35] ;
  assign x__h14080 = temp_A[36] & temp_B[36] ;
  assign x__h14127 = temp_A[36] ^ temp_B[36] ;
  assign x__h14272 = temp_A[37] & temp_B[37] ;
  assign x__h14319 = temp_A[37] ^ temp_B[37] ;
  assign x__h14464 = temp_A[38] & temp_B[38] ;
  assign x__h14511 = temp_A[38] ^ temp_B[38] ;
  assign x__h14656 = temp_A[39] & temp_B[39] ;
  assign x__h14703 = temp_A[39] ^ temp_B[39] ;
  assign x__h14848 = temp_A[40] & temp_B[40] ;
  assign x__h14895 = temp_A[40] ^ temp_B[40] ;
  assign x__h15040 = temp_A[41] & temp_B[41] ;
  assign x__h15087 = temp_A[41] ^ temp_B[41] ;
  assign x__h15232 = temp_A[42] & temp_B[42] ;
  assign x__h15279 = temp_A[42] ^ temp_B[42] ;
  assign x__h15424 = temp_A[43] & temp_B[43] ;
  assign x__h15471 = temp_A[43] ^ temp_B[43] ;
  assign x__h15616 = temp_A[44] & temp_B[44] ;
  assign x__h15663 = temp_A[44] ^ temp_B[44] ;
  assign x__h15808 = temp_A[45] & temp_B[45] ;
  assign x__h15855 = temp_A[45] ^ temp_B[45] ;
  assign x__h16000 = temp_A[46] & temp_B[46] ;
  assign x__h16047 = temp_A[46] ^ temp_B[46] ;
  assign x__h16192 = temp_A[47] & temp_B[47] ;
  assign x__h16239 = temp_A[47] ^ temp_B[47] ;
  assign x__h16325 = temp_A[49] ^ temp_B[49] ;
  assign x__h16384 = temp_A[48] & temp_B[48] ;
  assign x__h16431 = temp_A[48] ^ temp_B[48] ;
  assign x__h17851 = temp_A[1] ^ INV_temp_B_55_39_PLUS_1___d540[1] ;
  assign x__h17980 = temp_A[2] ^ INV_temp_B_55_39_PLUS_1___d540[2] ;
  assign x__h18039 = temp_A[1] & INV_temp_B_55_39_PLUS_1___d540[1] ;
  assign x__h18172 = temp_A[3] ^ INV_temp_B_55_39_PLUS_1___d540[3] ;
  assign x__h18231 = temp_A[2] & INV_temp_B_55_39_PLUS_1___d540[2] ;
  assign x__h18364 = temp_A[4] ^ INV_temp_B_55_39_PLUS_1___d540[4] ;
  assign x__h18423 = temp_A[3] & INV_temp_B_55_39_PLUS_1___d540[3] ;
  assign x__h18556 = temp_A[5] ^ INV_temp_B_55_39_PLUS_1___d540[5] ;
  assign x__h18615 = temp_A[4] & INV_temp_B_55_39_PLUS_1___d540[4] ;
  assign x__h18748 = temp_A[6] ^ INV_temp_B_55_39_PLUS_1___d540[6] ;
  assign x__h18807 = temp_A[5] & INV_temp_B_55_39_PLUS_1___d540[5] ;
  assign x__h18940 = temp_A[7] ^ INV_temp_B_55_39_PLUS_1___d540[7] ;
  assign x__h18999 = temp_A[6] & INV_temp_B_55_39_PLUS_1___d540[6] ;
  assign x__h19132 = temp_A[8] ^ INV_temp_B_55_39_PLUS_1___d540[8] ;
  assign x__h19191 = temp_A[7] & INV_temp_B_55_39_PLUS_1___d540[7] ;
  assign x__h19324 = temp_A[9] ^ INV_temp_B_55_39_PLUS_1___d540[9] ;
  assign x__h19383 = temp_A[8] & INV_temp_B_55_39_PLUS_1___d540[8] ;
  assign x__h19516 = temp_A[10] ^ INV_temp_B_55_39_PLUS_1___d540[10] ;
  assign x__h19575 = temp_A[9] & INV_temp_B_55_39_PLUS_1___d540[9] ;
  assign x__h19708 = temp_A[11] ^ INV_temp_B_55_39_PLUS_1___d540[11] ;
  assign x__h19767 = temp_A[10] & INV_temp_B_55_39_PLUS_1___d540[10] ;
  assign x__h19900 = temp_A[12] ^ INV_temp_B_55_39_PLUS_1___d540[12] ;
  assign x__h19959 = temp_A[11] & INV_temp_B_55_39_PLUS_1___d540[11] ;
  assign x__h20092 = temp_A[13] ^ INV_temp_B_55_39_PLUS_1___d540[13] ;
  assign x__h20151 = temp_A[12] & INV_temp_B_55_39_PLUS_1___d540[12] ;
  assign x__h20284 = temp_A[14] ^ INV_temp_B_55_39_PLUS_1___d540[14] ;
  assign x__h20343 = temp_A[13] & INV_temp_B_55_39_PLUS_1___d540[13] ;
  assign x__h20476 = temp_A[15] ^ INV_temp_B_55_39_PLUS_1___d540[15] ;
  assign x__h20535 = temp_A[14] & INV_temp_B_55_39_PLUS_1___d540[14] ;
  assign x__h20668 = temp_A[16] ^ INV_temp_B_55_39_PLUS_1___d540[16] ;
  assign x__h20727 = temp_A[15] & INV_temp_B_55_39_PLUS_1___d540[15] ;
  assign x__h20860 = temp_A[17] ^ INV_temp_B_55_39_PLUS_1___d540[17] ;
  assign x__h20919 = temp_A[16] & INV_temp_B_55_39_PLUS_1___d540[16] ;
  assign x__h21052 = temp_A[18] ^ INV_temp_B_55_39_PLUS_1___d540[18] ;
  assign x__h21111 = temp_A[17] & INV_temp_B_55_39_PLUS_1___d540[17] ;
  assign x__h21244 = temp_A[19] ^ INV_temp_B_55_39_PLUS_1___d540[19] ;
  assign x__h21303 = temp_A[18] & INV_temp_B_55_39_PLUS_1___d540[18] ;
  assign x__h21436 = temp_A[20] ^ INV_temp_B_55_39_PLUS_1___d540[20] ;
  assign x__h21495 = temp_A[19] & INV_temp_B_55_39_PLUS_1___d540[19] ;
  assign x__h21628 = temp_A[21] ^ INV_temp_B_55_39_PLUS_1___d540[21] ;
  assign x__h21687 = temp_A[20] & INV_temp_B_55_39_PLUS_1___d540[20] ;
  assign x__h21820 = temp_A[22] ^ INV_temp_B_55_39_PLUS_1___d540[22] ;
  assign x__h21879 = temp_A[21] & INV_temp_B_55_39_PLUS_1___d540[21] ;
  assign x__h22012 = temp_A[23] ^ INV_temp_B_55_39_PLUS_1___d540[23] ;
  assign x__h22071 = temp_A[22] & INV_temp_B_55_39_PLUS_1___d540[22] ;
  assign x__h22204 = temp_A[24] ^ INV_temp_B_55_39_PLUS_1___d540[24] ;
  assign x__h22263 = temp_A[23] & INV_temp_B_55_39_PLUS_1___d540[23] ;
  assign x__h22396 = temp_A[25] ^ INV_temp_B_55_39_PLUS_1___d540[25] ;
  assign x__h22455 = temp_A[24] & INV_temp_B_55_39_PLUS_1___d540[24] ;
  assign x__h22588 = temp_A[26] ^ INV_temp_B_55_39_PLUS_1___d540[26] ;
  assign x__h22647 = temp_A[25] & INV_temp_B_55_39_PLUS_1___d540[25] ;
  assign x__h22780 = temp_A[27] ^ INV_temp_B_55_39_PLUS_1___d540[27] ;
  assign x__h22839 = temp_A[26] & INV_temp_B_55_39_PLUS_1___d540[26] ;
  assign x__h22972 = temp_A[28] ^ INV_temp_B_55_39_PLUS_1___d540[28] ;
  assign x__h23031 = temp_A[27] & INV_temp_B_55_39_PLUS_1___d540[27] ;
  assign x__h23164 = temp_A[29] ^ INV_temp_B_55_39_PLUS_1___d540[29] ;
  assign x__h23223 = temp_A[28] & INV_temp_B_55_39_PLUS_1___d540[28] ;
  assign x__h23356 = temp_A[30] ^ INV_temp_B_55_39_PLUS_1___d540[30] ;
  assign x__h23415 = temp_A[29] & INV_temp_B_55_39_PLUS_1___d540[29] ;
  assign x__h23548 = temp_A[31] ^ INV_temp_B_55_39_PLUS_1___d540[31] ;
  assign x__h23607 = temp_A[30] & INV_temp_B_55_39_PLUS_1___d540[30] ;
  assign x__h23740 = temp_A[32] ^ INV_temp_B_55_39_PLUS_1___d540[32] ;
  assign x__h23799 = temp_A[31] & INV_temp_B_55_39_PLUS_1___d540[31] ;
  assign x__h23932 = temp_A[33] ^ INV_temp_B_55_39_PLUS_1___d540[33] ;
  assign x__h23991 = temp_A[32] & INV_temp_B_55_39_PLUS_1___d540[32] ;
  assign x__h24124 = temp_A[34] ^ INV_temp_B_55_39_PLUS_1___d540[34] ;
  assign x__h24183 = temp_A[33] & INV_temp_B_55_39_PLUS_1___d540[33] ;
  assign x__h24316 = temp_A[35] ^ INV_temp_B_55_39_PLUS_1___d540[35] ;
  assign x__h24375 = temp_A[34] & INV_temp_B_55_39_PLUS_1___d540[34] ;
  assign x__h24508 = temp_A[36] ^ INV_temp_B_55_39_PLUS_1___d540[36] ;
  assign x__h24567 = temp_A[35] & INV_temp_B_55_39_PLUS_1___d540[35] ;
  assign x__h24700 = temp_A[37] ^ INV_temp_B_55_39_PLUS_1___d540[37] ;
  assign x__h24759 = temp_A[36] & INV_temp_B_55_39_PLUS_1___d540[36] ;
  assign x__h24892 = temp_A[38] ^ INV_temp_B_55_39_PLUS_1___d540[38] ;
  assign x__h24951 = temp_A[37] & INV_temp_B_55_39_PLUS_1___d540[37] ;
  assign x__h25084 = temp_A[39] ^ INV_temp_B_55_39_PLUS_1___d540[39] ;
  assign x__h25143 = temp_A[38] & INV_temp_B_55_39_PLUS_1___d540[38] ;
  assign x__h25276 = temp_A[40] ^ INV_temp_B_55_39_PLUS_1___d540[40] ;
  assign x__h25335 = temp_A[39] & INV_temp_B_55_39_PLUS_1___d540[39] ;
  assign x__h25468 = temp_A[41] ^ INV_temp_B_55_39_PLUS_1___d540[41] ;
  assign x__h25527 = temp_A[40] & INV_temp_B_55_39_PLUS_1___d540[40] ;
  assign x__h25660 = temp_A[42] ^ INV_temp_B_55_39_PLUS_1___d540[42] ;
  assign x__h25719 = temp_A[41] & INV_temp_B_55_39_PLUS_1___d540[41] ;
  assign x__h25852 = temp_A[43] ^ INV_temp_B_55_39_PLUS_1___d540[43] ;
  assign x__h25911 = temp_A[42] & INV_temp_B_55_39_PLUS_1___d540[42] ;
  assign x__h26044 = temp_A[44] ^ INV_temp_B_55_39_PLUS_1___d540[44] ;
  assign x__h26103 = temp_A[43] & INV_temp_B_55_39_PLUS_1___d540[43] ;
  assign x__h26236 = temp_A[45] ^ INV_temp_B_55_39_PLUS_1___d540[45] ;
  assign x__h26295 = temp_A[44] & INV_temp_B_55_39_PLUS_1___d540[44] ;
  assign x__h26428 = temp_A[46] ^ INV_temp_B_55_39_PLUS_1___d540[46] ;
  assign x__h26487 = temp_A[45] & INV_temp_B_55_39_PLUS_1___d540[45] ;
  assign x__h26620 = temp_A[47] ^ INV_temp_B_55_39_PLUS_1___d540[47] ;
  assign x__h26679 = temp_A[46] & INV_temp_B_55_39_PLUS_1___d540[46] ;
  assign x__h26812 = temp_A[48] ^ INV_temp_B_55_39_PLUS_1___d540[48] ;
  assign x__h26871 = temp_A[47] & INV_temp_B_55_39_PLUS_1___d540[47] ;
  assign x__h27004 = temp_A[49] ^ INV_temp_B_55_39_PLUS_1___d540[49] ;
  assign x__h27063 = temp_A[48] & INV_temp_B_55_39_PLUS_1___d540[48] ;
  assign x__h27603 = ~fp_a[24] ;
  assign x__h27730 = ~fp_a[25] ;
  assign x__h27918 = ~fp_a[26] ;
  assign x__h28106 = ~fp_a[27] ;
  assign x__h28294 = ~fp_a[28] ;
  assign x__h28482 = ~fp_a[29] ;
  assign x__h28670 = ~fp_a[30] ;
  assign x__h34962 =
	     { temp_sum[49] ^ y__h34594,
	       temp_sum_69_BIT_48_70_XOR_temp_sum_69_BIT_47_4_ETC___d1042,
	       temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1043,
	       temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1044,
	       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1045,
	       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1046,
	       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1047,
	       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1048,
	       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1049,
	       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1050,
	       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1051,
	       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1052,
	       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1053,
	       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1054,
	       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1055,
	       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1056,
	       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1057,
	       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1058,
	       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1059,
	       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1060,
	       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1061,
	       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1062,
	       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_20___d1063 } ;
  assign x__h34985 =
	     { temp_sum_69_BIT_48_70_XOR_temp_sum_69_BIT_47_4_ETC___d1042,
	       temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1043,
	       temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1044,
	       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1045,
	       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1046,
	       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1047,
	       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1048,
	       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1049,
	       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1050,
	       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1051,
	       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1052,
	       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1053,
	       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1054,
	       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1055,
	       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1056,
	       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1057,
	       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1058,
	       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1059,
	       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1079 } ;
  assign x__h40310 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h40313 :
	       _theResult___snd_fst__h43312 ;
  assign x__h42077 = fp_a[24] ^ fp_a[23] ;
  assign x__h42203 = fp_a[25] ^ y__h40707 ;
  assign x__h42389 = fp_a[26] ^ y__h40893 ;
  assign x__h42575 = fp_a[27] ^ y__h41079 ;
  assign x__h42761 = fp_a[28] ^ y__h41265 ;
  assign x__h42947 = fp_a[29] ^ y__h41451 ;
  assign x__h4344 = fp_a[24] ^ y__h4347 ;
  assign x__h4471 = fp_a[25] ^ y__h4474 ;
  assign x__h4528 = fp_a[24] & y__h4347 ;
  assign x__h4657 = fp_a[26] ^ y__h4660 ;
  assign x__h4714 = fp_a[25] & y__h4474 ;
  assign x__h4843 = fp_a[27] ^ y__h4846 ;
  assign x__h4900 = fp_a[26] & y__h4660 ;
  assign x__h5029 = fp_a[28] ^ y__h5032 ;
  assign x__h5086 = fp_a[27] & y__h4846 ;
  assign x__h5215 = fp_a[29] ^ y__h5218 ;
  assign x__h5272 = fp_a[28] & y__h5032 ;
  assign x__h5401 = fp_a[30] ^ y__h5404 ;
  assign x__h5458 = fp_a[29] & y__h5218 ;
  assign x__h56453 =
	     { temp_sum[46] ^ y__h56085,
	       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1217,
	       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1218,
	       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1219,
	       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1220,
	       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1221,
	       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1222,
	       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1223,
	       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1224,
	       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1225,
	       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1226,
	       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1227,
	       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1228,
	       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1229,
	       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1230,
	       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1231,
	       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1232,
	       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1233,
	       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1234,
	       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1235,
	       temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_1_ETC___d1236,
	       temp_sum_69_BIT_25_16_XOR_temp_sum_69_BIT_24_0_ETC___d1237,
	       temp_sum_69_BIT_24_007_XOR_temp_sum_69_BIT_23_153___d1238 } ;
  assign x__h56476 =
	     { temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1217,
	       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1218,
	       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1219,
	       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1220,
	       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1221,
	       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1222,
	       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1223,
	       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1224,
	       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1225,
	       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1226,
	       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1227,
	       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1228,
	       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1229,
	       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1230,
	       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1231,
	       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1232,
	       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1233,
	       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1234,
	       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1254 } ;
  assign x__h61732 =
	     { temp_sum[48] ^ y__h61364,
	       temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1093,
	       temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1094,
	       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1095,
	       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1096,
	       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1097,
	       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1098,
	       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1099,
	       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1100,
	       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1101,
	       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1102,
	       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1103,
	       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1104,
	       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1105,
	       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1106,
	       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1107,
	       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1108,
	       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1109,
	       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1110,
	       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1111,
	       temp_sum_69_BIT_28_60_XOR_temp_sum_69_BIT_27_6_ETC___d1112,
	       temp_sum_69_BIT_27_61_XOR_temp_sum_69_BIT_26_2_ETC___d1113,
	       temp_sum_69_BIT_26_20_XOR_temp_sum_69_BIT_25_16___d1114 } ;
  assign x__h61755 =
	     { temp_sum_69_BIT_47_41_XOR_temp_sum_69_BIT_46_4_ETC___d1093,
	       temp_sum_69_BIT_46_42_XOR_temp_sum_69_BIT_45_4_ETC___d1094,
	       temp_sum_69_BIT_45_43_XOR_temp_sum_69_BIT_44_4_ETC___d1095,
	       temp_sum_69_BIT_44_44_XOR_temp_sum_69_BIT_43_4_ETC___d1096,
	       temp_sum_69_BIT_43_45_XOR_temp_sum_69_BIT_42_4_ETC___d1097,
	       temp_sum_69_BIT_42_46_XOR_temp_sum_69_BIT_41_4_ETC___d1098,
	       temp_sum_69_BIT_41_47_XOR_temp_sum_69_BIT_40_4_ETC___d1099,
	       temp_sum_69_BIT_40_48_XOR_temp_sum_69_BIT_39_4_ETC___d1100,
	       temp_sum_69_BIT_39_49_XOR_temp_sum_69_BIT_38_5_ETC___d1101,
	       temp_sum_69_BIT_38_50_XOR_temp_sum_69_BIT_37_5_ETC___d1102,
	       temp_sum_69_BIT_37_51_XOR_temp_sum_69_BIT_36_5_ETC___d1103,
	       temp_sum_69_BIT_36_52_XOR_temp_sum_69_BIT_35_5_ETC___d1104,
	       temp_sum_69_BIT_35_53_XOR_temp_sum_69_BIT_34_5_ETC___d1105,
	       temp_sum_69_BIT_34_54_XOR_temp_sum_69_BIT_33_5_ETC___d1106,
	       temp_sum_69_BIT_33_55_XOR_temp_sum_69_BIT_32_5_ETC___d1107,
	       temp_sum_69_BIT_32_56_XOR_temp_sum_69_BIT_31_5_ETC___d1108,
	       temp_sum_69_BIT_31_57_XOR_temp_sum_69_BIT_30_5_ETC___d1109,
	       temp_sum_69_BIT_30_58_XOR_temp_sum_69_BIT_29_5_ETC___d1110,
	       temp_sum_69_BIT_29_59_XOR_temp_sum_69_BIT_28_6_ETC___d1130 } ;
  assign x__h61801 =
	     temp_sum[48] ?
	       _theResult___snd_fst__h43312 :
	       _theResult___snd_fst__h61804 ;
  assign x__h7360 = temp_A[1] & temp_B[1] ;
  assign x__h7407 = temp_A[1] ^ temp_B[1] ;
  assign x__h7552 = temp_A[2] & temp_B[2] ;
  assign x__h7599 = temp_A[2] ^ temp_B[2] ;
  assign x__h7744 = temp_A[3] & temp_B[3] ;
  assign x__h7791 = temp_A[3] ^ temp_B[3] ;
  assign x__h7936 = temp_A[4] & temp_B[4] ;
  assign x__h7983 = temp_A[4] ^ temp_B[4] ;
  assign x__h8128 = temp_A[5] & temp_B[5] ;
  assign x__h8175 = temp_A[5] ^ temp_B[5] ;
  assign x__h8320 = temp_A[6] & temp_B[6] ;
  assign x__h8367 = temp_A[6] ^ temp_B[6] ;
  assign x__h8512 = temp_A[7] & temp_B[7] ;
  assign x__h8559 = temp_A[7] ^ temp_B[7] ;
  assign x__h8704 = temp_A[8] & temp_B[8] ;
  assign x__h8751 = temp_A[8] ^ temp_B[8] ;
  assign x__h8896 = temp_A[9] & temp_B[9] ;
  assign x__h8943 = temp_A[9] ^ temp_B[9] ;
  assign x__h9088 = temp_A[10] & temp_B[10] ;
  assign x__h9135 = temp_A[10] ^ temp_B[10] ;
  assign x__h9280 = temp_A[11] & temp_B[11] ;
  assign x__h9327 = temp_A[11] ^ temp_B[11] ;
  assign x__h9472 = temp_A[12] & temp_B[12] ;
  assign x__h9519 = temp_A[12] ^ temp_B[12] ;
  assign x__h9664 = temp_A[13] & temp_B[13] ;
  assign x__h9711 = temp_A[13] ^ temp_B[13] ;
  assign x__h9856 = temp_A[14] & temp_B[14] ;
  assign x__h9903 = temp_A[14] ^ temp_B[14] ;
  assign x_exponent__h27338 =
	     { x__h28670 ^ y__h28671,
	       x__h28482 ^ y__h28483,
	       INV_fp_a_3_BIT_28_8_74_XOR_fp_a_3_BIT_27_02_OR_ETC___d903 } ;
  assign y__h10049 = x__h10095 & y__h9798 ;
  assign y__h10182 = x__h10240 | y__h10241 ;
  assign y__h10241 = x__h10287 & y__h9990 ;
  assign y__h10374 = x__h10432 | y__h10433 ;
  assign y__h10433 = x__h10479 & y__h10182 ;
  assign y__h10566 = x__h10624 | y__h10625 ;
  assign y__h10625 = x__h10671 & y__h10374 ;
  assign y__h10758 = x__h10816 | y__h10817 ;
  assign y__h10817 = x__h10863 & y__h10566 ;
  assign y__h10950 = x__h11008 | y__h11009 ;
  assign y__h11009 = x__h11055 & y__h10758 ;
  assign y__h11142 = x__h11200 | y__h11201 ;
  assign y__h11201 = x__h11247 & y__h10950 ;
  assign y__h11334 = x__h11392 | y__h11393 ;
  assign y__h11393 = x__h11439 & y__h11142 ;
  assign y__h11526 = x__h11584 | y__h11585 ;
  assign y__h11585 = x__h11631 & y__h11334 ;
  assign y__h11718 = x__h11776 | y__h11777 ;
  assign y__h11777 = x__h11823 & y__h11526 ;
  assign y__h11910 = x__h11968 | y__h11969 ;
  assign y__h11969 = x__h12015 & y__h11718 ;
  assign y__h12102 = x__h12160 | y__h12161 ;
  assign y__h12161 = x__h12207 & y__h11910 ;
  assign y__h12294 = x__h12352 | y__h12353 ;
  assign y__h12353 = x__h12399 & y__h12102 ;
  assign y__h12486 = x__h12544 | y__h12545 ;
  assign y__h12545 = x__h12591 & y__h12294 ;
  assign y__h12678 = x__h12736 | y__h12737 ;
  assign y__h12737 = x__h12783 & y__h12486 ;
  assign y__h12870 = x__h12928 | y__h12929 ;
  assign y__h12929 = x__h12975 & y__h12678 ;
  assign y__h13062 = x__h13120 | y__h13121 ;
  assign y__h13121 = x__h13167 & y__h12870 ;
  assign y__h13254 = x__h13312 | y__h13313 ;
  assign y__h13313 = x__h13359 & y__h13062 ;
  assign y__h13446 = x__h13504 | y__h13505 ;
  assign y__h13505 = x__h13551 & y__h13254 ;
  assign y__h13638 = x__h13696 | y__h13697 ;
  assign y__h13697 = x__h13743 & y__h13446 ;
  assign y__h13830 = x__h13888 | y__h13889 ;
  assign y__h13889 = x__h13935 & y__h13638 ;
  assign y__h14022 = x__h14080 | y__h14081 ;
  assign y__h14081 = x__h14127 & y__h13830 ;
  assign y__h14214 = x__h14272 | y__h14273 ;
  assign y__h14273 = x__h14319 & y__h14022 ;
  assign y__h14406 = x__h14464 | y__h14465 ;
  assign y__h14465 = x__h14511 & y__h14214 ;
  assign y__h14598 = x__h14656 | y__h14657 ;
  assign y__h14657 = x__h14703 & y__h14406 ;
  assign y__h14790 = x__h14848 | y__h14849 ;
  assign y__h14849 = x__h14895 & y__h14598 ;
  assign y__h14982 = x__h15040 | y__h15041 ;
  assign y__h15041 = x__h15087 & y__h14790 ;
  assign y__h15174 = x__h15232 | y__h15233 ;
  assign y__h15233 = x__h15279 & y__h14982 ;
  assign y__h15366 = x__h15424 | y__h15425 ;
  assign y__h15425 = x__h15471 & y__h15174 ;
  assign y__h15558 = x__h15616 | y__h15617 ;
  assign y__h15617 = x__h15663 & y__h15366 ;
  assign y__h15750 = x__h15808 | y__h15809 ;
  assign y__h15809 = x__h15855 & y__h15558 ;
  assign y__h15942 = x__h16000 | y__h16001 ;
  assign y__h16001 = x__h16047 & y__h15750 ;
  assign y__h16134 = x__h16192 | y__h16193 ;
  assign y__h16193 = x__h16239 & y__h15942 ;
  assign y__h16326 = x__h16384 | y__h16385 ;
  assign y__h16385 = x__h16431 & y__h16134 ;
  assign y__h17852 = temp_A[0] & INV_temp_B_55_39_PLUS_1___d540[0] ;
  assign y__h17981 = x__h18039 | y__h18040 ;
  assign y__h18040 = x__h17851 & y__h17852 ;
  assign y__h18173 = x__h18231 | y__h18232 ;
  assign y__h18232 = x__h17980 & y__h17981 ;
  assign y__h18365 = x__h18423 | y__h18424 ;
  assign y__h18424 = x__h18172 & y__h18173 ;
  assign y__h18557 = x__h18615 | y__h18616 ;
  assign y__h18616 = x__h18364 & y__h18365 ;
  assign y__h18749 = x__h18807 | y__h18808 ;
  assign y__h18808 = x__h18556 & y__h18557 ;
  assign y__h18941 = x__h18999 | y__h19000 ;
  assign y__h19000 = x__h18748 & y__h18749 ;
  assign y__h19133 = x__h19191 | y__h19192 ;
  assign y__h19192 = x__h18940 & y__h18941 ;
  assign y__h19325 = x__h19383 | y__h19384 ;
  assign y__h19384 = x__h19132 & y__h19133 ;
  assign y__h19517 = x__h19575 | y__h19576 ;
  assign y__h19576 = x__h19324 & y__h19325 ;
  assign y__h19709 = x__h19767 | y__h19768 ;
  assign y__h19768 = x__h19516 & y__h19517 ;
  assign y__h19901 = x__h19959 | y__h19960 ;
  assign y__h19960 = x__h19708 & y__h19709 ;
  assign y__h20093 = x__h20151 | y__h20152 ;
  assign y__h20152 = x__h19900 & y__h19901 ;
  assign y__h20285 = x__h20343 | y__h20344 ;
  assign y__h20344 = x__h20092 & y__h20093 ;
  assign y__h20477 = x__h20535 | y__h20536 ;
  assign y__h20536 = x__h20284 & y__h20285 ;
  assign y__h20669 = x__h20727 | y__h20728 ;
  assign y__h20728 = x__h20476 & y__h20477 ;
  assign y__h20861 = x__h20919 | y__h20920 ;
  assign y__h20920 = x__h20668 & y__h20669 ;
  assign y__h21053 = x__h21111 | y__h21112 ;
  assign y__h21112 = x__h20860 & y__h20861 ;
  assign y__h21245 = x__h21303 | y__h21304 ;
  assign y__h21304 = x__h21052 & y__h21053 ;
  assign y__h21437 = x__h21495 | y__h21496 ;
  assign y__h21496 = x__h21244 & y__h21245 ;
  assign y__h21629 = x__h21687 | y__h21688 ;
  assign y__h21688 = x__h21436 & y__h21437 ;
  assign y__h21821 = x__h21879 | y__h21880 ;
  assign y__h21880 = x__h21628 & y__h21629 ;
  assign y__h22013 = x__h22071 | y__h22072 ;
  assign y__h22072 = x__h21820 & y__h21821 ;
  assign y__h22205 = x__h22263 | y__h22264 ;
  assign y__h22264 = x__h22012 & y__h22013 ;
  assign y__h22397 = x__h22455 | y__h22456 ;
  assign y__h22456 = x__h22204 & y__h22205 ;
  assign y__h22589 = x__h22647 | y__h22648 ;
  assign y__h22648 = x__h22396 & y__h22397 ;
  assign y__h22781 = x__h22839 | y__h22840 ;
  assign y__h22840 = x__h22588 & y__h22589 ;
  assign y__h22973 = x__h23031 | y__h23032 ;
  assign y__h23032 = x__h22780 & y__h22781 ;
  assign y__h23165 = x__h23223 | y__h23224 ;
  assign y__h23224 = x__h22972 & y__h22973 ;
  assign y__h23357 = x__h23415 | y__h23416 ;
  assign y__h23416 = x__h23164 & y__h23165 ;
  assign y__h23549 = x__h23607 | y__h23608 ;
  assign y__h23608 = x__h23356 & y__h23357 ;
  assign y__h23741 = x__h23799 | y__h23800 ;
  assign y__h23800 = x__h23548 & y__h23549 ;
  assign y__h23933 = x__h23991 | y__h23992 ;
  assign y__h23992 = x__h23740 & y__h23741 ;
  assign y__h24125 = x__h24183 | y__h24184 ;
  assign y__h24184 = x__h23932 & y__h23933 ;
  assign y__h24317 = x__h24375 | y__h24376 ;
  assign y__h24376 = x__h24124 & y__h24125 ;
  assign y__h24509 = x__h24567 | y__h24568 ;
  assign y__h24568 = x__h24316 & y__h24317 ;
  assign y__h24701 = x__h24759 | y__h24760 ;
  assign y__h24760 = x__h24508 & y__h24509 ;
  assign y__h24893 = x__h24951 | y__h24952 ;
  assign y__h24952 = x__h24700 & y__h24701 ;
  assign y__h25085 = x__h25143 | y__h25144 ;
  assign y__h25144 = x__h24892 & y__h24893 ;
  assign y__h25277 = x__h25335 | y__h25336 ;
  assign y__h25336 = x__h25084 & y__h25085 ;
  assign y__h25469 = x__h25527 | y__h25528 ;
  assign y__h25528 = x__h25276 & y__h25277 ;
  assign y__h25661 = x__h25719 | y__h25720 ;
  assign y__h25720 = x__h25468 & y__h25469 ;
  assign y__h25853 = x__h25911 | y__h25912 ;
  assign y__h25912 = x__h25660 & y__h25661 ;
  assign y__h26045 = x__h26103 | y__h26104 ;
  assign y__h26104 = x__h25852 & y__h25853 ;
  assign y__h26237 = x__h26295 | y__h26296 ;
  assign y__h26296 = x__h26044 & y__h26045 ;
  assign y__h26429 = x__h26487 | y__h26488 ;
  assign y__h26488 = x__h26236 & y__h26237 ;
  assign y__h26621 = x__h26679 | y__h26680 ;
  assign y__h26680 = x__h26428 & y__h26429 ;
  assign y__h26813 = x__h26871 | y__h26872 ;
  assign y__h26872 = x__h26620 & y__h26621 ;
  assign y__h27005 = x__h27063 | y__h27064 ;
  assign y__h27064 = x__h26812 & y__h26813 ;
  assign y__h27731 = fp_a[24] | y__h27789 ;
  assign y__h27789 = x__h27603 & fp_a[23] ;
  assign y__h27919 = fp_a[25] | y__h27977 ;
  assign y__h27977 = x__h27730 & y__h27731 ;
  assign y__h28107 = fp_a[26] | y__h28165 ;
  assign y__h28165 = x__h27918 & y__h27919 ;
  assign y__h28295 = fp_a[27] | y__h28353 ;
  assign y__h28353 = x__h28106 & y__h28107 ;
  assign y__h28483 = fp_a[28] | y__h28541 ;
  assign y__h28541 = x__h28294 & y__h28295 ;
  assign y__h28671 = fp_a[29] | y__h28729 ;
  assign y__h28729 = x__h28482 & y__h28483 ;
  assign y__h30688 = temp_sum[27] & temp_sum[26] ;
  assign y__h30874 = temp_sum[28] & y__h30688 ;
  assign y__h31060 = temp_sum[29] & y__h30874 ;
  assign y__h31246 = temp_sum[30] & y__h31060 ;
  assign y__h31432 = temp_sum[31] & y__h31246 ;
  assign y__h31618 = temp_sum[32] & y__h31432 ;
  assign y__h31804 = temp_sum[33] & y__h31618 ;
  assign y__h3187 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h31990 = temp_sum[34] & y__h31804 ;
  assign y__h32176 = temp_sum[35] & y__h31990 ;
  assign y__h32362 = temp_sum[36] & y__h32176 ;
  assign y__h32548 = temp_sum[37] & y__h32362 ;
  assign y__h32734 = temp_sum[38] & y__h32548 ;
  assign y__h32920 = temp_sum[39] & y__h32734 ;
  assign y__h33106 = temp_sum[40] & y__h32920 ;
  assign y__h33292 = temp_sum[41] & y__h33106 ;
  assign y__h33478 = temp_sum[42] & y__h33292 ;
  assign y__h33664 = temp_sum[43] & y__h33478 ;
  assign y__h3376 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h3187 ;
  assign y__h33850 = temp_sum[44] & y__h33664 ;
  assign y__h34036 = temp_sum[45] & y__h33850 ;
  assign y__h34222 = temp_sum[46] & y__h34036 ;
  assign y__h34408 = temp_sum[47] & y__h34222 ;
  assign y__h34594 = temp_sum[48] & y__h34408 ;
  assign y__h3565 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h3376 ;
  assign y__h3754 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h3565 ;
  assign y__h3943 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h3754 ;
  assign y__h40707 = fp_a[24] & fp_a[23] ;
  assign y__h40893 = fp_a[25] & y__h40707 ;
  assign y__h41079 = fp_a[26] & y__h40893 ;
  assign y__h41265 = fp_a[27] & y__h41079 ;
  assign y__h4132 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h3943 ;
  assign y__h41451 = fp_a[28] & y__h41265 ;
  assign y__h41637 = fp_a[29] & y__h41451 ;
  assign y__h42204 = x__h42077 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h42390 = x__h42203 & y__h42204 ;
  assign y__h42576 = x__h42389 & y__h42390 ;
  assign y__h42762 = x__h42575 & y__h42576 ;
  assign y__h42948 = x__h42761 & y__h42762 ;
  assign y__h43134 = x__h42947 & y__h42948 ;
  assign y__h4345 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h4347 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h4472 = x__h4528 | y__h4529 ;
  assign y__h4474 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h3187 ;
  assign y__h4529 = x__h4344 & y__h4345 ;
  assign y__h4658 = x__h4714 | y__h4715 ;
  assign y__h4660 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h3376 ;
  assign y__h4715 = x__h4471 & y__h4472 ;
  assign y__h4844 = x__h4900 | y__h4901 ;
  assign y__h4846 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h3565 ;
  assign y__h4901 = x__h4657 & y__h4658 ;
  assign y__h5030 = x__h5086 | y__h5087 ;
  assign y__h5032 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h3754 ;
  assign y__h5087 = x__h4843 & y__h4844 ;
  assign y__h5216 = x__h5272 | y__h5273 ;
  assign y__h52179 = temp_sum[24] & temp_sum[23] ;
  assign y__h5218 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h3943 ;
  assign y__h52365 = temp_sum[25] & y__h52179 ;
  assign y__h52551 = temp_sum[26] & y__h52365 ;
  assign y__h5273 = x__h5029 & y__h5030 ;
  assign y__h52737 = temp_sum[27] & y__h52551 ;
  assign y__h52923 = temp_sum[28] & y__h52737 ;
  assign y__h53109 = temp_sum[29] & y__h52923 ;
  assign y__h53295 = temp_sum[30] & y__h53109 ;
  assign y__h53481 = temp_sum[31] & y__h53295 ;
  assign y__h53667 = temp_sum[32] & y__h53481 ;
  assign y__h53853 = temp_sum[33] & y__h53667 ;
  assign y__h5402 = x__h5458 | y__h5459 ;
  assign y__h54039 = temp_sum[34] & y__h53853 ;
  assign y__h5404 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h4132 ;
  assign y__h54225 = temp_sum[35] & y__h54039 ;
  assign y__h54411 = temp_sum[36] & y__h54225 ;
  assign y__h5459 = x__h5215 & y__h5216 ;
  assign y__h54597 = temp_sum[37] & y__h54411 ;
  assign y__h54783 = temp_sum[38] & y__h54597 ;
  assign y__h54969 = temp_sum[39] & y__h54783 ;
  assign y__h55155 = temp_sum[40] & y__h54969 ;
  assign y__h55341 = temp_sum[41] & y__h55155 ;
  assign y__h55527 = temp_sum[42] & y__h55341 ;
  assign y__h55713 = temp_sum[43] & y__h55527 ;
  assign y__h55899 = temp_sum[44] & y__h55713 ;
  assign y__h56085 = temp_sum[45] & y__h55899 ;
  assign y__h56271 = temp_sum[46] & y__h56085 ;
  assign y__h57458 = temp_sum[26] & temp_sum[25] ;
  assign y__h57644 = temp_sum[27] & y__h57458 ;
  assign y__h57830 = temp_sum[28] & y__h57644 ;
  assign y__h58016 = temp_sum[29] & y__h57830 ;
  assign y__h58202 = temp_sum[30] & y__h58016 ;
  assign y__h58388 = temp_sum[31] & y__h58202 ;
  assign y__h58574 = temp_sum[32] & y__h58388 ;
  assign y__h58760 = temp_sum[33] & y__h58574 ;
  assign y__h58946 = temp_sum[34] & y__h58760 ;
  assign y__h59132 = temp_sum[35] & y__h58946 ;
  assign y__h59318 = temp_sum[36] & y__h59132 ;
  assign y__h59504 = temp_sum[37] & y__h59318 ;
  assign y__h59690 = temp_sum[38] & y__h59504 ;
  assign y__h59876 = temp_sum[39] & y__h59690 ;
  assign y__h60062 = temp_sum[40] & y__h59876 ;
  assign y__h60248 = temp_sum[41] & y__h60062 ;
  assign y__h60434 = temp_sum[42] & y__h60248 ;
  assign y__h60620 = temp_sum[43] & y__h60434 ;
  assign y__h60806 = temp_sum[44] & y__h60620 ;
  assign y__h60992 = temp_sum[45] & y__h60806 ;
  assign y__h61178 = temp_sum[46] & y__h60992 ;
  assign y__h61364 = temp_sum[47] & y__h61178 ;
  assign y__h61550 = temp_sum[48] & y__h61364 ;
  assign y__h62205 = exp___1__h51216[1] & exp___1__h51216[0] ;
  assign y__h62394 = exp___1__h51216[2] & y__h62205 ;
  assign y__h62583 = exp___1__h51216[3] & y__h62394 ;
  assign y__h62772 = exp___1__h51216[4] & y__h62583 ;
  assign y__h62961 = exp___1__h51216[5] & y__h62772 ;
  assign y__h63150 = exp___1__h51216[6] & y__h62961 ;
  assign y__h7302 = x__h7360 | y__h7361 ;
  assign y__h7361 = x__h7407 & y__h7408 ;
  assign y__h7408 = temp_A[0] & temp_B[0] ;
  assign y__h7494 = x__h7552 | y__h7553 ;
  assign y__h7553 = x__h7599 & y__h7302 ;
  assign y__h7686 = x__h7744 | y__h7745 ;
  assign y__h7745 = x__h7791 & y__h7494 ;
  assign y__h7878 = x__h7936 | y__h7937 ;
  assign y__h7937 = x__h7983 & y__h7686 ;
  assign y__h8070 = x__h8128 | y__h8129 ;
  assign y__h8129 = x__h8175 & y__h7878 ;
  assign y__h8262 = x__h8320 | y__h8321 ;
  assign y__h8321 = x__h8367 & y__h8070 ;
  assign y__h8454 = x__h8512 | y__h8513 ;
  assign y__h8513 = x__h8559 & y__h8262 ;
  assign y__h8646 = x__h8704 | y__h8705 ;
  assign y__h8705 = x__h8751 & y__h8454 ;
  assign y__h8838 = x__h8896 | y__h8897 ;
  assign y__h8897 = x__h8943 & y__h8646 ;
  assign y__h9030 = x__h9088 | y__h9089 ;
  assign y__h9089 = x__h9135 & y__h8838 ;
  assign y__h9222 = x__h9280 | y__h9281 ;
  assign y__h9281 = x__h9327 & y__h9030 ;
  assign y__h9414 = x__h9472 | y__h9473 ;
  assign y__h9473 = x__h9519 & y__h9222 ;
  assign y__h9606 = x__h9664 | y__h9665 ;
  assign y__h9665 = x__h9711 & y__h9414 ;
  assign y__h9798 = x__h9856 | y__h9857 ;
  assign y__h9857 = x__h9903 & y__h9606 ;
  assign y__h9990 = x__h10048 | y__h10049 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	adj_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adj_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_add <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	handle_oneinpzero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	init_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	out_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (adj_done_EN) adj_done <= `BSV_ASSIGNMENT_DELAY adj_done_D_IN;
	if (adj_sub_EN) adj_sub <= `BSV_ASSIGNMENT_DELAY adj_sub_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (do_add_EN) do_add <= `BSV_ASSIGNMENT_DELAY do_add_D_IN;
	if (do_sub_EN) do_sub <= `BSV_ASSIGNMENT_DELAY do_sub_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (handle_oneinpzero_EN)
	  handle_oneinpzero <= `BSV_ASSIGNMENT_DELAY handle_oneinpzero_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (init_done_EN) init_done <= `BSV_ASSIGNMENT_DELAY init_done_D_IN;
	if (inpA_fifo_rv_EN)
	  inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA_fifo_rv_D_IN;
	if (inpB_fifo_rv_EN)
	  inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpB_fifo_rv_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (out_fifo_rv_EN)
	  out_fifo_rv <= `BSV_ASSIGNMENT_DELAY out_fifo_rv_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    adj_done = 1'h0;
    adj_sub = 1'h0;
    assembled_answer = 1'h0;
    do_add = 1'h0;
    do_sub = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    handle_oneinpzero = 1'h0;
    handle_zero = 1'h0;
    init_done = 1'h0;
    inpA_fifo_rv = 17'h0AAAA;
    inpB_fifo_rv = 33'h0AAAAAAAA;
    operands_swapped_if_needed = 1'h0;
    out_fifo_rv = 33'h0AAAAAAAA;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add_pipelined

