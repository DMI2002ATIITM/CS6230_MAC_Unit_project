//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue Nov  5 22:45:06 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A1                     O     1
// RDY_get_A2                     O     1
// RDY_get_A3                     O     1
// RDY_get_A4                     O     1
// RDY_get_B1                     O     1
// RDY_get_C1                     O     1
// RDY_get_S1_or_S2               O     1
// output_MAC                     O    32
// RDY_output_MAC                 O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A1_a                       I    16
// get_A2_a                       I    16
// get_A3_a                       I    16
// get_A4_a                       I    16
// get_B1_b                       I    16
// get_C1_c                       I    32
// get_S1_or_S2_s1_or_s2          I     1
// EN_get_A1                      I     1
// EN_get_A2                      I     1
// EN_get_A3                      I     1
// EN_get_A4                      I     1
// EN_get_B1                      I     1
// EN_get_C1                      I     1
// EN_get_S1_or_S2                I     1
// EN_output_MAC                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mksystolic_array(CLK,
			RST_N,

			get_A1_a,
			EN_get_A1,
			RDY_get_A1,

			get_A2_a,
			EN_get_A2,
			RDY_get_A2,

			get_A3_a,
			EN_get_A3,
			RDY_get_A3,

			get_A4_a,
			EN_get_A4,
			RDY_get_A4,

			get_B1_b,
			EN_get_B1,
			RDY_get_B1,

			get_C1_c,
			EN_get_C1,
			RDY_get_C1,

			get_S1_or_S2_s1_or_s2,
			EN_get_S1_or_S2,
			RDY_get_S1_or_S2,

			EN_output_MAC,
			output_MAC,
			RDY_output_MAC);
  input  CLK;
  input  RST_N;

  // action method get_A1
  input  [15 : 0] get_A1_a;
  input  EN_get_A1;
  output RDY_get_A1;

  // action method get_A2
  input  [15 : 0] get_A2_a;
  input  EN_get_A2;
  output RDY_get_A2;

  // action method get_A3
  input  [15 : 0] get_A3_a;
  input  EN_get_A3;
  output RDY_get_A3;

  // action method get_A4
  input  [15 : 0] get_A4_a;
  input  EN_get_A4;
  output RDY_get_A4;

  // action method get_B1
  input  [15 : 0] get_B1_b;
  input  EN_get_B1;
  output RDY_get_B1;

  // action method get_C1
  input  [31 : 0] get_C1_c;
  input  EN_get_C1;
  output RDY_get_C1;

  // action method get_S1_or_S2
  input  get_S1_or_S2_s1_or_s2;
  input  EN_get_S1_or_S2;
  output RDY_get_S1_or_S2;

  // actionvalue method output_MAC
  input  EN_output_MAC;
  output [31 : 0] output_MAC;
  output RDY_output_MAC;

  // signals for module outputs
  wire [31 : 0] output_MAC;
  wire RDY_get_A1,
       RDY_get_A2,
       RDY_get_A3,
       RDY_get_A4,
       RDY_get_B1,
       RDY_get_C1,
       RDY_get_S1_or_S2,
       RDY_output_MAC;

  // inlined wires
  wire [32 : 0] inpC1_fifo_rv_port0__write_1,
		inpC1_fifo_rv_port1__read,
		inpC1_fifo_rv_port1__write_1,
		inpC1_fifo_rv_port2__read,
		out_fifo_rv_port1__read,
		out_fifo_rv_port1__write_1,
		out_fifo_rv_port2__read;
  wire [16 : 0] inpA1_fifo_rv_port0__write_1,
		inpA1_fifo_rv_port1__read,
		inpA1_fifo_rv_port1__write_1,
		inpA1_fifo_rv_port2__read,
		inpA2_fifo_rv_port1__read,
		inpA2_fifo_rv_port1__write_1,
		inpA2_fifo_rv_port2__read,
		inpA3_fifo_rv_port1__read,
		inpA3_fifo_rv_port1__write_1,
		inpA3_fifo_rv_port2__read,
		inpA4_fifo_rv_port1__read,
		inpA4_fifo_rv_port1__write_1,
		inpA4_fifo_rv_port2__read,
		inpB1_fifo_rv_port1__read,
		inpB1_fifo_rv_port1__write_1,
		inpB1_fifo_rv_port2__read;
  wire [1 : 0] inpS1_fifo_rv_port0__write_1,
	       inpS1_fifo_rv_port1__read,
	       inpS1_fifo_rv_port1__write_1,
	       inpS1_fifo_rv_port2__read;

  // register inpA1_fifo_rv
  reg [16 : 0] inpA1_fifo_rv;
  wire [16 : 0] inpA1_fifo_rv_D_IN;
  wire inpA1_fifo_rv_EN;

  // register inpA2_fifo_rv
  reg [16 : 0] inpA2_fifo_rv;
  wire [16 : 0] inpA2_fifo_rv_D_IN;
  wire inpA2_fifo_rv_EN;

  // register inpA3_fifo_rv
  reg [16 : 0] inpA3_fifo_rv;
  wire [16 : 0] inpA3_fifo_rv_D_IN;
  wire inpA3_fifo_rv_EN;

  // register inpA4_fifo_rv
  reg [16 : 0] inpA4_fifo_rv;
  wire [16 : 0] inpA4_fifo_rv_D_IN;
  wire inpA4_fifo_rv_EN;

  // register inpB1_fifo_rv
  reg [16 : 0] inpB1_fifo_rv;
  wire [16 : 0] inpB1_fifo_rv_D_IN;
  wire inpB1_fifo_rv_EN;

  // register inpC1_fifo_rv
  reg [32 : 0] inpC1_fifo_rv;
  wire [32 : 0] inpC1_fifo_rv_D_IN;
  wire inpC1_fifo_rv_EN;

  // register inpS1_fifo_rv
  reg [1 : 0] inpS1_fifo_rv;
  wire [1 : 0] inpS1_fifo_rv_D_IN;
  wire inpS1_fifo_rv_EN;

  // register out_fifo_rv
  reg [32 : 0] out_fifo_rv;
  wire [32 : 0] out_fifo_rv_D_IN;
  wire out_fifo_rv_EN;

  // ports of submodule mac_1
  wire [31 : 0] mac_1_get_C_c, mac_1_output_MAC;
  wire [15 : 0] mac_1_get_A_a, mac_1_get_B_b, mac_1_relay_B;
  wire mac_1_EN_get_A,
       mac_1_EN_get_B,
       mac_1_EN_get_C,
       mac_1_EN_get_S1_or_S2,
       mac_1_EN_output_MAC,
       mac_1_RDY_get_A,
       mac_1_RDY_get_C,
       mac_1_RDY_get_S1_or_S2,
       mac_1_RDY_output_MAC,
       mac_1_RDY_relay_B,
       mac_1_RDY_relay_S,
       mac_1_get_S1_or_S2_s1_or_s2,
       mac_1_relay_S;

  // ports of submodule mac_2
  wire [31 : 0] mac_2_get_C_c, mac_2_output_MAC;
  wire [15 : 0] mac_2_get_A_a, mac_2_get_B_b, mac_2_relay_B;
  wire mac_2_EN_get_A,
       mac_2_EN_get_B,
       mac_2_EN_get_C,
       mac_2_EN_get_S1_or_S2,
       mac_2_EN_output_MAC,
       mac_2_RDY_get_A,
       mac_2_RDY_get_C,
       mac_2_RDY_get_S1_or_S2,
       mac_2_RDY_output_MAC,
       mac_2_RDY_relay_B,
       mac_2_RDY_relay_S,
       mac_2_get_S1_or_S2_s1_or_s2,
       mac_2_relay_S;

  // ports of submodule mac_3
  wire [31 : 0] mac_3_get_C_c, mac_3_output_MAC;
  wire [15 : 0] mac_3_get_A_a, mac_3_get_B_b, mac_3_relay_B;
  wire mac_3_EN_get_A,
       mac_3_EN_get_B,
       mac_3_EN_get_C,
       mac_3_EN_get_S1_or_S2,
       mac_3_EN_output_MAC,
       mac_3_RDY_get_A,
       mac_3_RDY_get_C,
       mac_3_RDY_get_S1_or_S2,
       mac_3_RDY_output_MAC,
       mac_3_RDY_relay_B,
       mac_3_RDY_relay_S,
       mac_3_get_S1_or_S2_s1_or_s2,
       mac_3_relay_S;

  // ports of submodule mac_4
  wire [31 : 0] mac_4_get_C_c, mac_4_output_MAC;
  wire [15 : 0] mac_4_get_A_a, mac_4_get_B_b;
  wire mac_4_EN_get_A,
       mac_4_EN_get_B,
       mac_4_EN_get_C,
       mac_4_EN_get_S1_or_S2,
       mac_4_EN_output_MAC,
       mac_4_RDY_get_A,
       mac_4_RDY_get_C,
       mac_4_RDY_get_S1_or_S2,
       mac_4_RDY_output_MAC,
       mac_4_get_S1_or_S2_s1_or_s2;

  // rule scheduling signals
  wire CAN_FIRE_RL_get_ext_inp,
       CAN_FIRE_RL_get_ext_inpB,
       CAN_FIRE_RL_get_inpA1,
       CAN_FIRE_RL_get_inpA2,
       CAN_FIRE_RL_get_inpA3,
       CAN_FIRE_RL_get_inpA4,
       CAN_FIRE_RL_outp,
       CAN_FIRE_RL_relay_as_1_2,
       CAN_FIRE_RL_relay_as_2_3,
       CAN_FIRE_RL_relay_as_3_4,
       CAN_FIRE_RL_relay_b_1_2,
       CAN_FIRE_RL_relay_b_2_3,
       CAN_FIRE_RL_relay_b_3_4,
       CAN_FIRE_RL_relay_c_1_2,
       CAN_FIRE_RL_relay_c_2_3,
       CAN_FIRE_RL_relay_c_3_4,
       CAN_FIRE_get_A1,
       CAN_FIRE_get_A2,
       CAN_FIRE_get_A3,
       CAN_FIRE_get_A4,
       CAN_FIRE_get_B1,
       CAN_FIRE_get_C1,
       CAN_FIRE_get_S1_or_S2,
       CAN_FIRE_output_MAC,
       WILL_FIRE_RL_get_ext_inp,
       WILL_FIRE_RL_get_ext_inpB,
       WILL_FIRE_RL_get_inpA1,
       WILL_FIRE_RL_get_inpA2,
       WILL_FIRE_RL_get_inpA3,
       WILL_FIRE_RL_get_inpA4,
       WILL_FIRE_RL_outp,
       WILL_FIRE_RL_relay_as_1_2,
       WILL_FIRE_RL_relay_as_2_3,
       WILL_FIRE_RL_relay_as_3_4,
       WILL_FIRE_RL_relay_b_1_2,
       WILL_FIRE_RL_relay_b_2_3,
       WILL_FIRE_RL_relay_b_3_4,
       WILL_FIRE_RL_relay_c_1_2,
       WILL_FIRE_RL_relay_c_2_3,
       WILL_FIRE_RL_relay_c_3_4,
       WILL_FIRE_get_A1,
       WILL_FIRE_get_A2,
       WILL_FIRE_get_A3,
       WILL_FIRE_get_A4,
       WILL_FIRE_get_B1,
       WILL_FIRE_get_C1,
       WILL_FIRE_get_S1_or_S2,
       WILL_FIRE_output_MAC;

  // action method get_A1
  assign RDY_get_A1 = !inpA1_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A1 = !inpA1_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A1 = EN_get_A1 ;

  // action method get_A2
  assign RDY_get_A2 = !inpA2_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A2 = !inpA2_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A2 = EN_get_A2 ;

  // action method get_A3
  assign RDY_get_A3 = !inpA3_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A3 = !inpA3_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A3 = EN_get_A3 ;

  // action method get_A4
  assign RDY_get_A4 = !inpA4_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A4 = !inpA4_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A4 = EN_get_A4 ;

  // action method get_B1
  assign RDY_get_B1 = !inpB1_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_B1 = !inpB1_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_B1 = EN_get_B1 ;

  // action method get_C1
  assign RDY_get_C1 = !inpC1_fifo_rv_port1__read[32] ;
  assign CAN_FIRE_get_C1 = !inpC1_fifo_rv_port1__read[32] ;
  assign WILL_FIRE_get_C1 = EN_get_C1 ;

  // action method get_S1_or_S2
  assign RDY_get_S1_or_S2 = !inpS1_fifo_rv_port1__read[1] ;
  assign CAN_FIRE_get_S1_or_S2 = !inpS1_fifo_rv_port1__read[1] ;
  assign WILL_FIRE_get_S1_or_S2 = EN_get_S1_or_S2 ;

  // actionvalue method output_MAC
  assign output_MAC = out_fifo_rv[31:0] ;
  assign RDY_output_MAC = out_fifo_rv[32] ;
  assign CAN_FIRE_output_MAC = out_fifo_rv[32] ;
  assign WILL_FIRE_output_MAC = EN_output_MAC ;

  // submodule mac_1
  mkMAC_with_wrapper mac_1(.CLK(CLK),
			   .RST_N(RST_N),
			   .get_A_a(mac_1_get_A_a),
			   .get_B_b(mac_1_get_B_b),
			   .get_C_c(mac_1_get_C_c),
			   .get_S1_or_S2_s1_or_s2(mac_1_get_S1_or_S2_s1_or_s2),
			   .EN_get_A(mac_1_EN_get_A),
			   .EN_get_B(mac_1_EN_get_B),
			   .EN_get_C(mac_1_EN_get_C),
			   .EN_get_S1_or_S2(mac_1_EN_get_S1_or_S2),
			   .EN_output_MAC(mac_1_EN_output_MAC),
			   .RDY_get_A(mac_1_RDY_get_A),
			   .RDY_get_B(),
			   .RDY_get_C(mac_1_RDY_get_C),
			   .RDY_get_S1_or_S2(mac_1_RDY_get_S1_or_S2),
			   .output_MAC(mac_1_output_MAC),
			   .RDY_output_MAC(mac_1_RDY_output_MAC),
			   .relay_A(),
			   .RDY_relay_A(),
			   .relay_B(mac_1_relay_B),
			   .RDY_relay_B(mac_1_RDY_relay_B),
			   .relay_S(mac_1_relay_S),
			   .RDY_relay_S(mac_1_RDY_relay_S));

  // submodule mac_2
  mkMAC_with_wrapper mac_2(.CLK(CLK),
			   .RST_N(RST_N),
			   .get_A_a(mac_2_get_A_a),
			   .get_B_b(mac_2_get_B_b),
			   .get_C_c(mac_2_get_C_c),
			   .get_S1_or_S2_s1_or_s2(mac_2_get_S1_or_S2_s1_or_s2),
			   .EN_get_A(mac_2_EN_get_A),
			   .EN_get_B(mac_2_EN_get_B),
			   .EN_get_C(mac_2_EN_get_C),
			   .EN_get_S1_or_S2(mac_2_EN_get_S1_or_S2),
			   .EN_output_MAC(mac_2_EN_output_MAC),
			   .RDY_get_A(mac_2_RDY_get_A),
			   .RDY_get_B(),
			   .RDY_get_C(mac_2_RDY_get_C),
			   .RDY_get_S1_or_S2(mac_2_RDY_get_S1_or_S2),
			   .output_MAC(mac_2_output_MAC),
			   .RDY_output_MAC(mac_2_RDY_output_MAC),
			   .relay_A(),
			   .RDY_relay_A(),
			   .relay_B(mac_2_relay_B),
			   .RDY_relay_B(mac_2_RDY_relay_B),
			   .relay_S(mac_2_relay_S),
			   .RDY_relay_S(mac_2_RDY_relay_S));

  // submodule mac_3
  mkMAC_with_wrapper mac_3(.CLK(CLK),
			   .RST_N(RST_N),
			   .get_A_a(mac_3_get_A_a),
			   .get_B_b(mac_3_get_B_b),
			   .get_C_c(mac_3_get_C_c),
			   .get_S1_or_S2_s1_or_s2(mac_3_get_S1_or_S2_s1_or_s2),
			   .EN_get_A(mac_3_EN_get_A),
			   .EN_get_B(mac_3_EN_get_B),
			   .EN_get_C(mac_3_EN_get_C),
			   .EN_get_S1_or_S2(mac_3_EN_get_S1_or_S2),
			   .EN_output_MAC(mac_3_EN_output_MAC),
			   .RDY_get_A(mac_3_RDY_get_A),
			   .RDY_get_B(),
			   .RDY_get_C(mac_3_RDY_get_C),
			   .RDY_get_S1_or_S2(mac_3_RDY_get_S1_or_S2),
			   .output_MAC(mac_3_output_MAC),
			   .RDY_output_MAC(mac_3_RDY_output_MAC),
			   .relay_A(),
			   .RDY_relay_A(),
			   .relay_B(mac_3_relay_B),
			   .RDY_relay_B(mac_3_RDY_relay_B),
			   .relay_S(mac_3_relay_S),
			   .RDY_relay_S(mac_3_RDY_relay_S));

  // submodule mac_4
  mkMAC_with_wrapper mac_4(.CLK(CLK),
			   .RST_N(RST_N),
			   .get_A_a(mac_4_get_A_a),
			   .get_B_b(mac_4_get_B_b),
			   .get_C_c(mac_4_get_C_c),
			   .get_S1_or_S2_s1_or_s2(mac_4_get_S1_or_S2_s1_or_s2),
			   .EN_get_A(mac_4_EN_get_A),
			   .EN_get_B(mac_4_EN_get_B),
			   .EN_get_C(mac_4_EN_get_C),
			   .EN_get_S1_or_S2(mac_4_EN_get_S1_or_S2),
			   .EN_output_MAC(mac_4_EN_output_MAC),
			   .RDY_get_A(mac_4_RDY_get_A),
			   .RDY_get_B(),
			   .RDY_get_C(mac_4_RDY_get_C),
			   .RDY_get_S1_or_S2(mac_4_RDY_get_S1_or_S2),
			   .output_MAC(mac_4_output_MAC),
			   .RDY_output_MAC(mac_4_RDY_output_MAC),
			   .relay_A(),
			   .RDY_relay_A(),
			   .relay_B(),
			   .RDY_relay_B(),
			   .relay_S(),
			   .RDY_relay_S());

  // rule RL_outp
  assign CAN_FIRE_RL_outp =
	     mac_4_RDY_output_MAC && !out_fifo_rv_port1__read[32] ;
  assign WILL_FIRE_RL_outp = CAN_FIRE_RL_outp ;

  // rule RL_get_inpA4
  assign CAN_FIRE_RL_get_inpA4 = inpA4_fifo_rv[16] && mac_4_RDY_get_A ;
  assign WILL_FIRE_RL_get_inpA4 = CAN_FIRE_RL_get_inpA4 ;

  // rule RL_relay_c_3_4
  assign CAN_FIRE_RL_relay_c_3_4 = mac_4_RDY_get_C && mac_3_RDY_output_MAC ;
  assign WILL_FIRE_RL_relay_c_3_4 = CAN_FIRE_RL_relay_c_3_4 ;

  // rule RL_get_inpA3
  assign CAN_FIRE_RL_get_inpA3 = inpA3_fifo_rv[16] && mac_3_RDY_get_A ;
  assign WILL_FIRE_RL_get_inpA3 = CAN_FIRE_RL_get_inpA3 ;

  // rule RL_relay_as_3_4
  assign CAN_FIRE_RL_relay_as_3_4 =
	     mac_4_RDY_get_S1_or_S2 && mac_3_RDY_relay_S ;
  assign WILL_FIRE_RL_relay_as_3_4 = CAN_FIRE_RL_relay_as_3_4 ;

  // rule RL_relay_c_2_3
  assign CAN_FIRE_RL_relay_c_2_3 = mac_3_RDY_get_C && mac_2_RDY_output_MAC ;
  assign WILL_FIRE_RL_relay_c_2_3 = CAN_FIRE_RL_relay_c_2_3 ;

  // rule RL_get_inpA2
  assign CAN_FIRE_RL_get_inpA2 = inpA2_fifo_rv[16] && mac_2_RDY_get_A ;
  assign WILL_FIRE_RL_get_inpA2 = CAN_FIRE_RL_get_inpA2 ;

  // rule RL_relay_as_2_3
  assign CAN_FIRE_RL_relay_as_2_3 =
	     mac_3_RDY_get_S1_or_S2 && mac_2_RDY_relay_S ;
  assign WILL_FIRE_RL_relay_as_2_3 = CAN_FIRE_RL_relay_as_2_3 ;

  // rule RL_relay_c_1_2
  assign CAN_FIRE_RL_relay_c_1_2 = mac_2_RDY_get_C && mac_1_RDY_output_MAC ;
  assign WILL_FIRE_RL_relay_c_1_2 = CAN_FIRE_RL_relay_c_1_2 ;

  // rule RL_get_ext_inp
  assign CAN_FIRE_RL_get_ext_inp =
	     inpC1_fifo_rv[32] && inpS1_fifo_rv[1] && mac_1_RDY_get_C &&
	     mac_1_RDY_get_S1_or_S2 ;
  assign WILL_FIRE_RL_get_ext_inp = CAN_FIRE_RL_get_ext_inp ;

  // rule RL_get_inpA1
  assign CAN_FIRE_RL_get_inpA1 = inpA1_fifo_rv[16] && mac_1_RDY_get_A ;
  assign WILL_FIRE_RL_get_inpA1 = CAN_FIRE_RL_get_inpA1 ;

  // rule RL_relay_as_1_2
  assign CAN_FIRE_RL_relay_as_1_2 =
	     mac_2_RDY_get_S1_or_S2 && mac_1_RDY_relay_S ;
  assign WILL_FIRE_RL_relay_as_1_2 = CAN_FIRE_RL_relay_as_1_2 ;

  // rule RL_relay_b_3_4
  assign CAN_FIRE_RL_relay_b_3_4 = mac_3_RDY_relay_B ;
  assign WILL_FIRE_RL_relay_b_3_4 = mac_3_RDY_relay_B ;

  // rule RL_relay_b_2_3
  assign CAN_FIRE_RL_relay_b_2_3 = mac_2_RDY_relay_B ;
  assign WILL_FIRE_RL_relay_b_2_3 = mac_2_RDY_relay_B ;

  // rule RL_relay_b_1_2
  assign CAN_FIRE_RL_relay_b_1_2 = mac_1_RDY_relay_B ;
  assign WILL_FIRE_RL_relay_b_1_2 = mac_1_RDY_relay_B ;

  // rule RL_get_ext_inpB
  assign CAN_FIRE_RL_get_ext_inpB = inpB1_fifo_rv[16] ;
  assign WILL_FIRE_RL_get_ext_inpB = CAN_FIRE_RL_get_ext_inpB ;

  // inlined wires
  assign inpA1_fifo_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpA1_fifo_rv_port1__read =
	     CAN_FIRE_RL_get_inpA1 ?
	       inpA1_fifo_rv_port0__write_1 :
	       inpA1_fifo_rv ;
  assign inpA1_fifo_rv_port1__write_1 = { 1'd1, get_A1_a } ;
  assign inpA1_fifo_rv_port2__read =
	     EN_get_A1 ?
	       inpA1_fifo_rv_port1__write_1 :
	       inpA1_fifo_rv_port1__read ;
  assign inpA2_fifo_rv_port1__read =
	     CAN_FIRE_RL_get_inpA2 ?
	       inpA1_fifo_rv_port0__write_1 :
	       inpA2_fifo_rv ;
  assign inpA2_fifo_rv_port1__write_1 = { 1'd1, get_A2_a } ;
  assign inpA2_fifo_rv_port2__read =
	     EN_get_A2 ?
	       inpA2_fifo_rv_port1__write_1 :
	       inpA2_fifo_rv_port1__read ;
  assign inpA3_fifo_rv_port1__read =
	     CAN_FIRE_RL_get_inpA3 ?
	       inpA1_fifo_rv_port0__write_1 :
	       inpA3_fifo_rv ;
  assign inpA3_fifo_rv_port1__write_1 = { 1'd1, get_A3_a } ;
  assign inpA3_fifo_rv_port2__read =
	     EN_get_A3 ?
	       inpA3_fifo_rv_port1__write_1 :
	       inpA3_fifo_rv_port1__read ;
  assign inpA4_fifo_rv_port1__read =
	     CAN_FIRE_RL_get_inpA4 ?
	       inpA1_fifo_rv_port0__write_1 :
	       inpA4_fifo_rv ;
  assign inpA4_fifo_rv_port1__write_1 = { 1'd1, get_A4_a } ;
  assign inpA4_fifo_rv_port2__read =
	     EN_get_A4 ?
	       inpA4_fifo_rv_port1__write_1 :
	       inpA4_fifo_rv_port1__read ;
  assign inpB1_fifo_rv_port1__read =
	     inpB1_fifo_rv[16] ?
	       inpA1_fifo_rv_port0__write_1 :
	       inpB1_fifo_rv ;
  assign inpB1_fifo_rv_port1__write_1 = { 1'd1, get_B1_b } ;
  assign inpB1_fifo_rv_port2__read =
	     EN_get_B1 ?
	       inpB1_fifo_rv_port1__write_1 :
	       inpB1_fifo_rv_port1__read ;
  assign inpC1_fifo_rv_port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpC1_fifo_rv_port1__read =
	     CAN_FIRE_RL_get_ext_inp ?
	       inpC1_fifo_rv_port0__write_1 :
	       inpC1_fifo_rv ;
  assign inpC1_fifo_rv_port1__write_1 = { 1'd1, get_C1_c } ;
  assign inpC1_fifo_rv_port2__read =
	     EN_get_C1 ?
	       inpC1_fifo_rv_port1__write_1 :
	       inpC1_fifo_rv_port1__read ;
  assign inpS1_fifo_rv_port0__write_1 =
	     { 1'd0, 1'bx /* unspecified value */  } ;
  assign inpS1_fifo_rv_port1__read =
	     CAN_FIRE_RL_get_ext_inp ?
	       inpS1_fifo_rv_port0__write_1 :
	       inpS1_fifo_rv ;
  assign inpS1_fifo_rv_port1__write_1 = { 1'd1, get_S1_or_S2_s1_or_s2 } ;
  assign inpS1_fifo_rv_port2__read =
	     EN_get_S1_or_S2 ?
	       inpS1_fifo_rv_port1__write_1 :
	       inpS1_fifo_rv_port1__read ;
  assign out_fifo_rv_port1__read =
	     EN_output_MAC ? inpC1_fifo_rv_port0__write_1 : out_fifo_rv ;
  assign out_fifo_rv_port1__write_1 = { 1'd1, mac_4_output_MAC } ;
  assign out_fifo_rv_port2__read =
	     CAN_FIRE_RL_outp ?
	       out_fifo_rv_port1__write_1 :
	       out_fifo_rv_port1__read ;

  // register inpA1_fifo_rv
  assign inpA1_fifo_rv_D_IN = inpA1_fifo_rv_port2__read ;
  assign inpA1_fifo_rv_EN = 1'b1 ;

  // register inpA2_fifo_rv
  assign inpA2_fifo_rv_D_IN = inpA2_fifo_rv_port2__read ;
  assign inpA2_fifo_rv_EN = 1'b1 ;

  // register inpA3_fifo_rv
  assign inpA3_fifo_rv_D_IN = inpA3_fifo_rv_port2__read ;
  assign inpA3_fifo_rv_EN = 1'b1 ;

  // register inpA4_fifo_rv
  assign inpA4_fifo_rv_D_IN = inpA4_fifo_rv_port2__read ;
  assign inpA4_fifo_rv_EN = 1'b1 ;

  // register inpB1_fifo_rv
  assign inpB1_fifo_rv_D_IN = inpB1_fifo_rv_port2__read ;
  assign inpB1_fifo_rv_EN = 1'b1 ;

  // register inpC1_fifo_rv
  assign inpC1_fifo_rv_D_IN = inpC1_fifo_rv_port2__read ;
  assign inpC1_fifo_rv_EN = 1'b1 ;

  // register inpS1_fifo_rv
  assign inpS1_fifo_rv_D_IN = inpS1_fifo_rv_port2__read ;
  assign inpS1_fifo_rv_EN = 1'b1 ;

  // register out_fifo_rv
  assign out_fifo_rv_D_IN = out_fifo_rv_port2__read ;
  assign out_fifo_rv_EN = 1'b1 ;

  // submodule mac_1
  assign mac_1_get_A_a = inpA1_fifo_rv[15:0] ;
  assign mac_1_get_B_b = inpB1_fifo_rv[15:0] ;
  assign mac_1_get_C_c = inpC1_fifo_rv[31:0] ;
  assign mac_1_get_S1_or_S2_s1_or_s2 = inpS1_fifo_rv[0] ;
  assign mac_1_EN_get_A = CAN_FIRE_RL_get_inpA1 ;
  assign mac_1_EN_get_B = CAN_FIRE_RL_get_ext_inpB ;
  assign mac_1_EN_get_C = CAN_FIRE_RL_get_ext_inp ;
  assign mac_1_EN_get_S1_or_S2 = CAN_FIRE_RL_get_ext_inp ;
  assign mac_1_EN_output_MAC = CAN_FIRE_RL_relay_c_1_2 ;

  // submodule mac_2
  assign mac_2_get_A_a = inpA2_fifo_rv[15:0] ;
  assign mac_2_get_B_b = mac_1_relay_B ;
  assign mac_2_get_C_c = mac_1_output_MAC ;
  assign mac_2_get_S1_or_S2_s1_or_s2 = mac_1_relay_S ;
  assign mac_2_EN_get_A = CAN_FIRE_RL_get_inpA2 ;
  assign mac_2_EN_get_B = mac_1_RDY_relay_B ;
  assign mac_2_EN_get_C = CAN_FIRE_RL_relay_c_1_2 ;
  assign mac_2_EN_get_S1_or_S2 = CAN_FIRE_RL_relay_as_1_2 ;
  assign mac_2_EN_output_MAC = CAN_FIRE_RL_relay_c_2_3 ;

  // submodule mac_3
  assign mac_3_get_A_a = inpA3_fifo_rv[15:0] ;
  assign mac_3_get_B_b = mac_2_relay_B ;
  assign mac_3_get_C_c = mac_2_output_MAC ;
  assign mac_3_get_S1_or_S2_s1_or_s2 = mac_2_relay_S ;
  assign mac_3_EN_get_A = CAN_FIRE_RL_get_inpA3 ;
  assign mac_3_EN_get_B = mac_2_RDY_relay_B ;
  assign mac_3_EN_get_C = CAN_FIRE_RL_relay_c_2_3 ;
  assign mac_3_EN_get_S1_or_S2 = CAN_FIRE_RL_relay_as_2_3 ;
  assign mac_3_EN_output_MAC = CAN_FIRE_RL_relay_c_3_4 ;

  // submodule mac_4
  assign mac_4_get_A_a = inpA4_fifo_rv[15:0] ;
  assign mac_4_get_B_b = mac_3_relay_B ;
  assign mac_4_get_C_c = mac_3_output_MAC ;
  assign mac_4_get_S1_or_S2_s1_or_s2 = mac_3_relay_S ;
  assign mac_4_EN_get_A = CAN_FIRE_RL_get_inpA4 ;
  assign mac_4_EN_get_B = mac_3_RDY_relay_B ;
  assign mac_4_EN_get_C = CAN_FIRE_RL_relay_c_3_4 ;
  assign mac_4_EN_get_S1_or_S2 = CAN_FIRE_RL_relay_as_3_4 ;
  assign mac_4_EN_output_MAC = CAN_FIRE_RL_outp ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inpA1_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpA2_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpA3_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpA4_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpB1_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpC1_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpS1_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 1'bx /* unspecified value */  };
	out_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (inpA1_fifo_rv_EN)
	  inpA1_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA1_fifo_rv_D_IN;
	if (inpA2_fifo_rv_EN)
	  inpA2_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA2_fifo_rv_D_IN;
	if (inpA3_fifo_rv_EN)
	  inpA3_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA3_fifo_rv_D_IN;
	if (inpA4_fifo_rv_EN)
	  inpA4_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA4_fifo_rv_D_IN;
	if (inpB1_fifo_rv_EN)
	  inpB1_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpB1_fifo_rv_D_IN;
	if (inpC1_fifo_rv_EN)
	  inpC1_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpC1_fifo_rv_D_IN;
	if (inpS1_fifo_rv_EN)
	  inpS1_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpS1_fifo_rv_D_IN;
	if (out_fifo_rv_EN)
	  out_fifo_rv <= `BSV_ASSIGNMENT_DELAY out_fifo_rv_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inpA1_fifo_rv = 17'h0AAAA;
    inpA2_fifo_rv = 17'h0AAAA;
    inpA3_fifo_rv = 17'h0AAAA;
    inpA4_fifo_rv = 17'h0AAAA;
    inpB1_fifo_rv = 17'h0AAAA;
    inpC1_fifo_rv = 33'h0AAAAAAAA;
    inpS1_fifo_rv = 2'h2;
    out_fifo_rv = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mksystolic_array

