//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sat Nov  2 17:52:03 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// ioutput_MAC                    O    32
// RDY_ioutput_MAC                O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_ioutput_MAC                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC_int32_pipelined(CLK,
			     RST_N,

			     get_A_a,
			     EN_get_A,
			     RDY_get_A,

			     get_B_b,
			     EN_get_B,
			     RDY_get_B,

			     get_C_c,
			     EN_get_C,
			     RDY_get_C,

			     EN_ioutput_MAC,
			     ioutput_MAC,
			     RDY_ioutput_MAC);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // actionvalue method ioutput_MAC
  input  EN_ioutput_MAC;
  output [31 : 0] ioutput_MAC;
  output RDY_ioutput_MAC;

  // signals for module outputs
  wire [31 : 0] ioutput_MAC;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_ioutput_MAC;

  // inlined wires
  wire [32 : 0] inpC_fifo_rv_port0__write_1,
		inpC_fifo_rv_port1__read,
		inpC_fifo_rv_port1__write_1,
		inpC_fifo_rv_port2__read,
		mac_out_fifo_rv_port1__read,
		mac_out_fifo_rv_port1__write_1,
		mac_out_fifo_rv_port2__read,
		mulout_fifo_rv_port1__read,
		mulout_fifo_rv_port1__write_1,
		mulout_fifo_rv_port2__read;
  wire [16 : 0] inpA_fifo_rv_port0__write_1,
		inpA_fifo_rv_port1__read,
		inpA_fifo_rv_port1__write_1,
		inpA_fifo_rv_port2__read,
		inpB_fifo_rv_port1__read,
		inpB_fifo_rv_port1__write_1,
		inpB_fifo_rv_port2__read;

  // register add_completed
  reg add_completed;
  wire add_completed_D_IN, add_completed_EN;

  // register count
  reg [3 : 0] count;
  wire [3 : 0] count_D_IN;
  wire count_EN;

  // register imac_completed
  reg imac_completed;
  wire imac_completed_D_IN, imac_completed_EN;

  // register inpA_fifo_rv
  reg [16 : 0] inpA_fifo_rv;
  wire [16 : 0] inpA_fifo_rv_D_IN;
  wire inpA_fifo_rv_EN;

  // register inpB_fifo_rv
  reg [16 : 0] inpB_fifo_rv;
  wire [16 : 0] inpB_fifo_rv_D_IN;
  wire inpB_fifo_rv_EN;

  // register inpC_fifo_rv
  reg [32 : 0] inpC_fifo_rv;
  wire [32 : 0] inpC_fifo_rv_D_IN;
  wire inpC_fifo_rv_EN;

  // register mac_out_fifo_rv
  reg [32 : 0] mac_out_fifo_rv;
  wire [32 : 0] mac_out_fifo_rv_D_IN;
  wire mac_out_fifo_rv_EN;

  // register mul_completed
  reg mul_completed;
  wire mul_completed_D_IN, mul_completed_EN;

  // register mul_init_done
  reg mul_init_done;
  wire mul_init_done_D_IN, mul_init_done_EN;

  // register mulout_fifo_rv
  reg [32 : 0] mulout_fifo_rv;
  wire [32 : 0] mulout_fifo_rv_D_IN;
  wire mulout_fifo_rv_EN;

  // register partial_store
  reg [15 : 0] partial_store;
  wire [15 : 0] partial_store_D_IN;
  wire partial_store_EN;

  // register reset_completed
  reg reset_completed;
  wire reset_completed_D_IN, reset_completed_EN;

  // register rg_A
  reg [15 : 0] rg_A;
  wire [15 : 0] rg_A_D_IN;
  wire rg_A_EN;

  // register rg_B
  reg [15 : 0] rg_B;
  wire [15 : 0] rg_B_D_IN;
  wire rg_B_EN;

  // register rg_C
  reg [31 : 0] rg_C;
  wire [31 : 0] rg_C_D_IN;
  wire rg_C_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_mul_done,
       CAN_FIRE_RL_mul_init,
       CAN_FIRE_RL_reset,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_RL_windup,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_ioutput_MAC,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_mul_done,
       WILL_FIRE_RL_mul_init,
       WILL_FIRE_RL_reset,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_RL_windup,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_ioutput_MAC;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_partial_store_write_1__VAL_1,
		MUX_rg_A_write_1__VAL_1,
		MUX_rg_A_write_1__VAL_2,
		MUX_rg_B_write_1__VAL_1,
		MUX_rg_B_write_1__VAL_2;
  wire [3 : 0] MUX_count_write_1__VAL_2;
  wire MUX_add_completed_write_1__SEL_1, MUX_partial_store_write_1__SEL_1;

  // remaining internal signals
  wire [31 : 0] IF_mulout_fifo_rv_BITS_31_TO_0_BIT_0_XOR_rg_C__ETC__q6,
		mulout_fifo_rv_BITS_31_TO_0__q3;
  wire [30 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d530;
  wire [28 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d529;
  wire [26 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d528;
  wire [24 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d527;
  wire [22 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d526;
  wire [20 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d525;
  wire [18 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d524;
  wire [16 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d523;
  wire [15 : 0] IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2,
		IF_partial_store_BIT_0_XOR_IF_INV_INV_rg_A_BIT_ETC__q4,
		IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q5,
		INV_rg_A__q1,
		x__h1541,
		x__h8010;
  wire [14 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d522;
  wire [13 : 0] partial_store_1_BIT_13_1_XOR_INV_rg_A_3_4_BIT__ETC___d160,
		partial_store_1_BIT_13_1_XOR_rg_A_3_BIT_13_67__ETC___d260;
  wire [12 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d521;
  wire [11 : 0] partial_store_1_BIT_11_9_XOR_INV_rg_A_3_4_BIT__ETC___d159,
		partial_store_1_BIT_11_9_XOR_rg_A_3_BIT_11_73__ETC___d259;
  wire [10 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d520;
  wire [9 : 0] partial_store_1_BIT_9_7_XOR_INV_rg_A_3_4_BIT_9_ETC___d158,
	       partial_store_1_BIT_9_7_XOR_rg_A_3_BIT_9_79_81_ETC___d258;
  wire [8 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d519;
  wire [7 : 0] inpA_fifo_rv_BITS_7_TO_0__q7,
	       inpB_fifo_rv_BITS_7_TO_0__q8,
	       partial_store_1_BIT_7_5_XOR_INV_rg_A_3_4_BIT_7_ETC___d157,
	       partial_store_1_BIT_7_5_XOR_rg_A_3_BIT_7_85_87_ETC___d257;
  wire [6 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d518;
  wire [5 : 0] partial_store_1_BIT_5_3_XOR_INV_rg_A_3_4_BIT_5_ETC___d156,
	       partial_store_1_BIT_5_3_XOR_rg_A_3_BIT_5_91_93_ETC___d256;
  wire [4 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d517;
  wire [3 : 0] partial_store_1_BIT_3_1_XOR_INV_rg_A_3_4_BIT_3_ETC___d155,
	       partial_store_1_BIT_3_1_XOR_rg_A_3_BIT_3_97_99_ETC___d255;
  wire [2 : 0] IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d516;
  wire [1 : 0] partial_store_1_BIT_1_9_XOR_INV_rg_A_3_4_BIT_1_ETC___d154,
	       partial_store_1_BIT_1_9_XOR_rg_A_3_BIT_1_03_05_ETC___d254;
  wire x__h10011,
       x__h10058,
       x__h10203,
       x__h10250,
       x__h10395,
       x__h10442,
       x__h10587,
       x__h10634,
       x__h10779,
       x__h10826,
       x__h10971,
       x__h11018,
       x__h11104,
       x__h11163,
       x__h11210,
       x__h12637,
       x__h12766,
       x__h12825,
       x__h12958,
       x__h13017,
       x__h13150,
       x__h13209,
       x__h13342,
       x__h13401,
       x__h13534,
       x__h13593,
       x__h13726,
       x__h13785,
       x__h13918,
       x__h13977,
       x__h14110,
       x__h14169,
       x__h14302,
       x__h14361,
       x__h14494,
       x__h14553,
       x__h14686,
       x__h14745,
       x__h14878,
       x__h14937,
       x__h15070,
       x__h15129,
       x__h15262,
       x__h15321,
       x__h15454,
       x__h15513,
       x__h15646,
       x__h15705,
       x__h15838,
       x__h15897,
       x__h16030,
       x__h16089,
       x__h16222,
       x__h16281,
       x__h16414,
       x__h16473,
       x__h16606,
       x__h16665,
       x__h16798,
       x__h16857,
       x__h16990,
       x__h17049,
       x__h17182,
       x__h17241,
       x__h17374,
       x__h17433,
       x__h17566,
       x__h17625,
       x__h17758,
       x__h17817,
       x__h17950,
       x__h18009,
       x__h18142,
       x__h18201,
       x__h18334,
       x__h18393,
       x__h5229,
       x__h5357,
       x__h5415,
       x__h5546,
       x__h5604,
       x__h5735,
       x__h5793,
       x__h5924,
       x__h5982,
       x__h6113,
       x__h6171,
       x__h6302,
       x__h6360,
       x__h6491,
       x__h6549,
       x__h6680,
       x__h6738,
       x__h6869,
       x__h6927,
       x__h7058,
       x__h7116,
       x__h7247,
       x__h7305,
       x__h7436,
       x__h7494,
       x__h7625,
       x__h7683,
       x__h7814,
       x__h7872,
       x__h8667,
       x__h8714,
       x__h8859,
       x__h8906,
       x__h9051,
       x__h9098,
       x__h9243,
       x__h9290,
       x__h9435,
       x__h9482,
       x__h9627,
       x__h9674,
       x__h9819,
       x__h9866,
       y__h10012,
       y__h10145,
       y__h10204,
       y__h10337,
       y__h10396,
       y__h10529,
       y__h10588,
       y__h10721,
       y__h10780,
       y__h10913,
       y__h10972,
       y__h11105,
       y__h11164,
       y__h12638,
       y__h12767,
       y__h12826,
       y__h12959,
       y__h13018,
       y__h13151,
       y__h13210,
       y__h13343,
       y__h13402,
       y__h13535,
       y__h13594,
       y__h13727,
       y__h13786,
       y__h13919,
       y__h13978,
       y__h14111,
       y__h14170,
       y__h14303,
       y__h14362,
       y__h14495,
       y__h14554,
       y__h14687,
       y__h14746,
       y__h14879,
       y__h14938,
       y__h15071,
       y__h15130,
       y__h15263,
       y__h15322,
       y__h15455,
       y__h15514,
       y__h15647,
       y__h15706,
       y__h15839,
       y__h15898,
       y__h16031,
       y__h16090,
       y__h16223,
       y__h16282,
       y__h16415,
       y__h16474,
       y__h16607,
       y__h16666,
       y__h16799,
       y__h16858,
       y__h16991,
       y__h17050,
       y__h17183,
       y__h17242,
       y__h17375,
       y__h17434,
       y__h17567,
       y__h17626,
       y__h17759,
       y__h17818,
       y__h17951,
       y__h18010,
       y__h18143,
       y__h18202,
       y__h18335,
       y__h18394,
       y__h2560,
       y__h2749,
       y__h2938,
       y__h3127,
       y__h3316,
       y__h3505,
       y__h3694,
       y__h3883,
       y__h4072,
       y__h4261,
       y__h4450,
       y__h4639,
       y__h4828,
       y__h5017,
       y__h5230,
       y__h5232,
       y__h5358,
       y__h5360,
       y__h5416,
       y__h5547,
       y__h5549,
       y__h5605,
       y__h5736,
       y__h5738,
       y__h5794,
       y__h5925,
       y__h5927,
       y__h5983,
       y__h6114,
       y__h6116,
       y__h6172,
       y__h6303,
       y__h6305,
       y__h6361,
       y__h6492,
       y__h6494,
       y__h6550,
       y__h6681,
       y__h6683,
       y__h6739,
       y__h6870,
       y__h6872,
       y__h6928,
       y__h7059,
       y__h7061,
       y__h7117,
       y__h7248,
       y__h7250,
       y__h7306,
       y__h7437,
       y__h7439,
       y__h7495,
       y__h7626,
       y__h7628,
       y__h7684,
       y__h7815,
       y__h7817,
       y__h7873,
       y__h8609,
       y__h8668,
       y__h8715,
       y__h8801,
       y__h8860,
       y__h8993,
       y__h9052,
       y__h9185,
       y__h9244,
       y__h9377,
       y__h9436,
       y__h9569,
       y__h9628,
       y__h9761,
       y__h9820,
       y__h9953;

  // action method get_A
  assign RDY_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = !inpC_fifo_rv_port1__read[32] ;
  assign CAN_FIRE_get_C = !inpC_fifo_rv_port1__read[32] ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // actionvalue method ioutput_MAC
  assign ioutput_MAC = mac_out_fifo_rv[31:0] ;
  assign RDY_ioutput_MAC = mac_out_fifo_rv[32] && imac_completed ;
  assign CAN_FIRE_ioutput_MAC = mac_out_fifo_rv[32] && imac_completed ;
  assign WILL_FIRE_ioutput_MAC = EN_ioutput_MAC ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     count != 4'd0 && reset_completed && mul_init_done ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     mulout_fifo_rv[32] && !mac_out_fifo_rv_port1__read[32] &&
	     mul_completed &&
	     !add_completed &&
	     !imac_completed ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_mul_done
  assign CAN_FIRE_RL_mul_done =
	     !mulout_fifo_rv_port1__read[32] && count == 4'd0 &&
	     !mul_completed &&
	     !add_completed &&
	     !imac_completed ;
  assign WILL_FIRE_RL_mul_done = CAN_FIRE_RL_mul_done ;

  // rule RL_windup
  assign CAN_FIRE_RL_windup = add_completed && !imac_completed ;
  assign WILL_FIRE_RL_windup = CAN_FIRE_RL_windup ;

  // rule RL_mul_init
  assign CAN_FIRE_RL_mul_init =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && inpC_fifo_rv[32] &&
	     !mul_init_done ;
  assign WILL_FIRE_RL_mul_init = CAN_FIRE_RL_mul_init ;

  // rule RL_reset
  assign CAN_FIRE_RL_reset = imac_completed ;
  assign WILL_FIRE_RL_reset = imac_completed ;

  // inputs to muxes for submodule ports
  assign MUX_add_completed_write_1__SEL_1 =
	     imac_completed || WILL_FIRE_RL_windup ;
  assign MUX_partial_store_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_multiply && rg_B[0] ;
  assign MUX_count_write_1__VAL_2 = count - 4'd1 ;
  assign MUX_partial_store_write_1__VAL_1 =
	     (count == 4'd1) ? x__h1541 : x__h8010 ;
  assign MUX_rg_A_write_1__VAL_1 = { rg_A[14:0], 1'd0 } ;
  assign MUX_rg_A_write_1__VAL_2 =
	     { {8{inpA_fifo_rv_BITS_7_TO_0__q7[7]}},
	       inpA_fifo_rv_BITS_7_TO_0__q7 } ;
  assign MUX_rg_B_write_1__VAL_1 = { 1'd0, rg_B[15:1] } ;
  assign MUX_rg_B_write_1__VAL_2 =
	     { {8{inpB_fifo_rv_BITS_7_TO_0__q8[7]}},
	       inpB_fifo_rv_BITS_7_TO_0__q8 } ;

  // inlined wires
  assign inpA_fifo_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpA_fifo_rv_port1__read =
	     CAN_FIRE_RL_mul_init ?
	       inpA_fifo_rv_port0__write_1 :
	       inpA_fifo_rv ;
  assign inpA_fifo_rv_port1__write_1 = { 1'd1, get_A_a } ;
  assign inpA_fifo_rv_port2__read =
	     EN_get_A ?
	       inpA_fifo_rv_port1__write_1 :
	       inpA_fifo_rv_port1__read ;
  assign inpB_fifo_rv_port1__read =
	     CAN_FIRE_RL_mul_init ?
	       inpA_fifo_rv_port0__write_1 :
	       inpB_fifo_rv ;
  assign inpB_fifo_rv_port1__write_1 = { 1'd1, get_B_b } ;
  assign inpB_fifo_rv_port2__read =
	     EN_get_B ?
	       inpB_fifo_rv_port1__write_1 :
	       inpB_fifo_rv_port1__read ;
  assign inpC_fifo_rv_port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpC_fifo_rv_port1__read =
	     CAN_FIRE_RL_mul_init ?
	       inpC_fifo_rv_port0__write_1 :
	       inpC_fifo_rv ;
  assign inpC_fifo_rv_port1__write_1 = { 1'd1, get_C_c } ;
  assign inpC_fifo_rv_port2__read =
	     EN_get_C ?
	       inpC_fifo_rv_port1__write_1 :
	       inpC_fifo_rv_port1__read ;
  assign mulout_fifo_rv_port1__read =
	     CAN_FIRE_RL_add ? inpC_fifo_rv_port0__write_1 : mulout_fifo_rv ;
  assign mulout_fifo_rv_port1__write_1 =
	     { 1'd1, { {16{partial_store[15]}}, partial_store } } ;
  assign mulout_fifo_rv_port2__read =
	     CAN_FIRE_RL_mul_done ?
	       mulout_fifo_rv_port1__write_1 :
	       mulout_fifo_rv_port1__read ;
  assign mac_out_fifo_rv_port1__read =
	     EN_ioutput_MAC ? inpC_fifo_rv_port0__write_1 : mac_out_fifo_rv ;
  assign mac_out_fifo_rv_port1__write_1 =
	     { 1'd1,
	       x__h18334 ^ y__h18335,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d530 } ;
  assign mac_out_fifo_rv_port2__read =
	     CAN_FIRE_RL_add ?
	       mac_out_fifo_rv_port1__write_1 :
	       mac_out_fifo_rv_port1__read ;

  // register add_completed
  assign add_completed_D_IN = !MUX_add_completed_write_1__SEL_1 ;
  assign add_completed_EN =
	     imac_completed || WILL_FIRE_RL_windup || WILL_FIRE_RL_add ;

  // register count
  assign count_D_IN = WILL_FIRE_RL_windup ? 4'd9 : MUX_count_write_1__VAL_2 ;
  assign count_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_windup ;

  // register imac_completed
  assign imac_completed_D_IN = !imac_completed ;
  assign imac_completed_EN = MUX_add_completed_write_1__SEL_1 ;

  // register inpA_fifo_rv
  assign inpA_fifo_rv_D_IN = inpA_fifo_rv_port2__read ;
  assign inpA_fifo_rv_EN = 1'b1 ;

  // register inpB_fifo_rv
  assign inpB_fifo_rv_D_IN = inpB_fifo_rv_port2__read ;
  assign inpB_fifo_rv_EN = 1'b1 ;

  // register inpC_fifo_rv
  assign inpC_fifo_rv_D_IN = inpC_fifo_rv_port2__read ;
  assign inpC_fifo_rv_EN = 1'b1 ;

  // register mac_out_fifo_rv
  assign mac_out_fifo_rv_D_IN = mac_out_fifo_rv_port2__read ;
  assign mac_out_fifo_rv_EN = 1'b1 ;

  // register mul_completed
  assign mul_completed_D_IN = !WILL_FIRE_RL_add ;
  assign mul_completed_EN = WILL_FIRE_RL_add || WILL_FIRE_RL_mul_done ;

  // register mul_init_done
  assign mul_init_done_D_IN = !imac_completed ;
  assign mul_init_done_EN = imac_completed || WILL_FIRE_RL_mul_init ;

  // register mulout_fifo_rv
  assign mulout_fifo_rv_D_IN = mulout_fifo_rv_port2__read ;
  assign mulout_fifo_rv_EN = 1'b1 ;

  // register partial_store
  assign partial_store_D_IN =
	     MUX_partial_store_write_1__SEL_1 ?
	       MUX_partial_store_write_1__VAL_1 :
	       16'd0 ;
  assign partial_store_EN =
	     WILL_FIRE_RL_rl_multiply && rg_B[0] || WILL_FIRE_RL_mul_done ;

  // register reset_completed
  assign reset_completed_D_IN = !WILL_FIRE_RL_mul_done ;
  assign reset_completed_EN = WILL_FIRE_RL_mul_done || imac_completed ;

  // register rg_A
  assign rg_A_D_IN =
	     WILL_FIRE_RL_rl_multiply ?
	       MUX_rg_A_write_1__VAL_1 :
	       MUX_rg_A_write_1__VAL_2 ;
  assign rg_A_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_mul_init ;

  // register rg_B
  assign rg_B_D_IN =
	     WILL_FIRE_RL_rl_multiply ?
	       MUX_rg_B_write_1__VAL_1 :
	       MUX_rg_B_write_1__VAL_2 ;
  assign rg_B_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_mul_init ;

  // register rg_C
  assign rg_C_D_IN = inpC_fifo_rv[31:0] ;
  assign rg_C_EN = CAN_FIRE_RL_mul_init ;

  // remaining internal signals
  assign IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_rg_A__q1[0]) ? 16'd1 : 16'd0 ;
  assign IF_mulout_fifo_rv_BITS_31_TO_0_BIT_0_XOR_rg_C__ETC__q6 =
	     (mulout_fifo_rv_BITS_31_TO_0__q3[0] ^ rg_C[0]) ? 32'd1 : 32'd0 ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d516 =
	     { x__h12766 ^ y__h12767,
	       x__h12637 ^ y__h12638,
	       IF_mulout_fifo_rv_BITS_31_TO_0_BIT_0_XOR_rg_C__ETC__q6[0] } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d517 =
	     { x__h13150 ^ y__h13151,
	       x__h12958 ^ y__h12959,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d516 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d518 =
	     { x__h13534 ^ y__h13535,
	       x__h13342 ^ y__h13343,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d517 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d519 =
	     { x__h13918 ^ y__h13919,
	       x__h13726 ^ y__h13727,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d518 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d520 =
	     { x__h14302 ^ y__h14303,
	       x__h14110 ^ y__h14111,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d519 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d521 =
	     { x__h14686 ^ y__h14687,
	       x__h14494 ^ y__h14495,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d520 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d522 =
	     { x__h15070 ^ y__h15071,
	       x__h14878 ^ y__h14879,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d521 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d523 =
	     { x__h15454 ^ y__h15455,
	       x__h15262 ^ y__h15263,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d522 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d524 =
	     { x__h15838 ^ y__h15839,
	       x__h15646 ^ y__h15647,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d523 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d525 =
	     { x__h16222 ^ y__h16223,
	       x__h16030 ^ y__h16031,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d524 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d526 =
	     { x__h16606 ^ y__h16607,
	       x__h16414 ^ y__h16415,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d525 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d527 =
	     { x__h16990 ^ y__h16991,
	       x__h16798 ^ y__h16799,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d526 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d528 =
	     { x__h17374 ^ y__h17375,
	       x__h17182 ^ y__h17183,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d527 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d529 =
	     { x__h17758 ^ y__h17759,
	       x__h17566 ^ y__h17567,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d528 } ;
  assign IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d530 =
	     { x__h18142 ^ y__h18143,
	       x__h17950 ^ y__h17951,
	       IF_mulout_fifo_rv_port0__read__83_BIT_32_84_TH_ETC___d529 } ;
  assign IF_partial_store_BIT_0_XOR_IF_INV_INV_rg_A_BIT_ETC__q4 =
	     (partial_store[0] ^ IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       16'd1 :
	       16'd0 ;
  assign IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q5 =
	     (partial_store[0] ^ rg_A[0]) ? 16'd1 : 16'd0 ;
  assign INV_rg_A__q1 = ~rg_A ;
  assign inpA_fifo_rv_BITS_7_TO_0__q7 = inpA_fifo_rv[7:0] ;
  assign inpB_fifo_rv_BITS_7_TO_0__q8 = inpB_fifo_rv[7:0] ;
  assign mulout_fifo_rv_BITS_31_TO_0__q3 = mulout_fifo_rv[31:0] ;
  assign partial_store_1_BIT_11_9_XOR_INV_rg_A_3_4_BIT__ETC___d159 =
	     { x__h7058 ^ y__h7059,
	       x__h6869 ^ y__h6870,
	       partial_store_1_BIT_9_7_XOR_INV_rg_A_3_4_BIT_9_ETC___d158 } ;
  assign partial_store_1_BIT_11_9_XOR_rg_A_3_BIT_11_73__ETC___d259 =
	     { x__h10634 ^ y__h10337,
	       x__h10442 ^ y__h10145,
	       partial_store_1_BIT_9_7_XOR_rg_A_3_BIT_9_79_81_ETC___d258 } ;
  assign partial_store_1_BIT_13_1_XOR_INV_rg_A_3_4_BIT__ETC___d160 =
	     { x__h7436 ^ y__h7437,
	       x__h7247 ^ y__h7248,
	       partial_store_1_BIT_11_9_XOR_INV_rg_A_3_4_BIT__ETC___d159 } ;
  assign partial_store_1_BIT_13_1_XOR_rg_A_3_BIT_13_67__ETC___d260 =
	     { x__h11018 ^ y__h10721,
	       x__h10826 ^ y__h10529,
	       partial_store_1_BIT_11_9_XOR_rg_A_3_BIT_11_73__ETC___d259 } ;
  assign partial_store_1_BIT_1_9_XOR_INV_rg_A_3_4_BIT_1_ETC___d154 =
	     { x__h5229 ^ y__h5230,
	       IF_partial_store_BIT_0_XOR_IF_INV_INV_rg_A_BIT_ETC__q4[0] } ;
  assign partial_store_1_BIT_1_9_XOR_rg_A_3_BIT_1_03_05_ETC___d254 =
	     { x__h8714 ^ y__h8715,
	       IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q5[0] } ;
  assign partial_store_1_BIT_3_1_XOR_INV_rg_A_3_4_BIT_3_ETC___d155 =
	     { x__h5546 ^ y__h5547,
	       x__h5357 ^ y__h5358,
	       partial_store_1_BIT_1_9_XOR_INV_rg_A_3_4_BIT_1_ETC___d154 } ;
  assign partial_store_1_BIT_3_1_XOR_rg_A_3_BIT_3_97_99_ETC___d255 =
	     { x__h9098 ^ y__h8801,
	       x__h8906 ^ y__h8609,
	       partial_store_1_BIT_1_9_XOR_rg_A_3_BIT_1_03_05_ETC___d254 } ;
  assign partial_store_1_BIT_5_3_XOR_INV_rg_A_3_4_BIT_5_ETC___d156 =
	     { x__h5924 ^ y__h5925,
	       x__h5735 ^ y__h5736,
	       partial_store_1_BIT_3_1_XOR_INV_rg_A_3_4_BIT_3_ETC___d155 } ;
  assign partial_store_1_BIT_5_3_XOR_rg_A_3_BIT_5_91_93_ETC___d256 =
	     { x__h9482 ^ y__h9185,
	       x__h9290 ^ y__h8993,
	       partial_store_1_BIT_3_1_XOR_rg_A_3_BIT_3_97_99_ETC___d255 } ;
  assign partial_store_1_BIT_7_5_XOR_INV_rg_A_3_4_BIT_7_ETC___d157 =
	     { x__h6302 ^ y__h6303,
	       x__h6113 ^ y__h6114,
	       partial_store_1_BIT_5_3_XOR_INV_rg_A_3_4_BIT_5_ETC___d156 } ;
  assign partial_store_1_BIT_7_5_XOR_rg_A_3_BIT_7_85_87_ETC___d257 =
	     { x__h9866 ^ y__h9569,
	       x__h9674 ^ y__h9377,
	       partial_store_1_BIT_5_3_XOR_rg_A_3_BIT_5_91_93_ETC___d256 } ;
  assign partial_store_1_BIT_9_7_XOR_INV_rg_A_3_4_BIT_9_ETC___d158 =
	     { x__h6680 ^ y__h6681,
	       x__h6491 ^ y__h6492,
	       partial_store_1_BIT_7_5_XOR_INV_rg_A_3_4_BIT_7_ETC___d157 } ;
  assign partial_store_1_BIT_9_7_XOR_rg_A_3_BIT_9_79_81_ETC___d258 =
	     { x__h10250 ^ y__h9953,
	       x__h10058 ^ y__h9761,
	       partial_store_1_BIT_7_5_XOR_rg_A_3_BIT_7_85_87_ETC___d257 } ;
  assign x__h10011 = partial_store[8] & rg_A[8] ;
  assign x__h10058 = partial_store[8] ^ rg_A[8] ;
  assign x__h10203 = partial_store[9] & rg_A[9] ;
  assign x__h10250 = partial_store[9] ^ rg_A[9] ;
  assign x__h10395 = partial_store[10] & rg_A[10] ;
  assign x__h10442 = partial_store[10] ^ rg_A[10] ;
  assign x__h10587 = partial_store[11] & rg_A[11] ;
  assign x__h10634 = partial_store[11] ^ rg_A[11] ;
  assign x__h10779 = partial_store[12] & rg_A[12] ;
  assign x__h10826 = partial_store[12] ^ rg_A[12] ;
  assign x__h10971 = partial_store[13] & rg_A[13] ;
  assign x__h11018 = partial_store[13] ^ rg_A[13] ;
  assign x__h11104 = partial_store[15] ^ rg_A[15] ;
  assign x__h11163 = partial_store[14] & rg_A[14] ;
  assign x__h11210 = partial_store[14] ^ rg_A[14] ;
  assign x__h12637 = mulout_fifo_rv_BITS_31_TO_0__q3[1] ^ rg_C[1] ;
  assign x__h12766 = mulout_fifo_rv_BITS_31_TO_0__q3[2] ^ rg_C[2] ;
  assign x__h12825 = mulout_fifo_rv_BITS_31_TO_0__q3[1] & rg_C[1] ;
  assign x__h12958 = mulout_fifo_rv_BITS_31_TO_0__q3[3] ^ rg_C[3] ;
  assign x__h13017 = mulout_fifo_rv_BITS_31_TO_0__q3[2] & rg_C[2] ;
  assign x__h13150 = mulout_fifo_rv_BITS_31_TO_0__q3[4] ^ rg_C[4] ;
  assign x__h13209 = mulout_fifo_rv_BITS_31_TO_0__q3[3] & rg_C[3] ;
  assign x__h13342 = mulout_fifo_rv_BITS_31_TO_0__q3[5] ^ rg_C[5] ;
  assign x__h13401 = mulout_fifo_rv_BITS_31_TO_0__q3[4] & rg_C[4] ;
  assign x__h13534 = mulout_fifo_rv_BITS_31_TO_0__q3[6] ^ rg_C[6] ;
  assign x__h13593 = mulout_fifo_rv_BITS_31_TO_0__q3[5] & rg_C[5] ;
  assign x__h13726 = mulout_fifo_rv_BITS_31_TO_0__q3[7] ^ rg_C[7] ;
  assign x__h13785 = mulout_fifo_rv_BITS_31_TO_0__q3[6] & rg_C[6] ;
  assign x__h13918 = mulout_fifo_rv_BITS_31_TO_0__q3[8] ^ rg_C[8] ;
  assign x__h13977 = mulout_fifo_rv_BITS_31_TO_0__q3[7] & rg_C[7] ;
  assign x__h14110 = mulout_fifo_rv_BITS_31_TO_0__q3[9] ^ rg_C[9] ;
  assign x__h14169 = mulout_fifo_rv_BITS_31_TO_0__q3[8] & rg_C[8] ;
  assign x__h14302 = mulout_fifo_rv_BITS_31_TO_0__q3[10] ^ rg_C[10] ;
  assign x__h14361 = mulout_fifo_rv_BITS_31_TO_0__q3[9] & rg_C[9] ;
  assign x__h14494 = mulout_fifo_rv_BITS_31_TO_0__q3[11] ^ rg_C[11] ;
  assign x__h14553 = mulout_fifo_rv_BITS_31_TO_0__q3[10] & rg_C[10] ;
  assign x__h14686 = mulout_fifo_rv_BITS_31_TO_0__q3[12] ^ rg_C[12] ;
  assign x__h14745 = mulout_fifo_rv_BITS_31_TO_0__q3[11] & rg_C[11] ;
  assign x__h14878 = mulout_fifo_rv_BITS_31_TO_0__q3[13] ^ rg_C[13] ;
  assign x__h14937 = mulout_fifo_rv_BITS_31_TO_0__q3[12] & rg_C[12] ;
  assign x__h15070 = mulout_fifo_rv_BITS_31_TO_0__q3[14] ^ rg_C[14] ;
  assign x__h15129 = mulout_fifo_rv_BITS_31_TO_0__q3[13] & rg_C[13] ;
  assign x__h15262 = mulout_fifo_rv_BITS_31_TO_0__q3[15] ^ rg_C[15] ;
  assign x__h15321 = mulout_fifo_rv_BITS_31_TO_0__q3[14] & rg_C[14] ;
  assign x__h1541 =
	     { x__h7814 ^ y__h7815,
	       x__h7625 ^ y__h7626,
	       partial_store_1_BIT_13_1_XOR_INV_rg_A_3_4_BIT__ETC___d160 } ;
  assign x__h15454 = mulout_fifo_rv_BITS_31_TO_0__q3[16] ^ rg_C[16] ;
  assign x__h15513 = mulout_fifo_rv_BITS_31_TO_0__q3[15] & rg_C[15] ;
  assign x__h15646 = mulout_fifo_rv_BITS_31_TO_0__q3[17] ^ rg_C[17] ;
  assign x__h15705 = mulout_fifo_rv_BITS_31_TO_0__q3[16] & rg_C[16] ;
  assign x__h15838 = mulout_fifo_rv_BITS_31_TO_0__q3[18] ^ rg_C[18] ;
  assign x__h15897 = mulout_fifo_rv_BITS_31_TO_0__q3[17] & rg_C[17] ;
  assign x__h16030 = mulout_fifo_rv_BITS_31_TO_0__q3[19] ^ rg_C[19] ;
  assign x__h16089 = mulout_fifo_rv_BITS_31_TO_0__q3[18] & rg_C[18] ;
  assign x__h16222 = mulout_fifo_rv_BITS_31_TO_0__q3[20] ^ rg_C[20] ;
  assign x__h16281 = mulout_fifo_rv_BITS_31_TO_0__q3[19] & rg_C[19] ;
  assign x__h16414 = mulout_fifo_rv_BITS_31_TO_0__q3[21] ^ rg_C[21] ;
  assign x__h16473 = mulout_fifo_rv_BITS_31_TO_0__q3[20] & rg_C[20] ;
  assign x__h16606 = mulout_fifo_rv_BITS_31_TO_0__q3[22] ^ rg_C[22] ;
  assign x__h16665 = mulout_fifo_rv_BITS_31_TO_0__q3[21] & rg_C[21] ;
  assign x__h16798 = mulout_fifo_rv_BITS_31_TO_0__q3[23] ^ rg_C[23] ;
  assign x__h16857 = mulout_fifo_rv_BITS_31_TO_0__q3[22] & rg_C[22] ;
  assign x__h16990 = mulout_fifo_rv_BITS_31_TO_0__q3[24] ^ rg_C[24] ;
  assign x__h17049 = mulout_fifo_rv_BITS_31_TO_0__q3[23] & rg_C[23] ;
  assign x__h17182 = mulout_fifo_rv_BITS_31_TO_0__q3[25] ^ rg_C[25] ;
  assign x__h17241 = mulout_fifo_rv_BITS_31_TO_0__q3[24] & rg_C[24] ;
  assign x__h17374 = mulout_fifo_rv_BITS_31_TO_0__q3[26] ^ rg_C[26] ;
  assign x__h17433 = mulout_fifo_rv_BITS_31_TO_0__q3[25] & rg_C[25] ;
  assign x__h17566 = mulout_fifo_rv_BITS_31_TO_0__q3[27] ^ rg_C[27] ;
  assign x__h17625 = mulout_fifo_rv_BITS_31_TO_0__q3[26] & rg_C[26] ;
  assign x__h17758 = mulout_fifo_rv_BITS_31_TO_0__q3[28] ^ rg_C[28] ;
  assign x__h17817 = mulout_fifo_rv_BITS_31_TO_0__q3[27] & rg_C[27] ;
  assign x__h17950 = mulout_fifo_rv_BITS_31_TO_0__q3[29] ^ rg_C[29] ;
  assign x__h18009 = mulout_fifo_rv_BITS_31_TO_0__q3[28] & rg_C[28] ;
  assign x__h18142 = mulout_fifo_rv_BITS_31_TO_0__q3[30] ^ rg_C[30] ;
  assign x__h18201 = mulout_fifo_rv_BITS_31_TO_0__q3[29] & rg_C[29] ;
  assign x__h18334 = mulout_fifo_rv_BITS_31_TO_0__q3[31] ^ rg_C[31] ;
  assign x__h18393 = mulout_fifo_rv_BITS_31_TO_0__q3[30] & rg_C[30] ;
  assign x__h5229 = partial_store[1] ^ y__h5232 ;
  assign x__h5357 = partial_store[2] ^ y__h5360 ;
  assign x__h5415 = partial_store[1] & y__h5232 ;
  assign x__h5546 = partial_store[3] ^ y__h5549 ;
  assign x__h5604 = partial_store[2] & y__h5360 ;
  assign x__h5735 = partial_store[4] ^ y__h5738 ;
  assign x__h5793 = partial_store[3] & y__h5549 ;
  assign x__h5924 = partial_store[5] ^ y__h5927 ;
  assign x__h5982 = partial_store[4] & y__h5738 ;
  assign x__h6113 = partial_store[6] ^ y__h6116 ;
  assign x__h6171 = partial_store[5] & y__h5927 ;
  assign x__h6302 = partial_store[7] ^ y__h6305 ;
  assign x__h6360 = partial_store[6] & y__h6116 ;
  assign x__h6491 = partial_store[8] ^ y__h6494 ;
  assign x__h6549 = partial_store[7] & y__h6305 ;
  assign x__h6680 = partial_store[9] ^ y__h6683 ;
  assign x__h6738 = partial_store[8] & y__h6494 ;
  assign x__h6869 = partial_store[10] ^ y__h6872 ;
  assign x__h6927 = partial_store[9] & y__h6683 ;
  assign x__h7058 = partial_store[11] ^ y__h7061 ;
  assign x__h7116 = partial_store[10] & y__h6872 ;
  assign x__h7247 = partial_store[12] ^ y__h7250 ;
  assign x__h7305 = partial_store[11] & y__h7061 ;
  assign x__h7436 = partial_store[13] ^ y__h7439 ;
  assign x__h7494 = partial_store[12] & y__h7250 ;
  assign x__h7625 = partial_store[14] ^ y__h7628 ;
  assign x__h7683 = partial_store[13] & y__h7439 ;
  assign x__h7814 = partial_store[15] ^ y__h7817 ;
  assign x__h7872 = partial_store[14] & y__h7628 ;
  assign x__h8010 =
	     { x__h11104 ^ y__h11105,
	       x__h11210 ^ y__h10913,
	       partial_store_1_BIT_13_1_XOR_rg_A_3_BIT_13_67__ETC___d260 } ;
  assign x__h8667 = partial_store[1] & rg_A[1] ;
  assign x__h8714 = partial_store[1] ^ rg_A[1] ;
  assign x__h8859 = partial_store[2] & rg_A[2] ;
  assign x__h8906 = partial_store[2] ^ rg_A[2] ;
  assign x__h9051 = partial_store[3] & rg_A[3] ;
  assign x__h9098 = partial_store[3] ^ rg_A[3] ;
  assign x__h9243 = partial_store[4] & rg_A[4] ;
  assign x__h9290 = partial_store[4] ^ rg_A[4] ;
  assign x__h9435 = partial_store[5] & rg_A[5] ;
  assign x__h9482 = partial_store[5] ^ rg_A[5] ;
  assign x__h9627 = partial_store[6] & rg_A[6] ;
  assign x__h9674 = partial_store[6] ^ rg_A[6] ;
  assign x__h9819 = partial_store[7] & rg_A[7] ;
  assign x__h9866 = partial_store[7] ^ rg_A[7] ;
  assign y__h10012 = x__h10058 & y__h9761 ;
  assign y__h10145 = x__h10203 | y__h10204 ;
  assign y__h10204 = x__h10250 & y__h9953 ;
  assign y__h10337 = x__h10395 | y__h10396 ;
  assign y__h10396 = x__h10442 & y__h10145 ;
  assign y__h10529 = x__h10587 | y__h10588 ;
  assign y__h10588 = x__h10634 & y__h10337 ;
  assign y__h10721 = x__h10779 | y__h10780 ;
  assign y__h10780 = x__h10826 & y__h10529 ;
  assign y__h10913 = x__h10971 | y__h10972 ;
  assign y__h10972 = x__h11018 & y__h10721 ;
  assign y__h11105 = x__h11163 | y__h11164 ;
  assign y__h11164 = x__h11210 & y__h10913 ;
  assign y__h12638 = mulout_fifo_rv_BITS_31_TO_0__q3[0] & rg_C[0] ;
  assign y__h12767 = x__h12825 | y__h12826 ;
  assign y__h12826 = x__h12637 & y__h12638 ;
  assign y__h12959 = x__h13017 | y__h13018 ;
  assign y__h13018 = x__h12766 & y__h12767 ;
  assign y__h13151 = x__h13209 | y__h13210 ;
  assign y__h13210 = x__h12958 & y__h12959 ;
  assign y__h13343 = x__h13401 | y__h13402 ;
  assign y__h13402 = x__h13150 & y__h13151 ;
  assign y__h13535 = x__h13593 | y__h13594 ;
  assign y__h13594 = x__h13342 & y__h13343 ;
  assign y__h13727 = x__h13785 | y__h13786 ;
  assign y__h13786 = x__h13534 & y__h13535 ;
  assign y__h13919 = x__h13977 | y__h13978 ;
  assign y__h13978 = x__h13726 & y__h13727 ;
  assign y__h14111 = x__h14169 | y__h14170 ;
  assign y__h14170 = x__h13918 & y__h13919 ;
  assign y__h14303 = x__h14361 | y__h14362 ;
  assign y__h14362 = x__h14110 & y__h14111 ;
  assign y__h14495 = x__h14553 | y__h14554 ;
  assign y__h14554 = x__h14302 & y__h14303 ;
  assign y__h14687 = x__h14745 | y__h14746 ;
  assign y__h14746 = x__h14494 & y__h14495 ;
  assign y__h14879 = x__h14937 | y__h14938 ;
  assign y__h14938 = x__h14686 & y__h14687 ;
  assign y__h15071 = x__h15129 | y__h15130 ;
  assign y__h15130 = x__h14878 & y__h14879 ;
  assign y__h15263 = x__h15321 | y__h15322 ;
  assign y__h15322 = x__h15070 & y__h15071 ;
  assign y__h15455 = x__h15513 | y__h15514 ;
  assign y__h15514 = x__h15262 & y__h15263 ;
  assign y__h15647 = x__h15705 | y__h15706 ;
  assign y__h15706 = x__h15454 & y__h15455 ;
  assign y__h15839 = x__h15897 | y__h15898 ;
  assign y__h15898 = x__h15646 & y__h15647 ;
  assign y__h16031 = x__h16089 | y__h16090 ;
  assign y__h16090 = x__h15838 & y__h15839 ;
  assign y__h16223 = x__h16281 | y__h16282 ;
  assign y__h16282 = x__h16030 & y__h16031 ;
  assign y__h16415 = x__h16473 | y__h16474 ;
  assign y__h16474 = x__h16222 & y__h16223 ;
  assign y__h16607 = x__h16665 | y__h16666 ;
  assign y__h16666 = x__h16414 & y__h16415 ;
  assign y__h16799 = x__h16857 | y__h16858 ;
  assign y__h16858 = x__h16606 & y__h16607 ;
  assign y__h16991 = x__h17049 | y__h17050 ;
  assign y__h17050 = x__h16798 & y__h16799 ;
  assign y__h17183 = x__h17241 | y__h17242 ;
  assign y__h17242 = x__h16990 & y__h16991 ;
  assign y__h17375 = x__h17433 | y__h17434 ;
  assign y__h17434 = x__h17182 & y__h17183 ;
  assign y__h17567 = x__h17625 | y__h17626 ;
  assign y__h17626 = x__h17374 & y__h17375 ;
  assign y__h17759 = x__h17817 | y__h17818 ;
  assign y__h17818 = x__h17566 & y__h17567 ;
  assign y__h17951 = x__h18009 | y__h18010 ;
  assign y__h18010 = x__h17758 & y__h17759 ;
  assign y__h18143 = x__h18201 | y__h18202 ;
  assign y__h18202 = x__h17950 & y__h17951 ;
  assign y__h18335 = x__h18393 | y__h18394 ;
  assign y__h18394 = x__h18142 & y__h18143 ;
  assign y__h2560 = INV_rg_A__q1[1] & INV_rg_A__q1[0] ;
  assign y__h2749 = INV_rg_A__q1[2] & y__h2560 ;
  assign y__h2938 = INV_rg_A__q1[3] & y__h2749 ;
  assign y__h3127 = INV_rg_A__q1[4] & y__h2938 ;
  assign y__h3316 = INV_rg_A__q1[5] & y__h3127 ;
  assign y__h3505 = INV_rg_A__q1[6] & y__h3316 ;
  assign y__h3694 = INV_rg_A__q1[7] & y__h3505 ;
  assign y__h3883 = INV_rg_A__q1[8] & y__h3694 ;
  assign y__h4072 = INV_rg_A__q1[9] & y__h3883 ;
  assign y__h4261 = INV_rg_A__q1[10] & y__h4072 ;
  assign y__h4450 = INV_rg_A__q1[11] & y__h4261 ;
  assign y__h4639 = INV_rg_A__q1[12] & y__h4450 ;
  assign y__h4828 = INV_rg_A__q1[13] & y__h4639 ;
  assign y__h5017 = INV_rg_A__q1[14] & y__h4828 ;
  assign y__h5230 =
	     partial_store[0] & IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h5232 = INV_rg_A__q1[1] ^ INV_rg_A__q1[0] ;
  assign y__h5358 = x__h5415 | y__h5416 ;
  assign y__h5360 = INV_rg_A__q1[2] ^ y__h2560 ;
  assign y__h5416 = x__h5229 & y__h5230 ;
  assign y__h5547 = x__h5604 | y__h5605 ;
  assign y__h5549 = INV_rg_A__q1[3] ^ y__h2749 ;
  assign y__h5605 = x__h5357 & y__h5358 ;
  assign y__h5736 = x__h5793 | y__h5794 ;
  assign y__h5738 = INV_rg_A__q1[4] ^ y__h2938 ;
  assign y__h5794 = x__h5546 & y__h5547 ;
  assign y__h5925 = x__h5982 | y__h5983 ;
  assign y__h5927 = INV_rg_A__q1[5] ^ y__h3127 ;
  assign y__h5983 = x__h5735 & y__h5736 ;
  assign y__h6114 = x__h6171 | y__h6172 ;
  assign y__h6116 = INV_rg_A__q1[6] ^ y__h3316 ;
  assign y__h6172 = x__h5924 & y__h5925 ;
  assign y__h6303 = x__h6360 | y__h6361 ;
  assign y__h6305 = INV_rg_A__q1[7] ^ y__h3505 ;
  assign y__h6361 = x__h6113 & y__h6114 ;
  assign y__h6492 = x__h6549 | y__h6550 ;
  assign y__h6494 = INV_rg_A__q1[8] ^ y__h3694 ;
  assign y__h6550 = x__h6302 & y__h6303 ;
  assign y__h6681 = x__h6738 | y__h6739 ;
  assign y__h6683 = INV_rg_A__q1[9] ^ y__h3883 ;
  assign y__h6739 = x__h6491 & y__h6492 ;
  assign y__h6870 = x__h6927 | y__h6928 ;
  assign y__h6872 = INV_rg_A__q1[10] ^ y__h4072 ;
  assign y__h6928 = x__h6680 & y__h6681 ;
  assign y__h7059 = x__h7116 | y__h7117 ;
  assign y__h7061 = INV_rg_A__q1[11] ^ y__h4261 ;
  assign y__h7117 = x__h6869 & y__h6870 ;
  assign y__h7248 = x__h7305 | y__h7306 ;
  assign y__h7250 = INV_rg_A__q1[12] ^ y__h4450 ;
  assign y__h7306 = x__h7058 & y__h7059 ;
  assign y__h7437 = x__h7494 | y__h7495 ;
  assign y__h7439 = INV_rg_A__q1[13] ^ y__h4639 ;
  assign y__h7495 = x__h7247 & y__h7248 ;
  assign y__h7626 = x__h7683 | y__h7684 ;
  assign y__h7628 = INV_rg_A__q1[14] ^ y__h4828 ;
  assign y__h7684 = x__h7436 & y__h7437 ;
  assign y__h7815 = x__h7872 | y__h7873 ;
  assign y__h7817 = INV_rg_A__q1[15] ^ y__h5017 ;
  assign y__h7873 = x__h7625 & y__h7626 ;
  assign y__h8609 = x__h8667 | y__h8668 ;
  assign y__h8668 = x__h8714 & y__h8715 ;
  assign y__h8715 = partial_store[0] & rg_A[0] ;
  assign y__h8801 = x__h8859 | y__h8860 ;
  assign y__h8860 = x__h8906 & y__h8609 ;
  assign y__h8993 = x__h9051 | y__h9052 ;
  assign y__h9052 = x__h9098 & y__h8801 ;
  assign y__h9185 = x__h9243 | y__h9244 ;
  assign y__h9244 = x__h9290 & y__h8993 ;
  assign y__h9377 = x__h9435 | y__h9436 ;
  assign y__h9436 = x__h9482 & y__h9185 ;
  assign y__h9569 = x__h9627 | y__h9628 ;
  assign y__h9628 = x__h9674 & y__h9377 ;
  assign y__h9761 = x__h9819 | y__h9820 ;
  assign y__h9820 = x__h9866 & y__h9569 ;
  assign y__h9953 = x__h10011 | y__h10012 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	count <= `BSV_ASSIGNMENT_DELAY 4'd9;
	imac_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpC_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	mac_out_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	mul_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_init_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mulout_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	partial_store <= `BSV_ASSIGNMENT_DELAY 16'd0;
	reset_completed <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (add_completed_EN)
	  add_completed <= `BSV_ASSIGNMENT_DELAY add_completed_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (imac_completed_EN)
	  imac_completed <= `BSV_ASSIGNMENT_DELAY imac_completed_D_IN;
	if (inpA_fifo_rv_EN)
	  inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA_fifo_rv_D_IN;
	if (inpB_fifo_rv_EN)
	  inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpB_fifo_rv_D_IN;
	if (inpC_fifo_rv_EN)
	  inpC_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpC_fifo_rv_D_IN;
	if (mac_out_fifo_rv_EN)
	  mac_out_fifo_rv <= `BSV_ASSIGNMENT_DELAY mac_out_fifo_rv_D_IN;
	if (mul_completed_EN)
	  mul_completed <= `BSV_ASSIGNMENT_DELAY mul_completed_D_IN;
	if (mul_init_done_EN)
	  mul_init_done <= `BSV_ASSIGNMENT_DELAY mul_init_done_D_IN;
	if (mulout_fifo_rv_EN)
	  mulout_fifo_rv <= `BSV_ASSIGNMENT_DELAY mulout_fifo_rv_D_IN;
	if (partial_store_EN)
	  partial_store <= `BSV_ASSIGNMENT_DELAY partial_store_D_IN;
	if (reset_completed_EN)
	  reset_completed <= `BSV_ASSIGNMENT_DELAY reset_completed_D_IN;
	if (rg_A_EN) rg_A <= `BSV_ASSIGNMENT_DELAY rg_A_D_IN;
	if (rg_B_EN) rg_B <= `BSV_ASSIGNMENT_DELAY rg_B_D_IN;
	if (rg_C_EN) rg_C <= `BSV_ASSIGNMENT_DELAY rg_C_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_completed = 1'h0;
    count = 4'hA;
    imac_completed = 1'h0;
    inpA_fifo_rv = 17'h0AAAA;
    inpB_fifo_rv = 17'h0AAAA;
    inpC_fifo_rv = 33'h0AAAAAAAA;
    mac_out_fifo_rv = 33'h0AAAAAAAA;
    mul_completed = 1'h0;
    mul_init_done = 1'h0;
    mulout_fifo_rv = 33'h0AAAAAAAA;
    partial_store = 16'hAAAA;
    reset_completed = 1'h0;
    rg_A = 16'hAAAA;
    rg_B = 16'hAAAA;
    rg_C = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC_int32_pipelined

