//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sat Nov  2 16:54:21 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AB                         O    16
// RDY_out_AB                     O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_out_AB                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbf16_mul(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  EN_out_AB,
		  out_AB,
		  RDY_out_AB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // actionvalue method out_AB
  input  EN_out_AB;
  output [15 : 0] out_AB;
  output RDY_out_AB;

  // signals for module outputs
  wire [15 : 0] out_AB;
  wire RDY_get_A, RDY_get_B, RDY_out_AB;

  // inlined wires
  wire [16 : 0] inpA_fifo_rv_port0__write_1,
		inpA_fifo_rv_port1__read,
		inpA_fifo_rv_port1__write_1,
		inpA_fifo_rv_port2__read,
		inpB_fifo_rv_port1__read,
		inpB_fifo_rv_port1__write_1,
		inpB_fifo_rv_port2__read,
		out_fifo_rv_port1__read,
		out_fifo_rv_port1__write_1,
		out_fifo_rv_port2__read;
  wire inpA_fifo_rv_EN_port0__write, inpB_fifo_rv_EN_port0__write;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register bf_a
  reg [15 : 0] bf_a;
  wire [15 : 0] bf_a_D_IN;
  wire bf_a_EN;

  // register bf_b
  reg [15 : 0] bf_b;
  wire [15 : 0] bf_b_D_IN;
  wire bf_b_EN;

  // register calculate_mantissa
  reg calculate_mantissa;
  wire calculate_mantissa_D_IN, calculate_mantissa_EN;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count_D_IN;
  wire count_EN;

  // register exp_c
  reg [7 : 0] exp_c;
  wire [7 : 0] exp_c_D_IN;
  wire exp_c_EN;

  // register expone_calculated
  reg expone_calculated;
  wire expone_calculated_D_IN, expone_calculated_EN;

  // register final_output
  reg [15 : 0] final_output;
  wire [15 : 0] final_output_D_IN;
  wire final_output_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register handled_zero
  reg handled_zero;
  wire handled_zero_D_IN, handled_zero_EN;

  // register init_done
  reg init_done;
  wire init_done_D_IN, init_done_EN;

  // register inpA_fifo_rv
  reg [16 : 0] inpA_fifo_rv;
  wire [16 : 0] inpA_fifo_rv_D_IN;
  wire inpA_fifo_rv_EN;

  // register inpB_fifo_rv
  reg [16 : 0] inpB_fifo_rv;
  wire [16 : 0] inpB_fifo_rv_D_IN;
  wire inpB_fifo_rv_EN;

  // register man_c
  reg [6 : 0] man_c;
  wire [6 : 0] man_c_D_IN;
  wire man_c_EN;

  // register man_c_and_final_exp
  reg [14 : 0] man_c_and_final_exp;
  wire [14 : 0] man_c_and_final_exp_D_IN;
  wire man_c_and_final_exp_EN;

  // register out_fifo_rv
  reg [16 : 0] out_fifo_rv;
  wire [16 : 0] out_fifo_rv_D_IN;
  wire out_fifo_rv_EN;

  // register rounding_done
  reg rounding_done;
  wire rounding_done_D_IN, rounding_done_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register sign_calculated
  reg sign_calculated;
  wire sign_calculated_D_IN, sign_calculated_EN;

  // register temp_A
  reg [15 : 0] temp_A;
  wire [15 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [15 : 0] temp_B;
  wire [15 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_prod
  reg [15 : 0] temp_prod;
  wire [15 : 0] temp_prod_D_IN;
  wire temp_prod_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expone,
       CAN_FIRE_RL_calculate_sign,
       CAN_FIRE_RL_deassert_assembled_answer,
       CAN_FIRE_RL_handle_case_zero,
       CAN_FIRE_RL_init,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_RL_round_nearest,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_out_AB,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expone,
       WILL_FIRE_RL_calculate_sign,
       WILL_FIRE_RL_deassert_assembled_answer,
       WILL_FIRE_RL_handle_case_zero,
       WILL_FIRE_RL_init,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_RL_round_nearest,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_out_AB;

  // inputs to muxes for submodule ports
  wire [16 : 0] MUX_out_fifo_rv_port1__write_1__VAL_1;
  wire [15 : 0] MUX_temp_A_write_1__VAL_1,
		MUX_temp_A_write_1__VAL_2,
		MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_prod_write_1__VAL_2;
  wire [4 : 0] MUX_count_write_1__VAL_2;
  wire MUX_assembled_answer_write_1__SEL_2,
       MUX_count_write_1__SEL_1,
       MUX_sign_calculated_write_1__SEL_2;

  // remaining internal signals
  wire [15 : 0] IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5;
  wire [14 : 0] IF_IF_temp_prod_30_BIT_15_31_THEN_IF_NOT_temp__ETC__q8;
  wire [13 : 0] temp_prod_30_BIT_13_39_XOR_temp_A_32_BIT_13_40_ETC___d246;
  wire [11 : 0] temp_prod_30_BIT_11_47_XOR_temp_A_32_BIT_11_48_ETC___d245;
  wire [9 : 0] temp_prod_30_BIT_9_55_XOR_temp_A_32_BIT_9_56_5_ETC___d244;
  wire [8 : 0] IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7,
	       IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6;
  wire [7 : 0] IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q4,
	       IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q3,
	       IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2,
	       IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1,
	       _theResult___snd__h12537,
	       _theResult___snd_fst__h12612,
	       _theResult___snd_fst__h15628,
	       _theResult___snd_fst__h15636,
	       exp_c_66_BIT_7_67_XOR_exp_c_66_BIT_6_68_AND_ex_ETC___d321,
	       temp_prod_30_BIT_7_63_XOR_temp_A_32_BIT_7_64_6_ETC___d243,
	       x__h12609;
  wire [6 : 0] IF_NOT_temp_prod_30_BIT_6_67_24_OR_temp_prod_3_ETC___d377,
	       IF_NOT_temp_prod_30_BIT_7_63_60_OR_temp_prod_3_ETC___d358,
	       IF_temp_prod_30_BIT_15_31_THEN_IF_NOT_temp_pro_ETC___d378,
	       x__h10605,
	       x__h10628,
	       x__h12540,
	       x__h12563;
  wire [5 : 0] bf_a_BIT_12_1_XOR_bf_b_4_BIT_12_2_4_XOR_bf_a_B_ETC___d115,
	       exp_c_66_BIT_5_69_XOR_exp_c_66_BIT_4_70_AND_ex_ETC___d320,
	       temp_prod_30_BIT_5_71_XOR_temp_A_32_BIT_5_72_7_ETC___d242;
  wire [4 : 0] temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d374,
	       temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d355;
  wire [3 : 0] bf_a_BIT_10_9_XOR_bf_b_4_BIT_10_0_2_XOR_bf_a_B_ETC___d114,
	       exp_c_66_BIT_3_71_XOR_exp_c_66_BIT_2_72_AND_ex_ETC___d319,
	       temp_prod_30_BIT_3_79_XOR_temp_A_32_BIT_3_80_8_ETC___d241;
  wire [1 : 0] temp_prod_30_BIT_1_87_XOR_temp_A_32_BIT_1_88_9_ETC___d240;
  wire exp_c_66_BIT_7_67_XOR_exp_c_66_BIT_6_68_AND_ex_ETC___d281,
       init_done_AND_sign_calculated_9_AND_expone_cal_ETC___d254,
       temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d346,
       temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d364,
       temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d345,
       temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d363,
       temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d344,
       temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d362,
       temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d343,
       temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d361,
       temp_prod_30_BIT_14_35_XOR_temp_prod_30_BIT_13_ETC___d342,
       temp_prod_30_BIT_15_31_AND_temp_prod_30_BIT_14_ETC___d301,
       temp_prod_30_BIT_15_31_XOR_temp_prod_30_BIT_14_ETC___d336,
       temp_prod_30_BIT_8_59_XOR_temp_prod_30_BIT_7_63___d366,
       temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_59___d347,
       temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_5_ETC___d365,
       x__h14393,
       x__h14519,
       x__h14705,
       x__h14891,
       x__h15077,
       x__h15263,
       x__h2179,
       x__h2306,
       x__h2363,
       x__h2492,
       x__h2549,
       x__h2678,
       x__h2735,
       x__h2864,
       x__h2921,
       x__h3050,
       x__h3107,
       x__h3236,
       x__h3293,
       x__h3466,
       x__h3592,
       x__h3778,
       x__h3964,
       x__h4150,
       x__h4336,
       x__h4522,
       x__h5507,
       x__h5554,
       x__h5699,
       x__h5746,
       x__h5891,
       x__h5938,
       x__h6083,
       x__h6130,
       x__h6275,
       x__h6322,
       x__h6467,
       x__h6514,
       x__h6659,
       x__h6706,
       x__h6851,
       x__h6898,
       x__h7043,
       x__h7090,
       x__h7235,
       x__h7282,
       x__h7427,
       x__h7474,
       x__h7619,
       x__h7666,
       x__h7811,
       x__h7858,
       x__h7944,
       x__h8003,
       x__h8050,
       y__h10051,
       y__h10237,
       y__h11242,
       y__h11428,
       y__h11614,
       y__h11800,
       y__h11986,
       y__h12172,
       y__h12358,
       y__h14520,
       y__h14706,
       y__h14892,
       y__h15078,
       y__h15264,
       y__h15450,
       y__h16027,
       y__h16216,
       y__h16405,
       y__h16594,
       y__h16783,
       y__h16972,
       y__h2180,
       y__h2307,
       y__h2364,
       y__h2493,
       y__h2550,
       y__h2679,
       y__h2736,
       y__h2865,
       y__h2922,
       y__h3051,
       y__h3108,
       y__h3237,
       y__h3294,
       y__h3593,
       y__h3779,
       y__h3965,
       y__h4151,
       y__h4337,
       y__h4523,
       y__h5449,
       y__h5508,
       y__h5555,
       y__h5641,
       y__h5700,
       y__h5833,
       y__h5892,
       y__h6025,
       y__h6084,
       y__h6217,
       y__h6276,
       y__h6409,
       y__h6468,
       y__h6601,
       y__h6660,
       y__h6793,
       y__h6852,
       y__h6985,
       y__h7044,
       y__h7177,
       y__h7236,
       y__h7369,
       y__h7428,
       y__h7561,
       y__h7620,
       y__h7753,
       y__h7812,
       y__h7945,
       y__h8004,
       y__h9307,
       y__h9493,
       y__h9679,
       y__h9865;

  // action method get_A
  assign RDY_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_A = !inpA_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign CAN_FIRE_get_B = !inpB_fifo_rv_port1__read[16] ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // actionvalue method out_AB
  assign out_AB = out_fifo_rv[15:0] ;
  assign RDY_out_AB = out_fifo_rv[16] && assembled_answer ;
  assign CAN_FIRE_out_AB = out_fifo_rv[16] && assembled_answer ;
  assign WILL_FIRE_out_AB = EN_out_AB ;

  // rule RL_calculate_sign
  assign CAN_FIRE_RL_calculate_sign =
	     init_done && !sign_calculated && !handle_zero ;
  assign WILL_FIRE_RL_calculate_sign = CAN_FIRE_RL_calculate_sign ;

  // rule RL_handle_case_zero
  assign CAN_FIRE_RL_handle_case_zero =
	     !out_fifo_rv_port1__read[16] && init_done && handle_zero &&
	     !handled_zero ;
  assign WILL_FIRE_RL_handle_case_zero = CAN_FIRE_RL_handle_case_zero ;

  // rule RL_calculate_expone
  assign CAN_FIRE_RL_calculate_expone =
	     init_done && sign_calculated && !expone_calculated &&
	     !handle_zero ;
  assign WILL_FIRE_RL_calculate_expone = CAN_FIRE_RL_calculate_expone ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     init_done && count != 5'd0 && sign_calculated &&
	     expone_calculated &&
	     calculate_mantissa &&
	     !handle_zero ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_round_nearest
  assign CAN_FIRE_RL_round_nearest =
	     init_done_AND_sign_calculated_9_AND_expone_cal_ETC___d254 &&
	     count == 5'd0 &&
	     !rounding_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_round_nearest = CAN_FIRE_RL_round_nearest ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     !out_fifo_rv_port1__read[16] &&
	     init_done_AND_sign_calculated_9_AND_expone_cal_ETC___d254 &&
	     rounding_done &&
	     !assembled_answer &&
	     !handle_zero ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // rule RL_init
  assign CAN_FIRE_RL_init =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && !init_done ;
  assign WILL_FIRE_RL_init = CAN_FIRE_RL_init ;

  // rule RL_deassert_assembled_answer
  assign CAN_FIRE_RL_deassert_assembled_answer = assembled_answer ;
  assign WILL_FIRE_RL_deassert_assembled_answer = MUX_count_write_1__SEL_1 ;

  // inputs to muxes for submodule ports
  assign MUX_assembled_answer_write_1__SEL_2 =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_handle_case_zero ;
  assign MUX_count_write_1__SEL_1 =
	     assembled_answer && !WILL_FIRE_RL_handle_case_zero ;
  assign MUX_sign_calculated_write_1__SEL_2 =
	     WILL_FIRE_RL_calculate_sign &&
	     (bf_a[14:7] != 8'd0 || bf_a[6:0] != 7'd0) &&
	     (bf_b[14:7] != 8'd0 || bf_b[6:0] != 7'd0) ;
  assign MUX_count_write_1__VAL_2 = count - 5'd1 ;
  assign MUX_out_fifo_rv_port1__write_1__VAL_1 =
	     { 1'd1, sign_c, man_c_and_final_exp } ;
  assign MUX_temp_A_write_1__VAL_1 = { 9'd1, bf_a[6:0] } ;
  assign MUX_temp_A_write_1__VAL_2 = { temp_A[14:0], 1'd0 } ;
  assign MUX_temp_B_write_1__VAL_1 = { 9'd1, bf_b[6:0] } ;
  assign MUX_temp_B_write_1__VAL_2 = { 1'd0, temp_B[15:1] } ;
  assign MUX_temp_prod_write_1__VAL_2 =
	     { x__h7944 ^ y__h7945,
	       x__h8050 ^ y__h7753,
	       temp_prod_30_BIT_13_39_XOR_temp_A_32_BIT_13_40_ETC___d246 } ;

  // inlined wires
  assign inpA_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && !init_done ;
  assign inpA_fifo_rv_port0__write_1 =
	     { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign inpA_fifo_rv_port1__read =
	     inpA_fifo_rv_EN_port0__write ?
	       inpA_fifo_rv_port0__write_1 :
	       inpA_fifo_rv ;
  assign inpA_fifo_rv_port1__write_1 = { 1'd1, get_A_a } ;
  assign inpA_fifo_rv_port2__read =
	     EN_get_A ?
	       inpA_fifo_rv_port1__write_1 :
	       inpA_fifo_rv_port1__read ;
  assign inpB_fifo_rv_EN_port0__write =
	     inpA_fifo_rv[16] && inpB_fifo_rv[16] && !init_done ;
  assign inpB_fifo_rv_port1__read =
	     inpB_fifo_rv_EN_port0__write ?
	       inpA_fifo_rv_port0__write_1 :
	       inpB_fifo_rv ;
  assign inpB_fifo_rv_port1__write_1 = { 1'd1, get_B_b } ;
  assign inpB_fifo_rv_port2__read =
	     EN_get_B ?
	       inpB_fifo_rv_port1__write_1 :
	       inpB_fifo_rv_port1__read ;
  assign out_fifo_rv_port1__read =
	     EN_out_AB ? inpA_fifo_rv_port0__write_1 : out_fifo_rv ;
  assign out_fifo_rv_port1__write_1 =
	     WILL_FIRE_RL_assemble_answer ?
	       MUX_out_fifo_rv_port1__write_1__VAL_1 :
	       17'd65536 ;
  assign out_fifo_rv_port2__read =
	     MUX_assembled_answer_write_1__SEL_2 ?
	       out_fifo_rv_port1__write_1 :
	       out_fifo_rv_port1__read ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_handle_case_zero ;

  // register bf_a
  assign bf_a_D_IN = inpA_fifo_rv[15:0] ;
  assign bf_a_EN = CAN_FIRE_RL_init ;

  // register bf_b
  assign bf_b_D_IN = inpB_fifo_rv[15:0] ;
  assign bf_b_EN = CAN_FIRE_RL_init ;

  // register calculate_mantissa
  assign calculate_mantissa_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign calculate_mantissa_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expone ;

  // register count
  assign count_D_IN =
	     WILL_FIRE_RL_deassert_assembled_answer ?
	       5'd8 :
	       MUX_count_write_1__VAL_2 ;
  assign count_EN =
	     WILL_FIRE_RL_rl_multiply ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register exp_c
  assign exp_c_D_IN =
	     { x__h4522 ^ y__h4523,
	       x__h4336 ^ y__h4337,
	       bf_a_BIT_12_1_XOR_bf_b_4_BIT_12_2_4_XOR_bf_a_B_ETC___d115 } ;
  assign exp_c_EN = CAN_FIRE_RL_calculate_expone ;

  // register expone_calculated
  assign expone_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign expone_calculated_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expone ;

  // register final_output
  assign final_output_D_IN = 16'h0 ;
  assign final_output_EN = 1'b0 ;

  // register handle_zero
  assign handle_zero_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_calculate_sign &&
	     (bf_a[14:7] == 8'd0 && bf_a[6:0] == 7'd0 ||
	      bf_b[14:7] == 8'd0 && bf_b[6:0] == 7'd0) ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register handled_zero
  assign handled_zero_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign handled_zero_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_handle_case_zero ;

  // register init_done
  assign init_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign init_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_init ;

  // register inpA_fifo_rv
  assign inpA_fifo_rv_D_IN = inpA_fifo_rv_port2__read ;
  assign inpA_fifo_rv_EN = 1'b1 ;

  // register inpB_fifo_rv
  assign inpB_fifo_rv_D_IN = inpB_fifo_rv_port2__read ;
  assign inpB_fifo_rv_EN = 1'b1 ;

  // register man_c
  assign man_c_D_IN = 7'h0 ;
  assign man_c_EN = 1'b0 ;

  // register man_c_and_final_exp
  assign man_c_and_final_exp_D_IN =
	     { x__h12609,
	       IF_temp_prod_30_BIT_15_31_THEN_IF_NOT_temp_pro_ETC___d378[6:1],
	       IF_IF_temp_prod_30_BIT_15_31_THEN_IF_NOT_temp__ETC__q8[0] } ;
  assign man_c_and_final_exp_EN = CAN_FIRE_RL_round_nearest ;

  // register out_fifo_rv
  assign out_fifo_rv_D_IN = out_fifo_rv_port2__read ;
  assign out_fifo_rv_EN = 1'b1 ;

  // register rounding_done
  assign rounding_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign rounding_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_round_nearest ;

  // register sign_c
  assign sign_c_D_IN = bf_a[15] ^ bf_b[15] ;
  assign sign_c_EN = MUX_sign_calculated_write_1__SEL_2 ;

  // register sign_calculated
  assign sign_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign sign_calculated_EN =
	     WILL_FIRE_RL_calculate_sign &&
	     (bf_a[14:7] != 8'd0 || bf_a[6:0] != 7'd0) &&
	     (bf_b[14:7] != 8'd0 || bf_b[6:0] != 7'd0) ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register temp_A
  assign temp_A_D_IN =
	     WILL_FIRE_RL_calculate_expone ?
	       MUX_temp_A_write_1__VAL_1 :
	       MUX_temp_A_write_1__VAL_2 ;
  assign temp_A_EN =
	     WILL_FIRE_RL_calculate_expone || WILL_FIRE_RL_rl_multiply ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_calculate_expone ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN =
	     WILL_FIRE_RL_calculate_expone || WILL_FIRE_RL_rl_multiply ;

  // register temp_prod
  assign temp_prod_D_IN =
	     WILL_FIRE_RL_deassert_assembled_answer ?
	       16'd0 :
	       MUX_temp_prod_write_1__VAL_2 ;
  assign temp_prod_EN =
	     WILL_FIRE_RL_rl_multiply && temp_B[0] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // remaining internal signals
  assign IF_IF_temp_prod_30_BIT_15_31_THEN_IF_NOT_temp__ETC__q8 =
	     IF_temp_prod_30_BIT_15_31_THEN_IF_NOT_temp_pro_ETC___d378[0] ?
	       15'd1 :
	       15'd0 ;
  assign IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q4 =
	     (~IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q3 =
	     (~IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2 = (~exp_c[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7 =
	     (~temp_prod[7]) ? 9'd1 : 9'd0 ;
  assign IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6 =
	     (~temp_prod[8]) ? 9'd1 : 9'd0 ;
  assign IF_NOT_temp_prod_30_BIT_6_67_24_OR_temp_prod_3_ETC___d377 =
	     (!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
	       temp_prod[13:7] :
	       (temp_prod_30_BIT_15_31_XOR_temp_prod_30_BIT_14_ETC___d336 ?
		  x__h12540 :
		  x__h12563) ;
  assign IF_NOT_temp_prod_30_BIT_7_63_60_OR_temp_prod_3_ETC___d358 =
	     (!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
	       temp_prod[14:8] :
	       (temp_prod_30_BIT_15_31_AND_temp_prod_30_BIT_14_ETC___d301 ?
		  x__h10605 :
		  x__h10628) ;
  assign IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1 =
	     (bf_a[7] ^ bf_b[7]) ? 8'd1 : 8'd0 ;
  assign IF_temp_prod_30_BIT_15_31_THEN_IF_NOT_temp_pro_ETC___d378 =
	     temp_prod[15] ?
	       IF_NOT_temp_prod_30_BIT_7_63_60_OR_temp_prod_3_ETC___d358 :
	       IF_NOT_temp_prod_30_BIT_6_67_24_OR_temp_prod_3_ETC___d377 ;
  assign IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5 =
	     (temp_prod[0] ^ temp_A[0]) ? 16'd1 : 16'd0 ;
  assign _theResult___snd__h12537 =
	     { exp_c_66_BIT_7_67_XOR_exp_c_66_BIT_6_68_AND_ex_ETC___d281,
	       x__h15263,
	       x__h15077,
	       x__h14891,
	       x__h14705,
	       x__h14519,
	       x__h14393,
	       IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign _theResult___snd_fst__h12612 =
	     (!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
	       _theResult___snd__h12537 :
	       (temp_prod_30_BIT_15_31_AND_temp_prod_30_BIT_14_ETC___d301 ?
		  exp_c_66_BIT_7_67_XOR_exp_c_66_BIT_6_68_AND_ex_ETC___d321 :
		  _theResult___snd__h12537) ;
  assign _theResult___snd_fst__h15628 =
	     (!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
	       exp_c :
	       _theResult___snd_fst__h15636 ;
  assign _theResult___snd_fst__h15636 =
	     temp_prod_30_BIT_15_31_XOR_temp_prod_30_BIT_14_ETC___d336 ?
	       _theResult___snd__h12537 :
	       exp_c ;
  assign bf_a_BIT_10_9_XOR_bf_b_4_BIT_10_0_2_XOR_bf_a_B_ETC___d114 =
	     { x__h3778 ^ y__h3779,
	       x__h3592 ^ y__h3593,
	       x__h3466 ^ IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0],
	       IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q3[0] } ;
  assign bf_a_BIT_12_1_XOR_bf_b_4_BIT_12_2_4_XOR_bf_a_B_ETC___d115 =
	     { x__h4150 ^ y__h4151,
	       x__h3964 ^ y__h3965,
	       bf_a_BIT_10_9_XOR_bf_b_4_BIT_10_0_2_XOR_bf_a_B_ETC___d114 } ;
  assign exp_c_66_BIT_3_71_XOR_exp_c_66_BIT_2_72_AND_ex_ETC___d319 =
	     { x__h14705 ^ y__h14706,
	       x__h14519 ^ y__h14520,
	       x__h14393 ^ IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0],
	       IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q4[0] } ;
  assign exp_c_66_BIT_5_69_XOR_exp_c_66_BIT_4_70_AND_ex_ETC___d320 =
	     { x__h15077 ^ y__h15078,
	       x__h14891 ^ y__h14892,
	       exp_c_66_BIT_3_71_XOR_exp_c_66_BIT_2_72_AND_ex_ETC___d319 } ;
  assign exp_c_66_BIT_7_67_XOR_exp_c_66_BIT_6_68_AND_ex_ETC___d281 =
	     exp_c[7] ^ y__h16972 ;
  assign exp_c_66_BIT_7_67_XOR_exp_c_66_BIT_6_68_AND_ex_ETC___d321 =
	     { exp_c_66_BIT_7_67_XOR_exp_c_66_BIT_6_68_AND_ex_ETC___d281 ^
	       y__h15450,
	       x__h15263 ^ y__h15264,
	       exp_c_66_BIT_5_69_XOR_exp_c_66_BIT_4_70_AND_ex_ETC___d320 } ;
  assign init_done_AND_sign_calculated_9_AND_expone_cal_ETC___d254 =
	     init_done && sign_calculated && expone_calculated &&
	     calculate_mantissa ;
  assign temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d346 =
	     temp_prod[10] ^ y__h9307 ;
  assign temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d364 =
	     temp_prod[10] ^ y__h11428 ;
  assign temp_prod_30_BIT_11_47_XOR_temp_A_32_BIT_11_48_ETC___d245 =
	     { x__h7474 ^ y__h7177,
	       x__h7282 ^ y__h6985,
	       temp_prod_30_BIT_9_55_XOR_temp_A_32_BIT_9_56_5_ETC___d244 } ;
  assign temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d345 =
	     temp_prod[11] ^ y__h9493 ;
  assign temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d363 =
	     temp_prod[11] ^ y__h11614 ;
  assign temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d374 =
	     { temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d363,
	       temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d364,
	       temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_5_ETC___d365,
	       temp_prod_30_BIT_8_59_XOR_temp_prod_30_BIT_7_63___d366,
	       IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7[0] } ;
  assign temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d344 =
	     temp_prod[12] ^ y__h9679 ;
  assign temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d355 =
	     { temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d344,
	       temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d345,
	       temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d346,
	       temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_59___d347,
	       IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6[0] } ;
  assign temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d362 =
	     temp_prod[12] ^ y__h11800 ;
  assign temp_prod_30_BIT_13_39_XOR_temp_A_32_BIT_13_40_ETC___d246 =
	     { x__h7858 ^ y__h7561,
	       x__h7666 ^ y__h7369,
	       temp_prod_30_BIT_11_47_XOR_temp_A_32_BIT_11_48_ETC___d245 } ;
  assign temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d343 =
	     temp_prod[13] ^ y__h9865 ;
  assign temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d361 =
	     temp_prod[13] ^ y__h11986 ;
  assign temp_prod_30_BIT_14_35_XOR_temp_prod_30_BIT_13_ETC___d342 =
	     temp_prod[14] ^ y__h10051 ;
  assign temp_prod_30_BIT_15_31_AND_temp_prod_30_BIT_14_ETC___d301 =
	     temp_prod[15] & y__h10237 ;
  assign temp_prod_30_BIT_15_31_XOR_temp_prod_30_BIT_14_ETC___d336 =
	     temp_prod[15] ^ y__h12358 ;
  assign temp_prod_30_BIT_1_87_XOR_temp_A_32_BIT_1_88_9_ETC___d240 =
	     { x__h5554 ^ y__h5555,
	       IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5[0] } ;
  assign temp_prod_30_BIT_3_79_XOR_temp_A_32_BIT_3_80_8_ETC___d241 =
	     { x__h5938 ^ y__h5641,
	       x__h5746 ^ y__h5449,
	       temp_prod_30_BIT_1_87_XOR_temp_A_32_BIT_1_88_9_ETC___d240 } ;
  assign temp_prod_30_BIT_5_71_XOR_temp_A_32_BIT_5_72_7_ETC___d242 =
	     { x__h6322 ^ y__h6025,
	       x__h6130 ^ y__h5833,
	       temp_prod_30_BIT_3_79_XOR_temp_A_32_BIT_3_80_8_ETC___d241 } ;
  assign temp_prod_30_BIT_7_63_XOR_temp_A_32_BIT_7_64_6_ETC___d243 =
	     { x__h6706 ^ y__h6409,
	       x__h6514 ^ y__h6217,
	       temp_prod_30_BIT_5_71_XOR_temp_A_32_BIT_5_72_7_ETC___d242 } ;
  assign temp_prod_30_BIT_8_59_XOR_temp_prod_30_BIT_7_63___d366 =
	     temp_prod[8] ^ temp_prod[7] ;
  assign temp_prod_30_BIT_9_55_XOR_temp_A_32_BIT_9_56_5_ETC___d244 =
	     { x__h7090 ^ y__h6793,
	       x__h6898 ^ y__h6601,
	       temp_prod_30_BIT_7_63_XOR_temp_A_32_BIT_7_64_6_ETC___d243 } ;
  assign temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_59___d347 =
	     temp_prod[9] ^ temp_prod[8] ;
  assign temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_5_ETC___d365 =
	     temp_prod[9] ^ y__h11242 ;
  assign x__h10605 =
	     { temp_prod[15] ^ y__h10237,
	       temp_prod_30_BIT_14_35_XOR_temp_prod_30_BIT_13_ETC___d342,
	       temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d343,
	       temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d344,
	       temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d345,
	       temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d346,
	       temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_59___d347 } ;
  assign x__h10628 =
	     { temp_prod_30_BIT_14_35_XOR_temp_prod_30_BIT_13_ETC___d342,
	       temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d343,
	       temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d355 } ;
  assign x__h12540 =
	     { temp_prod[14] ^ y__h12172,
	       temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d361,
	       temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d362,
	       temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d363,
	       temp_prod_30_BIT_10_51_XOR_temp_prod_30_BIT_9__ETC___d364,
	       temp_prod_30_BIT_9_55_XOR_temp_prod_30_BIT_8_5_ETC___d365,
	       temp_prod_30_BIT_8_59_XOR_temp_prod_30_BIT_7_63___d366 } ;
  assign x__h12563 =
	     { temp_prod_30_BIT_13_39_XOR_temp_prod_30_BIT_12_ETC___d361,
	       temp_prod_30_BIT_12_43_XOR_temp_prod_30_BIT_11_ETC___d362,
	       temp_prod_30_BIT_11_47_XOR_temp_prod_30_BIT_10_ETC___d374 } ;
  assign x__h12609 =
	     temp_prod[15] ?
	       _theResult___snd_fst__h12612 :
	       _theResult___snd_fst__h15628 ;
  assign x__h14393 = exp_c[1] ^ exp_c[0] ;
  assign x__h14519 = exp_c[2] ^ y__h16027 ;
  assign x__h14705 = exp_c[3] ^ y__h16216 ;
  assign x__h14891 = exp_c[4] ^ y__h16405 ;
  assign x__h15077 = exp_c[5] ^ y__h16594 ;
  assign x__h15263 = exp_c[6] ^ y__h16783 ;
  assign x__h2179 = bf_a[8] ^ bf_b[8] ;
  assign x__h2306 = bf_a[9] ^ bf_b[9] ;
  assign x__h2363 = bf_a[8] & bf_b[8] ;
  assign x__h2492 = bf_a[10] ^ bf_b[10] ;
  assign x__h2549 = bf_a[9] & bf_b[9] ;
  assign x__h2678 = bf_a[11] ^ bf_b[11] ;
  assign x__h2735 = bf_a[10] & bf_b[10] ;
  assign x__h2864 = bf_a[12] ^ bf_b[12] ;
  assign x__h2921 = bf_a[11] & bf_b[11] ;
  assign x__h3050 = bf_a[13] ^ bf_b[13] ;
  assign x__h3107 = bf_a[12] & bf_b[12] ;
  assign x__h3236 = bf_a[14] ^ bf_b[14] ;
  assign x__h3293 = bf_a[13] & bf_b[13] ;
  assign x__h3466 = x__h2179 ^ y__h2180 ;
  assign x__h3592 = x__h2306 ^ y__h2307 ;
  assign x__h3778 = x__h2492 ^ y__h2493 ;
  assign x__h3964 = x__h2678 ^ y__h2679 ;
  assign x__h4150 = x__h2864 ^ y__h2865 ;
  assign x__h4336 = x__h3050 ^ y__h3051 ;
  assign x__h4522 = ~(x__h3236 ^ y__h3237) ;
  assign x__h5507 = temp_prod[1] & temp_A[1] ;
  assign x__h5554 = temp_prod[1] ^ temp_A[1] ;
  assign x__h5699 = temp_prod[2] & temp_A[2] ;
  assign x__h5746 = temp_prod[2] ^ temp_A[2] ;
  assign x__h5891 = temp_prod[3] & temp_A[3] ;
  assign x__h5938 = temp_prod[3] ^ temp_A[3] ;
  assign x__h6083 = temp_prod[4] & temp_A[4] ;
  assign x__h6130 = temp_prod[4] ^ temp_A[4] ;
  assign x__h6275 = temp_prod[5] & temp_A[5] ;
  assign x__h6322 = temp_prod[5] ^ temp_A[5] ;
  assign x__h6467 = temp_prod[6] & temp_A[6] ;
  assign x__h6514 = temp_prod[6] ^ temp_A[6] ;
  assign x__h6659 = temp_prod[7] & temp_A[7] ;
  assign x__h6706 = temp_prod[7] ^ temp_A[7] ;
  assign x__h6851 = temp_prod[8] & temp_A[8] ;
  assign x__h6898 = temp_prod[8] ^ temp_A[8] ;
  assign x__h7043 = temp_prod[9] & temp_A[9] ;
  assign x__h7090 = temp_prod[9] ^ temp_A[9] ;
  assign x__h7235 = temp_prod[10] & temp_A[10] ;
  assign x__h7282 = temp_prod[10] ^ temp_A[10] ;
  assign x__h7427 = temp_prod[11] & temp_A[11] ;
  assign x__h7474 = temp_prod[11] ^ temp_A[11] ;
  assign x__h7619 = temp_prod[12] & temp_A[12] ;
  assign x__h7666 = temp_prod[12] ^ temp_A[12] ;
  assign x__h7811 = temp_prod[13] & temp_A[13] ;
  assign x__h7858 = temp_prod[13] ^ temp_A[13] ;
  assign x__h7944 = temp_prod[15] ^ temp_A[15] ;
  assign x__h8003 = temp_prod[14] & temp_A[14] ;
  assign x__h8050 = temp_prod[14] ^ temp_A[14] ;
  assign y__h10051 = temp_prod[13] & y__h9865 ;
  assign y__h10237 = temp_prod[14] & y__h10051 ;
  assign y__h11242 = temp_prod[8] & temp_prod[7] ;
  assign y__h11428 = temp_prod[9] & y__h11242 ;
  assign y__h11614 = temp_prod[10] & y__h11428 ;
  assign y__h11800 = temp_prod[11] & y__h11614 ;
  assign y__h11986 = temp_prod[12] & y__h11800 ;
  assign y__h12172 = temp_prod[13] & y__h11986 ;
  assign y__h12358 = temp_prod[14] & y__h12172 ;
  assign y__h14520 = x__h14393 & IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h14706 = x__h14519 & y__h14520 ;
  assign y__h14892 = x__h14705 & y__h14706 ;
  assign y__h15078 = x__h14891 & y__h14892 ;
  assign y__h15264 = x__h15077 & y__h15078 ;
  assign y__h15450 = x__h15263 & y__h15264 ;
  assign y__h16027 = exp_c[1] & exp_c[0] ;
  assign y__h16216 = exp_c[2] & y__h16027 ;
  assign y__h16405 = exp_c[3] & y__h16216 ;
  assign y__h16594 = exp_c[4] & y__h16405 ;
  assign y__h16783 = exp_c[5] & y__h16594 ;
  assign y__h16972 = exp_c[6] & y__h16783 ;
  assign y__h2180 = bf_a[7] & bf_b[7] ;
  assign y__h2307 = x__h2363 | y__h2364 ;
  assign y__h2364 = x__h2179 & y__h2180 ;
  assign y__h2493 = x__h2549 | y__h2550 ;
  assign y__h2550 = x__h2306 & y__h2307 ;
  assign y__h2679 = x__h2735 | y__h2736 ;
  assign y__h2736 = x__h2492 & y__h2493 ;
  assign y__h2865 = x__h2921 | y__h2922 ;
  assign y__h2922 = x__h2678 & y__h2679 ;
  assign y__h3051 = x__h3107 | y__h3108 ;
  assign y__h3108 = x__h2864 & y__h2865 ;
  assign y__h3237 = x__h3293 | y__h3294 ;
  assign y__h3294 = x__h3050 & y__h3051 ;
  assign y__h3593 =
	     x__h3466 & IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0] ;
  assign y__h3779 = x__h3592 & y__h3593 ;
  assign y__h3965 = x__h3778 & y__h3779 ;
  assign y__h4151 = x__h3964 & y__h3965 ;
  assign y__h4337 = x__h4150 & y__h4151 ;
  assign y__h4523 = x__h4336 & y__h4337 ;
  assign y__h5449 = x__h5507 | y__h5508 ;
  assign y__h5508 = x__h5554 & y__h5555 ;
  assign y__h5555 = temp_prod[0] & temp_A[0] ;
  assign y__h5641 = x__h5699 | y__h5700 ;
  assign y__h5700 = x__h5746 & y__h5449 ;
  assign y__h5833 = x__h5891 | y__h5892 ;
  assign y__h5892 = x__h5938 & y__h5641 ;
  assign y__h6025 = x__h6083 | y__h6084 ;
  assign y__h6084 = x__h6130 & y__h5833 ;
  assign y__h6217 = x__h6275 | y__h6276 ;
  assign y__h6276 = x__h6322 & y__h6025 ;
  assign y__h6409 = x__h6467 | y__h6468 ;
  assign y__h6468 = x__h6514 & y__h6217 ;
  assign y__h6601 = x__h6659 | y__h6660 ;
  assign y__h6660 = x__h6706 & y__h6409 ;
  assign y__h6793 = x__h6851 | y__h6852 ;
  assign y__h6852 = x__h6898 & y__h6601 ;
  assign y__h6985 = x__h7043 | y__h7044 ;
  assign y__h7044 = x__h7090 & y__h6793 ;
  assign y__h7177 = x__h7235 | y__h7236 ;
  assign y__h7236 = x__h7282 & y__h6985 ;
  assign y__h7369 = x__h7427 | y__h7428 ;
  assign y__h7428 = x__h7474 & y__h7177 ;
  assign y__h7561 = x__h7619 | y__h7620 ;
  assign y__h7620 = x__h7666 & y__h7369 ;
  assign y__h7753 = x__h7811 | y__h7812 ;
  assign y__h7812 = x__h7858 & y__h7561 ;
  assign y__h7945 = x__h8003 | y__h8004 ;
  assign y__h8004 = x__h8050 & y__h7753 ;
  assign y__h9307 = temp_prod[9] & temp_prod[8] ;
  assign y__h9493 = temp_prod[10] & y__h9307 ;
  assign y__h9679 = temp_prod[11] & y__h9493 ;
  assign y__h9865 = temp_prod[12] & y__h9679 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bf_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	calculate_mantissa <= `BSV_ASSIGNMENT_DELAY 1'd0;
	count <= `BSV_ASSIGNMENT_DELAY 5'd8;
	exp_c <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expone_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	final_output <= `BSV_ASSIGNMENT_DELAY 16'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handled_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	init_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	man_c <= `BSV_ASSIGNMENT_DELAY 7'd0;
	man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY 15'd0;
	out_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 16'bxxxxxxxxxxxxxxxx /* unspecified value */  };
	rounding_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	temp_prod <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (bf_a_EN) bf_a <= `BSV_ASSIGNMENT_DELAY bf_a_D_IN;
	if (bf_b_EN) bf_b <= `BSV_ASSIGNMENT_DELAY bf_b_D_IN;
	if (calculate_mantissa_EN)
	  calculate_mantissa <= `BSV_ASSIGNMENT_DELAY calculate_mantissa_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (exp_c_EN) exp_c <= `BSV_ASSIGNMENT_DELAY exp_c_D_IN;
	if (expone_calculated_EN)
	  expone_calculated <= `BSV_ASSIGNMENT_DELAY expone_calculated_D_IN;
	if (final_output_EN)
	  final_output <= `BSV_ASSIGNMENT_DELAY final_output_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (handled_zero_EN)
	  handled_zero <= `BSV_ASSIGNMENT_DELAY handled_zero_D_IN;
	if (init_done_EN) init_done <= `BSV_ASSIGNMENT_DELAY init_done_D_IN;
	if (inpA_fifo_rv_EN)
	  inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA_fifo_rv_D_IN;
	if (inpB_fifo_rv_EN)
	  inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpB_fifo_rv_D_IN;
	if (man_c_EN) man_c <= `BSV_ASSIGNMENT_DELAY man_c_D_IN;
	if (man_c_and_final_exp_EN)
	  man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY
	      man_c_and_final_exp_D_IN;
	if (out_fifo_rv_EN)
	  out_fifo_rv <= `BSV_ASSIGNMENT_DELAY out_fifo_rv_D_IN;
	if (rounding_done_EN)
	  rounding_done <= `BSV_ASSIGNMENT_DELAY rounding_done_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (sign_calculated_EN)
	  sign_calculated <= `BSV_ASSIGNMENT_DELAY sign_calculated_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_prod_EN) temp_prod <= `BSV_ASSIGNMENT_DELAY temp_prod_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    assembled_answer = 1'h0;
    bf_a = 16'hAAAA;
    bf_b = 16'hAAAA;
    calculate_mantissa = 1'h0;
    count = 5'h0A;
    exp_c = 8'hAA;
    expone_calculated = 1'h0;
    final_output = 16'hAAAA;
    handle_zero = 1'h0;
    handled_zero = 1'h0;
    init_done = 1'h0;
    inpA_fifo_rv = 17'h0AAAA;
    inpB_fifo_rv = 17'h0AAAA;
    man_c = 7'h2A;
    man_c_and_final_exp = 15'h2AAA;
    out_fifo_rv = 17'h0AAAA;
    rounding_done = 1'h0;
    sign_c = 1'h0;
    sign_calculated = 1'h0;
    temp_A = 16'hAAAA;
    temp_B = 16'hAAAA;
    temp_prod = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbf16_mul

