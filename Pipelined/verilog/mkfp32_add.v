//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sat Nov  2 16:54:24 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  reg [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register adj_done
  reg adj_done;
  wire adj_done_D_IN, adj_done_EN;

  // register adj_sub
  reg adj_sub;
  wire adj_sub_D_IN, adj_sub_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register do_add
  reg do_add;
  reg do_add_D_IN;
  wire do_add_EN;

  // register do_sub
  reg do_sub;
  reg do_sub_D_IN;
  wire do_sub_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  reg [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  reg [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register handle_oneinpzero
  reg handle_oneinpzero;
  wire handle_oneinpzero_D_IN, handle_oneinpzero_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register inpA_fifo_rv
  reg [32 : 0] inpA_fifo_rv;
  wire [32 : 0] inpA_fifo_rv_D_IN;
  wire inpA_fifo_rv_EN;

  // register inpB_fifo_rv
  reg [32 : 0] inpB_fifo_rv;
  wire [32 : 0] inpB_fifo_rv_D_IN;
  wire inpB_fifo_rv_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register out_fifo_rv
  reg [32 : 0] out_fifo_rv;
  wire [32 : 0] out_fifo_rv_D_IN;
  wire out_fifo_rv_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  reg [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_adjust_subres,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_deassert_assembled_answer,
       CAN_FIRE_RL_handle_oneinpzero_case,
       CAN_FIRE_RL_handle_zero_case,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_round_sub,
       CAN_FIRE_RL_sub,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_adjust_subres,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_deassert_assembled_answer,
       WILL_FIRE_RL_handle_oneinpzero_case,
       WILL_FIRE_RL_handle_zero_case,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_round_sub,
       WILL_FIRE_RL_sub,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_3,
		MUX_temp_sum_write_1__VAL_4;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2,
		MUX_fp_a_write_1__VAL_3,
		MUX_fp_b_write_1__VAL_1,
		MUX_fp_c_write_1__VAL_1,
		MUX_fp_c_write_1__VAL_2;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_2,
		MUX_add_res_with_adj_exp_write_1__VAL_3;
  wire MUX_do_add_write_1__SEL_2,
       MUX_do_sub_write_1__SEL_2,
       MUX_fp_a_write_1__SEL_1,
       MUX_fp_a_write_1__SEL_2,
       MUX_fp_b_write_1__SEL_1,
       MUX_handle_zero_write_1__SEL_2,
       MUX_temp_B_write_1__SEL_1,
       MUX_temp_B_write_1__SEL_2;

  // remaining internal signals
  wire [49 : 0] IF_temp_A_BIT_0_XOR_INV_temp_B_45_29_PLUS_1_30_ETC__q11,
		IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10,
		INV_temp_B_45_29_PLUS_1___d530;
  wire [47 : 0] temp_A_53_BIT_47_61_XOR_INV_temp_B_45_29_PLUS__ETC___d850,
		temp_A_53_BIT_47_61_XOR_temp_B_45_BIT_47_62_64_ETC___d523;
  wire [45 : 0] temp_A_53_BIT_45_69_XOR_INV_temp_B_45_29_PLUS__ETC___d849,
		temp_A_53_BIT_45_69_XOR_temp_B_45_BIT_45_70_72_ETC___d522;
  wire [43 : 0] temp_A_53_BIT_43_77_XOR_INV_temp_B_45_29_PLUS__ETC___d848,
		temp_A_53_BIT_43_77_XOR_temp_B_45_BIT_43_78_80_ETC___d521;
  wire [41 : 0] temp_A_53_BIT_41_85_XOR_INV_temp_B_45_29_PLUS__ETC___d847,
		temp_A_53_BIT_41_85_XOR_temp_B_45_BIT_41_86_88_ETC___d520;
  wire [39 : 0] temp_A_53_BIT_39_93_XOR_INV_temp_B_45_29_PLUS__ETC___d846,
		temp_A_53_BIT_39_93_XOR_temp_B_45_BIT_39_94_96_ETC___d519;
  wire [37 : 0] temp_A_53_BIT_37_01_XOR_INV_temp_B_45_29_PLUS__ETC___d845,
		temp_A_53_BIT_37_01_XOR_temp_B_45_BIT_37_02_04_ETC___d518;
  wire [35 : 0] temp_A_53_BIT_35_09_XOR_INV_temp_B_45_29_PLUS__ETC___d844,
		temp_A_53_BIT_35_09_XOR_temp_B_45_BIT_35_10_12_ETC___d517;
  wire [33 : 0] temp_A_53_BIT_33_17_XOR_INV_temp_B_45_29_PLUS__ETC___d843,
		temp_A_53_BIT_33_17_XOR_temp_B_45_BIT_33_18_20_ETC___d516;
  wire [31 : 0] temp_A_53_BIT_31_25_XOR_INV_temp_B_45_29_PLUS__ETC___d842,
		temp_A_53_BIT_31_25_XOR_temp_B_45_BIT_31_26_28_ETC___d515;
  wire [30 : 0] IF_IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_s_ETC__q12,
		IF_IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_s_ETC__q13;
  wire [29 : 0] temp_A_53_BIT_29_33_XOR_INV_temp_B_45_29_PLUS__ETC___d841,
		temp_A_53_BIT_29_33_XOR_temp_B_45_BIT_29_34_36_ETC___d514;
  wire [27 : 0] temp_A_53_BIT_27_41_XOR_INV_temp_B_45_29_PLUS__ETC___d840,
		temp_A_53_BIT_27_41_XOR_temp_B_45_BIT_27_42_44_ETC___d513;
  wire [25 : 0] temp_A_53_BIT_25_49_XOR_INV_temp_B_45_29_PLUS__ETC___d839,
		temp_A_53_BIT_25_49_XOR_temp_B_45_BIT_25_50_52_ETC___d512;
  wire [24 : 0] IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5,
		IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [23 : 0] temp_A_53_BIT_23_57_XOR_INV_temp_B_45_29_PLUS__ETC___d838,
		temp_A_53_BIT_23_57_XOR_temp_B_45_BIT_23_58_60_ETC___d511;
  wire [22 : 0] IF_NOT_temp_sum_59_BIT_23_143_144_OR_temp_sum__ETC___d1255,
		IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131,
		IF_NOT_temp_sum_59_BIT_25_06_07_OR_temp_sum_59_ETC___d1080,
		IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256,
		IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132,
		x__h34625,
		x__h34648,
		x__h56122,
		x__h56145,
		x__h61401,
		x__h61424,
		x_fraction__h70342;
  wire [21 : 0] temp_A_53_BIT_21_65_XOR_INV_temp_B_45_29_PLUS__ETC___d837,
		temp_A_53_BIT_21_65_XOR_temp_B_45_BIT_21_66_68_ETC___d510;
  wire [19 : 0] temp_A_53_BIT_19_73_XOR_INV_temp_B_45_29_PLUS__ETC___d836,
		temp_A_53_BIT_19_73_XOR_temp_B_45_BIT_19_74_76_ETC___d509;
  wire [17 : 0] temp_A_53_BIT_17_81_XOR_INV_temp_B_45_29_PLUS__ETC___d835,
		temp_A_53_BIT_17_81_XOR_temp_B_45_BIT_17_82_84_ETC___d508;
  wire [15 : 0] temp_A_53_BIT_15_89_XOR_INV_temp_B_45_29_PLUS__ETC___d834,
		temp_A_53_BIT_15_89_XOR_temp_B_45_BIT_15_90_92_ETC___d507;
  wire [13 : 0] temp_A_53_BIT_13_97_XOR_INV_temp_B_45_29_PLUS__ETC___d833,
		temp_A_53_BIT_13_97_XOR_temp_B_45_BIT_13_98_00_ETC___d506;
  wire [11 : 0] temp_A_53_BIT_11_05_XOR_INV_temp_B_45_29_PLUS__ETC___d832,
		temp_A_53_BIT_11_05_XOR_temp_B_45_BIT_11_06_08_ETC___d505;
  wire [9 : 0] temp_A_53_BIT_9_13_XOR_INV_temp_B_45_29_PLUS_1_ETC___d831,
	       temp_A_53_BIT_9_13_XOR_temp_B_45_BIT_9_14_16_X_ETC___d504;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_exp___10885_BIT_0_THEN_1_ELSE_0__q7,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h39901,
	       _theResult___snd__h56119,
	       _theResult___snd_fst__h39976,
	       _theResult___snd_fst__h42975,
	       _theResult___snd_fst__h42983,
	       _theResult___snd_fst__h61473,
	       _theResult___snd_fst__h61481,
	       exp___1__h50885,
	       fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d994,
	       temp_A_53_BIT_7_21_XOR_INV_temp_B_45_29_PLUS_1_ETC___d830,
	       temp_A_53_BIT_7_21_XOR_temp_B_45_BIT_7_22_24_X_ETC___d503,
	       x__h39973,
	       x__h61470,
	       x_exponent__h26995,
	       x_exponent__h70341;
  wire [5 : 0] INV_fp_a_3_BIT_28_8_64_XOR_fp_a_3_BIT_27_2_OR__ETC___d893,
	       fp_a_3_BITS_30_TO_23_4_MINUS_0b1_149_BIT_5_176_ETC___d1200,
	       fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d137,
	       fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_2_AND_fp_a_3_ETC___d993,
	       temp_A_53_BIT_5_29_XOR_INV_temp_B_45_29_PLUS_1_ETC___d829,
	       temp_A_53_BIT_5_29_XOR_temp_B_45_BIT_5_30_32_X_ETC___d502;
  wire [4 : 0] temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1244,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1120,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1069;
  wire [3 : 0] INV_fp_a_3_BIT_26_6_66_XOR_fp_a_3_BIT_25_00_OR_ETC___d892,
	       fp_a_3_BIT_26_6_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d136,
	       fp_a_3_BIT_26_6_XOR_fp_a_3_BIT_25_00_AND_fp_a__ETC___d992,
	       temp_A_53_BIT_3_37_XOR_INV_temp_B_45_29_PLUS_1_ETC___d828,
	       temp_A_53_BIT_3_37_XOR_temp_B_45_BIT_3_38_40_X_ETC___d501;
  wire [1 : 0] fp_a_3_BIT_24_04_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d135,
	       temp_A_53_BIT_1_45_XOR_INV_temp_B_45_29_PLUS_1_ETC___d827,
	       temp_A_53_BIT_1_45_XOR_temp_B_45_BIT_1_46_48_X_ETC___d500;
  wire NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45,
       NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d51,
       NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57,
       fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20,
       fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17,
       fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42,
       fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920,
       fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24,
       got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139,
       temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228,
       temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227,
       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104,
       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226,
       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053,
       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103,
       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225,
       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052,
       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102,
       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224,
       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051,
       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101,
       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223,
       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050,
       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100,
       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222,
       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049,
       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099,
       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221,
       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048,
       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098,
       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220,
       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047,
       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097,
       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219,
       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046,
       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096,
       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218,
       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045,
       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095,
       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217,
       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044,
       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094,
       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216,
       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043,
       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093,
       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215,
       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042,
       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092,
       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214,
       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041,
       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091,
       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213,
       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040,
       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090,
       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212,
       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039,
       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089,
       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211,
       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038,
       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088,
       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210,
       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037,
       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087,
       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209,
       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036,
       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086,
       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208,
       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035,
       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085,
       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207,
       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034,
       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084,
       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033,
       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083,
       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173,
       temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032,
       temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974,
       temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026,
       x__h10077,
       x__h10124,
       x__h10269,
       x__h10316,
       x__h10461,
       x__h10508,
       x__h10653,
       x__h10700,
       x__h10845,
       x__h10892,
       x__h11037,
       x__h11084,
       x__h11229,
       x__h11276,
       x__h11421,
       x__h11468,
       x__h11613,
       x__h11660,
       x__h11805,
       x__h11852,
       x__h11997,
       x__h12044,
       x__h12189,
       x__h12236,
       x__h12381,
       x__h12428,
       x__h12573,
       x__h12620,
       x__h12765,
       x__h12812,
       x__h12957,
       x__h13004,
       x__h13149,
       x__h13196,
       x__h13341,
       x__h13388,
       x__h13533,
       x__h13580,
       x__h13725,
       x__h13772,
       x__h13917,
       x__h13964,
       x__h14109,
       x__h14156,
       x__h14301,
       x__h14348,
       x__h14493,
       x__h14540,
       x__h14685,
       x__h14732,
       x__h14877,
       x__h14924,
       x__h15069,
       x__h15116,
       x__h15261,
       x__h15308,
       x__h15453,
       x__h15500,
       x__h15645,
       x__h15692,
       x__h15837,
       x__h15884,
       x__h15970,
       x__h16029,
       x__h16076,
       x__h17502,
       x__h17631,
       x__h17690,
       x__h17823,
       x__h17882,
       x__h18015,
       x__h18074,
       x__h18207,
       x__h18266,
       x__h18399,
       x__h18458,
       x__h18591,
       x__h18650,
       x__h18783,
       x__h18842,
       x__h18975,
       x__h19034,
       x__h19167,
       x__h19226,
       x__h19359,
       x__h19418,
       x__h19551,
       x__h19610,
       x__h19743,
       x__h19802,
       x__h19935,
       x__h19994,
       x__h20127,
       x__h20186,
       x__h20319,
       x__h20378,
       x__h20511,
       x__h20570,
       x__h20703,
       x__h20762,
       x__h20895,
       x__h20954,
       x__h21087,
       x__h21146,
       x__h21279,
       x__h21338,
       x__h21471,
       x__h21530,
       x__h21663,
       x__h21722,
       x__h21855,
       x__h21914,
       x__h22047,
       x__h22106,
       x__h22239,
       x__h22298,
       x__h22431,
       x__h22490,
       x__h22623,
       x__h22682,
       x__h22815,
       x__h22874,
       x__h23007,
       x__h23066,
       x__h23199,
       x__h23258,
       x__h23391,
       x__h23450,
       x__h23583,
       x__h23642,
       x__h23775,
       x__h23834,
       x__h23967,
       x__h24026,
       x__h24159,
       x__h24218,
       x__h24351,
       x__h24410,
       x__h24543,
       x__h24602,
       x__h24735,
       x__h24794,
       x__h24927,
       x__h24986,
       x__h25119,
       x__h25178,
       x__h25311,
       x__h25370,
       x__h25503,
       x__h25562,
       x__h25695,
       x__h25754,
       x__h25887,
       x__h25946,
       x__h26079,
       x__h26138,
       x__h26271,
       x__h26330,
       x__h26463,
       x__h26522,
       x__h26655,
       x__h26714,
       x__h27260,
       x__h27387,
       x__h27575,
       x__h27763,
       x__h27951,
       x__h28139,
       x__h28327,
       x__h3977,
       x__h4104,
       x__h4161,
       x__h41740,
       x__h41866,
       x__h42052,
       x__h42238,
       x__h42424,
       x__h42610,
       x__h4290,
       x__h4347,
       x__h4476,
       x__h4533,
       x__h4662,
       x__h4719,
       x__h4848,
       x__h4905,
       x__h5034,
       x__h5091,
       x__h7005,
       x__h7052,
       x__h7197,
       x__h7244,
       x__h7389,
       x__h7436,
       x__h7581,
       x__h7628,
       x__h7773,
       x__h7820,
       x__h7965,
       x__h8012,
       x__h8157,
       x__h8204,
       x__h8349,
       x__h8396,
       x__h8541,
       x__h8588,
       x__h8733,
       x__h8780,
       x__h8925,
       x__h8972,
       x__h9117,
       x__h9164,
       x__h9309,
       x__h9356,
       x__h9501,
       x__h9548,
       x__h9693,
       x__h9740,
       x__h9885,
       x__h9932,
       x_sign__h70340,
       y__h10019,
       y__h10078,
       y__h10211,
       y__h10270,
       y__h10403,
       y__h10462,
       y__h10595,
       y__h10654,
       y__h10787,
       y__h10846,
       y__h10979,
       y__h11038,
       y__h11171,
       y__h11230,
       y__h11363,
       y__h11422,
       y__h11555,
       y__h11614,
       y__h11747,
       y__h11806,
       y__h11939,
       y__h11998,
       y__h12131,
       y__h12190,
       y__h12323,
       y__h12382,
       y__h12515,
       y__h12574,
       y__h12707,
       y__h12766,
       y__h12899,
       y__h12958,
       y__h13091,
       y__h13150,
       y__h13283,
       y__h13342,
       y__h13475,
       y__h13534,
       y__h13667,
       y__h13726,
       y__h13859,
       y__h13918,
       y__h14051,
       y__h14110,
       y__h14243,
       y__h14302,
       y__h14435,
       y__h14494,
       y__h14627,
       y__h14686,
       y__h14819,
       y__h14878,
       y__h15011,
       y__h15070,
       y__h15203,
       y__h15262,
       y__h15395,
       y__h15454,
       y__h15587,
       y__h15646,
       y__h15779,
       y__h15838,
       y__h15971,
       y__h16030,
       y__h17503,
       y__h17632,
       y__h17691,
       y__h17824,
       y__h17883,
       y__h18016,
       y__h18075,
       y__h18208,
       y__h18267,
       y__h18400,
       y__h18459,
       y__h18592,
       y__h18651,
       y__h18784,
       y__h18843,
       y__h18976,
       y__h19035,
       y__h19168,
       y__h19227,
       y__h19360,
       y__h19419,
       y__h19552,
       y__h19611,
       y__h19744,
       y__h19803,
       y__h19936,
       y__h19995,
       y__h20128,
       y__h20187,
       y__h20320,
       y__h20379,
       y__h20512,
       y__h20571,
       y__h20704,
       y__h20763,
       y__h20896,
       y__h20955,
       y__h21088,
       y__h21147,
       y__h21280,
       y__h21339,
       y__h21472,
       y__h21531,
       y__h21664,
       y__h21723,
       y__h21856,
       y__h21915,
       y__h22048,
       y__h22107,
       y__h22240,
       y__h22299,
       y__h22432,
       y__h22491,
       y__h22624,
       y__h22683,
       y__h22816,
       y__h22875,
       y__h23008,
       y__h23067,
       y__h23200,
       y__h23259,
       y__h23392,
       y__h23451,
       y__h23584,
       y__h23643,
       y__h23776,
       y__h23835,
       y__h23968,
       y__h24027,
       y__h24160,
       y__h24219,
       y__h24352,
       y__h24411,
       y__h24544,
       y__h24603,
       y__h24736,
       y__h24795,
       y__h24928,
       y__h24987,
       y__h25120,
       y__h25179,
       y__h25312,
       y__h25371,
       y__h25504,
       y__h25563,
       y__h25696,
       y__h25755,
       y__h25888,
       y__h25947,
       y__h26080,
       y__h26139,
       y__h26272,
       y__h26331,
       y__h26464,
       y__h26523,
       y__h26656,
       y__h26715,
       y__h27388,
       y__h27446,
       y__h27576,
       y__h27634,
       y__h27764,
       y__h27822,
       y__h27952,
       y__h28010,
       y__h28140,
       y__h28198,
       y__h2820,
       y__h28328,
       y__h28386,
       y__h3009,
       y__h30351,
       y__h30537,
       y__h30723,
       y__h30909,
       y__h31095,
       y__h31281,
       y__h31467,
       y__h31653,
       y__h31839,
       y__h3198,
       y__h32025,
       y__h32211,
       y__h32397,
       y__h32583,
       y__h32769,
       y__h32955,
       y__h33141,
       y__h33327,
       y__h33513,
       y__h33699,
       y__h3387,
       y__h33885,
       y__h34071,
       y__h34257,
       y__h3576,
       y__h3765,
       y__h3978,
       y__h3980,
       y__h40370,
       y__h40556,
       y__h40742,
       y__h40928,
       y__h4105,
       y__h4107,
       y__h41114,
       y__h41300,
       y__h4162,
       y__h41867,
       y__h42053,
       y__h42239,
       y__h42425,
       y__h42611,
       y__h42797,
       y__h4291,
       y__h4293,
       y__h4348,
       y__h4477,
       y__h4479,
       y__h4534,
       y__h4663,
       y__h4665,
       y__h4720,
       y__h4849,
       y__h4851,
       y__h4906,
       y__h5035,
       y__h5037,
       y__h5092,
       y__h51848,
       y__h52034,
       y__h52220,
       y__h52406,
       y__h52592,
       y__h52778,
       y__h52964,
       y__h53150,
       y__h53336,
       y__h53522,
       y__h53708,
       y__h53894,
       y__h54080,
       y__h54266,
       y__h54452,
       y__h54638,
       y__h54824,
       y__h55010,
       y__h55196,
       y__h55382,
       y__h55568,
       y__h55754,
       y__h55940,
       y__h57127,
       y__h57313,
       y__h57499,
       y__h57685,
       y__h57871,
       y__h58057,
       y__h58243,
       y__h58429,
       y__h58615,
       y__h58801,
       y__h58987,
       y__h59173,
       y__h59359,
       y__h59545,
       y__h59731,
       y__h59917,
       y__h60103,
       y__h60289,
       y__h60475,
       y__h60661,
       y__h60847,
       y__h61033,
       y__h61219,
       y__h61874,
       y__h62063,
       y__h62252,
       y__h62441,
       y__h62630,
       y__h62819,
       y__h6947,
       y__h7006,
       y__h7053,
       y__h7139,
       y__h7198,
       y__h7331,
       y__h7390,
       y__h7523,
       y__h7582,
       y__h7715,
       y__h7774,
       y__h7907,
       y__h7966,
       y__h8099,
       y__h8158,
       y__h8291,
       y__h8350,
       y__h8483,
       y__h8542,
       y__h8675,
       y__h8734,
       y__h8867,
       y__h8926,
       y__h9059,
       y__h9118,
       y__h9251,
       y__h9310,
       y__h9443,
       y__h9502,
       y__h9635,
       y__h9694,
       y__h9827,
       y__h9886;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = assembled_answer ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     got_A && got_B && !operands_swapped_if_needed && !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;
  assign WILL_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     round_addition_result &&
	     !round_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_round_sub
  assign CAN_FIRE_RL_round_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     round_subtraction_result &&
	     !round_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_round_sub =
	     CAN_FIRE_RL_round_sub && !WILL_FIRE_RL_round_add ;

  // rule RL_adjust_subres
  assign CAN_FIRE_RL_adjust_subres =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     add_prep_done &&
	     adj_sub &&
	     !adj_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_adjust_subres = CAN_FIRE_RL_adjust_subres ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     add_prep_done &&
	     do_add &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_sub
  assign CAN_FIRE_RL_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     add_prep_done &&
	     do_sub &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_sub = CAN_FIRE_RL_sub ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     round_done &&
	     !assembled_answer &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;
  assign WILL_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;

  // rule RL_handle_zero_case
  assign CAN_FIRE_RL_handle_zero_case = MUX_handle_zero_write_1__SEL_2 ;
  assign WILL_FIRE_RL_handle_zero_case = MUX_handle_zero_write_1__SEL_2 ;

  // rule RL_handle_oneinpzero_case
  assign CAN_FIRE_RL_handle_oneinpzero_case = handle_oneinpzero ;
  assign WILL_FIRE_RL_handle_oneinpzero_case = handle_oneinpzero ;

  // rule RL_deassert_assembled_answer
  assign CAN_FIRE_RL_deassert_assembled_answer = assembled_answer ;
  assign WILL_FIRE_RL_deassert_assembled_answer =
	     assembled_answer && !handle_oneinpzero &&
	     !WILL_FIRE_RL_handle_zero_case ;

  // inputs to muxes for submodule ports
  assign MUX_do_add_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ;
  assign MUX_do_sub_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ;
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57 ;
  assign MUX_fp_a_write_1__SEL_2 =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ;
  assign MUX_fp_b_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45 ;
  assign MUX_handle_zero_write_1__SEL_2 = handle_zero && !handle_oneinpzero ;
  assign MUX_temp_B_write_1__SEL_1 =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     !add_prep_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign MUX_temp_B_write_1__SEL_2 =
	     got_A && got_B && operands_swapped_if_needed &&
	     !expdiff_calculated &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_2 =
	     { x__h61470,
	       IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256[22:1],
	       IF_IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_s_ETC__q12[0] } ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_3 =
	     { x__h39973,
	       IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132[22:1],
	       IF_IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_s_ETC__q13[0] } ;
  assign MUX_fp_a_write_1__VAL_2 =
	     { fp_a[31], x_exponent__h26995, fp_a[22:0] } ;
  assign MUX_fp_a_write_1__VAL_3 = { get_A_a, 16'b0 } ;
  assign MUX_fp_b_write_1__VAL_1 =
	     (fp_a[30:23] == 8'd0 && fp_a[22:0] == 23'd0 ||
	      fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0) ?
	       { 1'd0, fp_b[30:0] } :
	       fp_a ;
  assign MUX_fp_c_write_1__VAL_1 = { sign_c, add_res_with_adj_exp } ;
  assign MUX_fp_c_write_1__VAL_2 =
	     { x_sign__h70340, x_exponent__h70341, x_fraction__h70342 } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_2 =
	     { x__h26655 ^ y__h26656,
	       x__h26463 ^ y__h26464,
	       temp_A_53_BIT_47_61_XOR_INV_temp_B_45_29_PLUS__ETC___d850 } ;
  assign MUX_temp_sum_write_1__VAL_3 =
	     { x__h15970 ^ y__h15971,
	       x__h16076 ^ y__h15779,
	       temp_A_53_BIT_47_61_XOR_temp_B_45_BIT_47_62_64_ETC___d523 } ;
  assign MUX_temp_sum_write_1__VAL_4 = { temp_sum[48:0], 1'd0 } ;

  // register add_done
  assign add_done_D_IN = 1'd0 ;
  assign add_done_EN = WILL_FIRE_RL_deassert_assembled_answer ;

  // register add_prep_done
  assign add_prep_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign add_prep_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_round_sub or
	  MUX_add_res_with_adj_exp_write_1__VAL_2 or
	  WILL_FIRE_RL_round_add or MUX_add_res_with_adj_exp_write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: add_res_with_adj_exp_D_IN = 31'd0;
    WILL_FIRE_RL_round_sub:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_2;
    WILL_FIRE_RL_round_add:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_3;
    default: add_res_with_adj_exp_D_IN =
		 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_done
  assign adj_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_done_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_sub
  assign adj_sub_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_sub_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_sub ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || handle_oneinpzero ||
	     WILL_FIRE_RL_handle_zero_case ||
	     WILL_FIRE_RL_assemble_answer ;

  // register do_add
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_add_write_1__SEL_2 or WILL_FIRE_RL_add)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_add_D_IN = 1'd0;
    MUX_do_add_write_1__SEL_2: do_add_D_IN = 1'd1;
    WILL_FIRE_RL_add: do_add_D_IN = 1'd0;
    default: do_add_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_add_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ||
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_add ;

  // register do_sub
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_sub_write_1__SEL_2 or WILL_FIRE_RL_sub)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_sub_D_IN = 1'd0;
    MUX_do_sub_write_1__SEL_2: do_sub_D_IN = 1'd1;
    WILL_FIRE_RL_sub: do_sub_D_IN = 1'd0;
    default: do_sub_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_sub_EN =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h5034 ^ y__h5035,
	       x__h4848 ^ y__h4849,
	       fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d137 } ;
  assign expdiff_EN = MUX_temp_B_write_1__SEL_2 ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign expdiff_calculated_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  always@(MUX_fp_a_write_1__SEL_1 or
	  fp_b or
	  MUX_fp_a_write_1__SEL_2 or
	  MUX_fp_a_write_1__VAL_2 or EN_get_A or MUX_fp_a_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fp_a_write_1__SEL_1: fp_a_D_IN = fp_b;
      MUX_fp_a_write_1__SEL_2: fp_a_D_IN = MUX_fp_a_write_1__VAL_2;
      EN_get_A: fp_a_D_IN = MUX_fp_a_write_1__VAL_3;
      default: fp_a_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57 ||
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     EN_get_A ;

  // register fp_b
  assign fp_b_D_IN =
	     MUX_fp_b_write_1__SEL_1 ? MUX_fp_b_write_1__VAL_1 : get_B_b ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45 ||
	     EN_get_B ;

  // register fp_c
  always@(WILL_FIRE_RL_assemble_answer or
	  MUX_fp_c_write_1__VAL_1 or
	  handle_oneinpzero or
	  MUX_fp_c_write_1__VAL_2 or WILL_FIRE_RL_handle_zero_case)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_assemble_answer: fp_c_D_IN = MUX_fp_c_write_1__VAL_1;
      handle_oneinpzero: fp_c_D_IN = MUX_fp_c_write_1__VAL_2;
      WILL_FIRE_RL_handle_zero_case: fp_c_D_IN = 32'd0;
      default: fp_c_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_c_EN =
	     WILL_FIRE_RL_assemble_answer || handle_oneinpzero ||
	     WILL_FIRE_RL_handle_zero_case ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign got_A_EN = WILL_FIRE_RL_deassert_assembled_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign got_B_EN = WILL_FIRE_RL_deassert_assembled_answer || EN_get_B ;

  // register handle_oneinpzero
  assign handle_oneinpzero_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer && !handle_oneinpzero ;
  assign handle_oneinpzero_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d51 ||
	     handle_oneinpzero ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register handle_zero
  assign handle_zero_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer &&
	     !WILL_FIRE_RL_handle_zero_case ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 &&
	     fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ||
	     WILL_FIRE_RL_handle_zero_case ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register inpA_fifo_rv
  assign inpA_fifo_rv_D_IN = inpA_fifo_rv ;
  assign inpA_fifo_rv_EN = 1'b1 ;

  // register inpB_fifo_rv
  assign inpB_fifo_rv_D_IN = inpB_fifo_rv ;
  assign inpB_fifo_rv_EN = 1'b1 ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign operands_swapped_if_needed_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_swap_operands_if_needed ;

  // register out_fifo_rv
  assign out_fifo_rv_D_IN = out_fifo_rv ;
  assign out_fifo_rv_EN = 1'b1 ;

  // register round_addition_result
  assign round_addition_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_addition_result_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_subtraction_result_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = MUX_temp_B_write_1__SEL_1 ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = MUX_temp_B_write_1__SEL_2 ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_add_prep ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN = WILL_FIRE_RL_add_prep || WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_sub or
	  MUX_temp_sum_write_1__VAL_2 or
	  WILL_FIRE_RL_add or
	  MUX_temp_sum_write_1__VAL_3 or
	  MUX_fp_a_write_1__SEL_2 or MUX_temp_sum_write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: temp_sum_D_IN = 50'd0;
    WILL_FIRE_RL_sub: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_2;
    WILL_FIRE_RL_add: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_3;
    MUX_fp_a_write_1__SEL_2: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_4;
    default: temp_sum_D_IN =
		 50'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign temp_sum_EN =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_add ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_s_ETC__q12 =
	     IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_s_ETC__q13 =
	     IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_exp___10885_BIT_0_THEN_1_ELSE_0__q7 =
	     (~exp___1__h50885[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5 =
	     (~temp_sum[23]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_NOT_temp_sum_59_BIT_23_143_144_OR_temp_sum__ETC___d1255 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       temp_sum[46:24] :
	       (temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173 ?
		  x__h56122 :
		  x__h56145) ;
  assign IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026 ?
		  x__h61401 :
		  x__h61424) ;
  assign IF_NOT_temp_sum_59_BIT_25_06_07_OR_temp_sum_59_ETC___d1080 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974 ?
		  x__h34625 :
		  x__h34648) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_A_BIT_0_XOR_INV_temp_B_45_29_PLUS_1_30_ETC__q11 =
	     (temp_A[0] ^ INV_temp_B_45_29_PLUS_1___d530[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10 =
	     (temp_A[0] ^ temp_B[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256 =
	     temp_sum[48] ?
	       IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131 :
	       IF_NOT_temp_sum_59_BIT_23_143_144_OR_temp_sum__ETC___d1255 ;
  assign IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_59_BIT_25_06_07_OR_temp_sum_59_ETC___d1080 :
	       IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131 ;
  assign INV_fp_a_3_BIT_26_6_66_XOR_fp_a_3_BIT_25_00_OR_ETC___d892 =
	     { x__h27575 ^ y__h27576,
	       x__h27387 ^ y__h27388,
	       x__h27260 ^ fp_a[23],
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign INV_fp_a_3_BIT_28_8_64_XOR_fp_a_3_BIT_27_2_OR__ETC___d893 =
	     { x__h27951 ^ y__h27952,
	       x__h27763 ^ y__h27764,
	       INV_fp_a_3_BIT_26_6_66_XOR_fp_a_3_BIT_25_00_OR_ETC___d892 } ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign INV_temp_B_45_29_PLUS_1___d530 = ~temp_B + 50'd1 ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24) &&
	     (fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0 ||
	      (fp_a[30:23] != 8'd0 || fp_a[22:0] != 23'd0) &&
	      fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42) ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d51 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24) &&
	     (fp_a[30:23] == 8'd0 && fp_a[22:0] == 23'd0 ||
	      fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0) ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24) &&
	     (fp_a[30:23] != 8'd0 || fp_a[22:0] != 23'd0) &&
	     (fp_b[30:23] != 8'd0 || fp_b[22:0] != 23'd0) &&
	     fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42 ;
  assign _theResult___snd__h39901 =
	     { fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920,
	       x__h42610,
	       x__h42424,
	       x__h42238,
	       x__h42052,
	       x__h41866,
	       x__h41740,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd__h56119 =
	     { exp___1__h50885[7] ^ y__h62819,
	       exp___1__h50885[6] ^ y__h62630,
	       fp_a_3_BITS_30_TO_23_4_MINUS_0b1_149_BIT_5_176_ETC___d1200 } ;
  assign _theResult___snd_fst__h39976 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h39901 :
	       (temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974 ?
		  fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d994 :
		  _theResult___snd__h39901) ;
  assign _theResult___snd_fst__h42975 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h42983 ;
  assign _theResult___snd_fst__h42983 =
	     temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026 ?
	       _theResult___snd__h39901 :
	       fp_a[30:23] ;
  assign _theResult___snd_fst__h61473 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       exp___1__h50885 :
	       _theResult___snd_fst__h61481 ;
  assign _theResult___snd_fst__h61481 =
	     temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173 ?
	       _theResult___snd__h56119 :
	       exp___1__h50885 ;
  assign exp___1__h50885 = fp_a[30:23] - 8'b00000001 ;
  assign fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 =
	     fp_a[22:0] == fp_b[22:0] ;
  assign fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 =
	     fp_a[30:23] == fp_b[30:23] ;
  assign fp_a_3_BITS_30_TO_23_4_MINUS_0b1_149_BIT_5_176_ETC___d1200 =
	     { exp___1__h50885[5] ^ y__h62441,
	       exp___1__h50885[4] ^ y__h62252,
	       exp___1__h50885[3] ^ y__h62063,
	       exp___1__h50885[2] ^ y__h61874,
	       exp___1__h50885[1] ^ exp___1__h50885[0],
	       IF_INV_exp___10885_BIT_0_THEN_1_ELSE_0__q7[0] } ;
  assign fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42 =
	     fp_a[30:23] < fp_b[30:23] ||
	     fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 &&
	     fp_a[22:0] < fp_b[22:0] ;
  assign fp_a_3_BIT_24_04_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d135 =
	     { x__h3977 ^ y__h3978,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9[0] } ;
  assign fp_a_3_BIT_26_6_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d136 =
	     { x__h4290 ^ y__h4291,
	       x__h4104 ^ y__h4105,
	       fp_a_3_BIT_24_04_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d135 } ;
  assign fp_a_3_BIT_26_6_XOR_fp_a_3_BIT_25_00_AND_fp_a__ETC___d992 =
	     { x__h42052 ^ y__h42053,
	       x__h41866 ^ y__h41867,
	       x__h41740 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8[0] } ;
  assign fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d137 =
	     { x__h4662 ^ y__h4663,
	       x__h4476 ^ y__h4477,
	       fp_a_3_BIT_26_6_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d136 } ;
  assign fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_2_AND_fp_a_3_ETC___d993 =
	     { x__h42424 ^ y__h42425,
	       x__h42238 ^ y__h42239,
	       fp_a_3_BIT_26_6_XOR_fp_a_3_BIT_25_00_AND_fp_a__ETC___d992 } ;
  assign fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920 =
	     fp_a[30] ^ y__h41300 ;
  assign fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d994 =
	     { fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920 ^
	       y__h42797,
	       x__h42610 ^ y__h42611,
	       fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_2_AND_fp_a_3_ETC___d993 } ;
  assign fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 = fp_a[31] == fp_b[31] ;
  assign got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 =
	     got_A && got_B && operands_swapped_if_needed &&
	     expdiff_calculated ;
  assign temp_A_53_BIT_11_05_XOR_INV_temp_B_45_29_PLUS__ETC___d832 =
	     { x__h19359 ^ y__h19360,
	       x__h19167 ^ y__h19168,
	       temp_A_53_BIT_9_13_XOR_INV_temp_B_45_29_PLUS_1_ETC___d831 } ;
  assign temp_A_53_BIT_11_05_XOR_temp_B_45_BIT_11_06_08_ETC___d505 =
	     { x__h8972 ^ y__h8675,
	       x__h8780 ^ y__h8483,
	       temp_A_53_BIT_9_13_XOR_temp_B_45_BIT_9_14_16_X_ETC___d504 } ;
  assign temp_A_53_BIT_13_97_XOR_INV_temp_B_45_29_PLUS__ETC___d833 =
	     { x__h19743 ^ y__h19744,
	       x__h19551 ^ y__h19552,
	       temp_A_53_BIT_11_05_XOR_INV_temp_B_45_29_PLUS__ETC___d832 } ;
  assign temp_A_53_BIT_13_97_XOR_temp_B_45_BIT_13_98_00_ETC___d506 =
	     { x__h9356 ^ y__h9059,
	       x__h9164 ^ y__h8867,
	       temp_A_53_BIT_11_05_XOR_temp_B_45_BIT_11_06_08_ETC___d505 } ;
  assign temp_A_53_BIT_15_89_XOR_INV_temp_B_45_29_PLUS__ETC___d834 =
	     { x__h20127 ^ y__h20128,
	       x__h19935 ^ y__h19936,
	       temp_A_53_BIT_13_97_XOR_INV_temp_B_45_29_PLUS__ETC___d833 } ;
  assign temp_A_53_BIT_15_89_XOR_temp_B_45_BIT_15_90_92_ETC___d507 =
	     { x__h9740 ^ y__h9443,
	       x__h9548 ^ y__h9251,
	       temp_A_53_BIT_13_97_XOR_temp_B_45_BIT_13_98_00_ETC___d506 } ;
  assign temp_A_53_BIT_17_81_XOR_INV_temp_B_45_29_PLUS__ETC___d835 =
	     { x__h20511 ^ y__h20512,
	       x__h20319 ^ y__h20320,
	       temp_A_53_BIT_15_89_XOR_INV_temp_B_45_29_PLUS__ETC___d834 } ;
  assign temp_A_53_BIT_17_81_XOR_temp_B_45_BIT_17_82_84_ETC___d508 =
	     { x__h10124 ^ y__h9827,
	       x__h9932 ^ y__h9635,
	       temp_A_53_BIT_15_89_XOR_temp_B_45_BIT_15_90_92_ETC___d507 } ;
  assign temp_A_53_BIT_19_73_XOR_INV_temp_B_45_29_PLUS__ETC___d836 =
	     { x__h20895 ^ y__h20896,
	       x__h20703 ^ y__h20704,
	       temp_A_53_BIT_17_81_XOR_INV_temp_B_45_29_PLUS__ETC___d835 } ;
  assign temp_A_53_BIT_19_73_XOR_temp_B_45_BIT_19_74_76_ETC___d509 =
	     { x__h10508 ^ y__h10211,
	       x__h10316 ^ y__h10019,
	       temp_A_53_BIT_17_81_XOR_temp_B_45_BIT_17_82_84_ETC___d508 } ;
  assign temp_A_53_BIT_1_45_XOR_INV_temp_B_45_29_PLUS_1_ETC___d827 =
	     { x__h17502 ^ y__h17503,
	       IF_temp_A_BIT_0_XOR_INV_temp_B_45_29_PLUS_1_30_ETC__q11[0] } ;
  assign temp_A_53_BIT_1_45_XOR_temp_B_45_BIT_1_46_48_X_ETC___d500 =
	     { x__h7052 ^ y__h7053,
	       IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10[0] } ;
  assign temp_A_53_BIT_21_65_XOR_INV_temp_B_45_29_PLUS__ETC___d837 =
	     { x__h21279 ^ y__h21280,
	       x__h21087 ^ y__h21088,
	       temp_A_53_BIT_19_73_XOR_INV_temp_B_45_29_PLUS__ETC___d836 } ;
  assign temp_A_53_BIT_21_65_XOR_temp_B_45_BIT_21_66_68_ETC___d510 =
	     { x__h10892 ^ y__h10595,
	       x__h10700 ^ y__h10403,
	       temp_A_53_BIT_19_73_XOR_temp_B_45_BIT_19_74_76_ETC___d509 } ;
  assign temp_A_53_BIT_23_57_XOR_INV_temp_B_45_29_PLUS__ETC___d838 =
	     { x__h21663 ^ y__h21664,
	       x__h21471 ^ y__h21472,
	       temp_A_53_BIT_21_65_XOR_INV_temp_B_45_29_PLUS__ETC___d837 } ;
  assign temp_A_53_BIT_23_57_XOR_temp_B_45_BIT_23_58_60_ETC___d511 =
	     { x__h11276 ^ y__h10979,
	       x__h11084 ^ y__h10787,
	       temp_A_53_BIT_21_65_XOR_temp_B_45_BIT_21_66_68_ETC___d510 } ;
  assign temp_A_53_BIT_25_49_XOR_INV_temp_B_45_29_PLUS__ETC___d839 =
	     { x__h22047 ^ y__h22048,
	       x__h21855 ^ y__h21856,
	       temp_A_53_BIT_23_57_XOR_INV_temp_B_45_29_PLUS__ETC___d838 } ;
  assign temp_A_53_BIT_25_49_XOR_temp_B_45_BIT_25_50_52_ETC___d512 =
	     { x__h11660 ^ y__h11363,
	       x__h11468 ^ y__h11171,
	       temp_A_53_BIT_23_57_XOR_temp_B_45_BIT_23_58_60_ETC___d511 } ;
  assign temp_A_53_BIT_27_41_XOR_INV_temp_B_45_29_PLUS__ETC___d840 =
	     { x__h22431 ^ y__h22432,
	       x__h22239 ^ y__h22240,
	       temp_A_53_BIT_25_49_XOR_INV_temp_B_45_29_PLUS__ETC___d839 } ;
  assign temp_A_53_BIT_27_41_XOR_temp_B_45_BIT_27_42_44_ETC___d513 =
	     { x__h12044 ^ y__h11747,
	       x__h11852 ^ y__h11555,
	       temp_A_53_BIT_25_49_XOR_temp_B_45_BIT_25_50_52_ETC___d512 } ;
  assign temp_A_53_BIT_29_33_XOR_INV_temp_B_45_29_PLUS__ETC___d841 =
	     { x__h22815 ^ y__h22816,
	       x__h22623 ^ y__h22624,
	       temp_A_53_BIT_27_41_XOR_INV_temp_B_45_29_PLUS__ETC___d840 } ;
  assign temp_A_53_BIT_29_33_XOR_temp_B_45_BIT_29_34_36_ETC___d514 =
	     { x__h12428 ^ y__h12131,
	       x__h12236 ^ y__h11939,
	       temp_A_53_BIT_27_41_XOR_temp_B_45_BIT_27_42_44_ETC___d513 } ;
  assign temp_A_53_BIT_31_25_XOR_INV_temp_B_45_29_PLUS__ETC___d842 =
	     { x__h23199 ^ y__h23200,
	       x__h23007 ^ y__h23008,
	       temp_A_53_BIT_29_33_XOR_INV_temp_B_45_29_PLUS__ETC___d841 } ;
  assign temp_A_53_BIT_31_25_XOR_temp_B_45_BIT_31_26_28_ETC___d515 =
	     { x__h12812 ^ y__h12515,
	       x__h12620 ^ y__h12323,
	       temp_A_53_BIT_29_33_XOR_temp_B_45_BIT_29_34_36_ETC___d514 } ;
  assign temp_A_53_BIT_33_17_XOR_INV_temp_B_45_29_PLUS__ETC___d843 =
	     { x__h23583 ^ y__h23584,
	       x__h23391 ^ y__h23392,
	       temp_A_53_BIT_31_25_XOR_INV_temp_B_45_29_PLUS__ETC___d842 } ;
  assign temp_A_53_BIT_33_17_XOR_temp_B_45_BIT_33_18_20_ETC___d516 =
	     { x__h13196 ^ y__h12899,
	       x__h13004 ^ y__h12707,
	       temp_A_53_BIT_31_25_XOR_temp_B_45_BIT_31_26_28_ETC___d515 } ;
  assign temp_A_53_BIT_35_09_XOR_INV_temp_B_45_29_PLUS__ETC___d844 =
	     { x__h23967 ^ y__h23968,
	       x__h23775 ^ y__h23776,
	       temp_A_53_BIT_33_17_XOR_INV_temp_B_45_29_PLUS__ETC___d843 } ;
  assign temp_A_53_BIT_35_09_XOR_temp_B_45_BIT_35_10_12_ETC___d517 =
	     { x__h13580 ^ y__h13283,
	       x__h13388 ^ y__h13091,
	       temp_A_53_BIT_33_17_XOR_temp_B_45_BIT_33_18_20_ETC___d516 } ;
  assign temp_A_53_BIT_37_01_XOR_INV_temp_B_45_29_PLUS__ETC___d845 =
	     { x__h24351 ^ y__h24352,
	       x__h24159 ^ y__h24160,
	       temp_A_53_BIT_35_09_XOR_INV_temp_B_45_29_PLUS__ETC___d844 } ;
  assign temp_A_53_BIT_37_01_XOR_temp_B_45_BIT_37_02_04_ETC___d518 =
	     { x__h13964 ^ y__h13667,
	       x__h13772 ^ y__h13475,
	       temp_A_53_BIT_35_09_XOR_temp_B_45_BIT_35_10_12_ETC___d517 } ;
  assign temp_A_53_BIT_39_93_XOR_INV_temp_B_45_29_PLUS__ETC___d846 =
	     { x__h24735 ^ y__h24736,
	       x__h24543 ^ y__h24544,
	       temp_A_53_BIT_37_01_XOR_INV_temp_B_45_29_PLUS__ETC___d845 } ;
  assign temp_A_53_BIT_39_93_XOR_temp_B_45_BIT_39_94_96_ETC___d519 =
	     { x__h14348 ^ y__h14051,
	       x__h14156 ^ y__h13859,
	       temp_A_53_BIT_37_01_XOR_temp_B_45_BIT_37_02_04_ETC___d518 } ;
  assign temp_A_53_BIT_3_37_XOR_INV_temp_B_45_29_PLUS_1_ETC___d828 =
	     { x__h17823 ^ y__h17824,
	       x__h17631 ^ y__h17632,
	       temp_A_53_BIT_1_45_XOR_INV_temp_B_45_29_PLUS_1_ETC___d827 } ;
  assign temp_A_53_BIT_3_37_XOR_temp_B_45_BIT_3_38_40_X_ETC___d501 =
	     { x__h7436 ^ y__h7139,
	       x__h7244 ^ y__h6947,
	       temp_A_53_BIT_1_45_XOR_temp_B_45_BIT_1_46_48_X_ETC___d500 } ;
  assign temp_A_53_BIT_41_85_XOR_INV_temp_B_45_29_PLUS__ETC___d847 =
	     { x__h25119 ^ y__h25120,
	       x__h24927 ^ y__h24928,
	       temp_A_53_BIT_39_93_XOR_INV_temp_B_45_29_PLUS__ETC___d846 } ;
  assign temp_A_53_BIT_41_85_XOR_temp_B_45_BIT_41_86_88_ETC___d520 =
	     { x__h14732 ^ y__h14435,
	       x__h14540 ^ y__h14243,
	       temp_A_53_BIT_39_93_XOR_temp_B_45_BIT_39_94_96_ETC___d519 } ;
  assign temp_A_53_BIT_43_77_XOR_INV_temp_B_45_29_PLUS__ETC___d848 =
	     { x__h25503 ^ y__h25504,
	       x__h25311 ^ y__h25312,
	       temp_A_53_BIT_41_85_XOR_INV_temp_B_45_29_PLUS__ETC___d847 } ;
  assign temp_A_53_BIT_43_77_XOR_temp_B_45_BIT_43_78_80_ETC___d521 =
	     { x__h15116 ^ y__h14819,
	       x__h14924 ^ y__h14627,
	       temp_A_53_BIT_41_85_XOR_temp_B_45_BIT_41_86_88_ETC___d520 } ;
  assign temp_A_53_BIT_45_69_XOR_INV_temp_B_45_29_PLUS__ETC___d849 =
	     { x__h25887 ^ y__h25888,
	       x__h25695 ^ y__h25696,
	       temp_A_53_BIT_43_77_XOR_INV_temp_B_45_29_PLUS__ETC___d848 } ;
  assign temp_A_53_BIT_45_69_XOR_temp_B_45_BIT_45_70_72_ETC___d522 =
	     { x__h15500 ^ y__h15203,
	       x__h15308 ^ y__h15011,
	       temp_A_53_BIT_43_77_XOR_temp_B_45_BIT_43_78_80_ETC___d521 } ;
  assign temp_A_53_BIT_47_61_XOR_INV_temp_B_45_29_PLUS__ETC___d850 =
	     { x__h26271 ^ y__h26272,
	       x__h26079 ^ y__h26080,
	       temp_A_53_BIT_45_69_XOR_INV_temp_B_45_29_PLUS__ETC___d849 } ;
  assign temp_A_53_BIT_47_61_XOR_temp_B_45_BIT_47_62_64_ETC___d523 =
	     { x__h15884 ^ y__h15587,
	       x__h15692 ^ y__h15395,
	       temp_A_53_BIT_45_69_XOR_temp_B_45_BIT_45_70_72_ETC___d522 } ;
  assign temp_A_53_BIT_5_29_XOR_INV_temp_B_45_29_PLUS_1_ETC___d829 =
	     { x__h18207 ^ y__h18208,
	       x__h18015 ^ y__h18016,
	       temp_A_53_BIT_3_37_XOR_INV_temp_B_45_29_PLUS_1_ETC___d828 } ;
  assign temp_A_53_BIT_5_29_XOR_temp_B_45_BIT_5_30_32_X_ETC___d502 =
	     { x__h7820 ^ y__h7523,
	       x__h7628 ^ y__h7331,
	       temp_A_53_BIT_3_37_XOR_temp_B_45_BIT_3_38_40_X_ETC___d501 } ;
  assign temp_A_53_BIT_7_21_XOR_INV_temp_B_45_29_PLUS_1_ETC___d830 =
	     { x__h18591 ^ y__h18592,
	       x__h18399 ^ y__h18400,
	       temp_A_53_BIT_5_29_XOR_INV_temp_B_45_29_PLUS_1_ETC___d829 } ;
  assign temp_A_53_BIT_7_21_XOR_temp_B_45_BIT_7_22_24_X_ETC___d503 =
	     { x__h8204 ^ y__h7907,
	       x__h8012 ^ y__h7715,
	       temp_A_53_BIT_5_29_XOR_temp_B_45_BIT_5_30_32_X_ETC___d502 } ;
  assign temp_A_53_BIT_9_13_XOR_INV_temp_B_45_29_PLUS_1_ETC___d831 =
	     { x__h18975 ^ y__h18976,
	       x__h18783 ^ y__h18784,
	       temp_A_53_BIT_7_21_XOR_INV_temp_B_45_29_PLUS_1_ETC___d830 } ;
  assign temp_A_53_BIT_9_13_XOR_temp_B_45_BIT_9_14_16_X_ETC___d504 =
	     { x__h8588 ^ y__h8291,
	       x__h8396 ^ y__h8099,
	       temp_A_53_BIT_7_21_XOR_temp_B_45_BIT_7_22_24_X_ETC___d503 } ;
  assign temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228 =
	     temp_sum[24] ^ temp_sum[23] ;
  assign temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227 =
	     temp_sum[25] ^ y__h51848 ;
  assign temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226 =
	     temp_sum[26] ^ y__h52034 ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103 =
	     temp_sum[27] ^ y__h57127 ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225 =
	     temp_sum[27] ^ y__h52220 ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1244 =
	     { temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226,
	       temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227,
	       temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228,
	       IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5[0] } ;
  assign temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052 =
	     temp_sum[28] ^ y__h30351 ;
  assign temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102 =
	     temp_sum[28] ^ y__h57313 ;
  assign temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224 =
	     temp_sum[28] ^ y__h52406 ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051 =
	     temp_sum[29] ^ y__h30537 ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101 =
	     temp_sum[29] ^ y__h57499 ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1120 =
	     { temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4[0] } ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223 =
	     temp_sum[29] ^ y__h52592 ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050 =
	     temp_sum[30] ^ y__h30723 ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1069 =
	     { temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100 =
	     temp_sum[30] ^ y__h57685 ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222 =
	     temp_sum[30] ^ y__h52778 ;
  assign temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049 =
	     temp_sum[31] ^ y__h30909 ;
  assign temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099 =
	     temp_sum[31] ^ y__h57871 ;
  assign temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221 =
	     temp_sum[31] ^ y__h52964 ;
  assign temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048 =
	     temp_sum[32] ^ y__h31095 ;
  assign temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098 =
	     temp_sum[32] ^ y__h58057 ;
  assign temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220 =
	     temp_sum[32] ^ y__h53150 ;
  assign temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047 =
	     temp_sum[33] ^ y__h31281 ;
  assign temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097 =
	     temp_sum[33] ^ y__h58243 ;
  assign temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219 =
	     temp_sum[33] ^ y__h53336 ;
  assign temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046 =
	     temp_sum[34] ^ y__h31467 ;
  assign temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096 =
	     temp_sum[34] ^ y__h58429 ;
  assign temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218 =
	     temp_sum[34] ^ y__h53522 ;
  assign temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045 =
	     temp_sum[35] ^ y__h31653 ;
  assign temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095 =
	     temp_sum[35] ^ y__h58615 ;
  assign temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217 =
	     temp_sum[35] ^ y__h53708 ;
  assign temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044 =
	     temp_sum[36] ^ y__h31839 ;
  assign temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094 =
	     temp_sum[36] ^ y__h58801 ;
  assign temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216 =
	     temp_sum[36] ^ y__h53894 ;
  assign temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043 =
	     temp_sum[37] ^ y__h32025 ;
  assign temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093 =
	     temp_sum[37] ^ y__h58987 ;
  assign temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215 =
	     temp_sum[37] ^ y__h54080 ;
  assign temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042 =
	     temp_sum[38] ^ y__h32211 ;
  assign temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092 =
	     temp_sum[38] ^ y__h59173 ;
  assign temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214 =
	     temp_sum[38] ^ y__h54266 ;
  assign temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041 =
	     temp_sum[39] ^ y__h32397 ;
  assign temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091 =
	     temp_sum[39] ^ y__h59359 ;
  assign temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213 =
	     temp_sum[39] ^ y__h54452 ;
  assign temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040 =
	     temp_sum[40] ^ y__h32583 ;
  assign temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090 =
	     temp_sum[40] ^ y__h59545 ;
  assign temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212 =
	     temp_sum[40] ^ y__h54638 ;
  assign temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039 =
	     temp_sum[41] ^ y__h32769 ;
  assign temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089 =
	     temp_sum[41] ^ y__h59731 ;
  assign temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211 =
	     temp_sum[41] ^ y__h54824 ;
  assign temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038 =
	     temp_sum[42] ^ y__h32955 ;
  assign temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088 =
	     temp_sum[42] ^ y__h59917 ;
  assign temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210 =
	     temp_sum[42] ^ y__h55010 ;
  assign temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037 =
	     temp_sum[43] ^ y__h33141 ;
  assign temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087 =
	     temp_sum[43] ^ y__h60103 ;
  assign temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209 =
	     temp_sum[43] ^ y__h55196 ;
  assign temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036 =
	     temp_sum[44] ^ y__h33327 ;
  assign temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086 =
	     temp_sum[44] ^ y__h60289 ;
  assign temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208 =
	     temp_sum[44] ^ y__h55382 ;
  assign temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035 =
	     temp_sum[45] ^ y__h33513 ;
  assign temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085 =
	     temp_sum[45] ^ y__h60475 ;
  assign temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207 =
	     temp_sum[45] ^ y__h55568 ;
  assign temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034 =
	     temp_sum[46] ^ y__h33699 ;
  assign temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084 =
	     temp_sum[46] ^ y__h60661 ;
  assign temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033 =
	     temp_sum[47] ^ y__h33885 ;
  assign temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083 =
	     temp_sum[47] ^ y__h60847 ;
  assign temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173 =
	     temp_sum[47] ^ y__h55940 ;
  assign temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032 =
	     temp_sum[48] ^ y__h34071 ;
  assign temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974 =
	     temp_sum[49] & y__h34257 ;
  assign temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026 =
	     temp_sum[49] ^ y__h61219 ;
  assign x__h10077 = temp_A[17] & temp_B[17] ;
  assign x__h10124 = temp_A[17] ^ temp_B[17] ;
  assign x__h10269 = temp_A[18] & temp_B[18] ;
  assign x__h10316 = temp_A[18] ^ temp_B[18] ;
  assign x__h10461 = temp_A[19] & temp_B[19] ;
  assign x__h10508 = temp_A[19] ^ temp_B[19] ;
  assign x__h10653 = temp_A[20] & temp_B[20] ;
  assign x__h10700 = temp_A[20] ^ temp_B[20] ;
  assign x__h10845 = temp_A[21] & temp_B[21] ;
  assign x__h10892 = temp_A[21] ^ temp_B[21] ;
  assign x__h11037 = temp_A[22] & temp_B[22] ;
  assign x__h11084 = temp_A[22] ^ temp_B[22] ;
  assign x__h11229 = temp_A[23] & temp_B[23] ;
  assign x__h11276 = temp_A[23] ^ temp_B[23] ;
  assign x__h11421 = temp_A[24] & temp_B[24] ;
  assign x__h11468 = temp_A[24] ^ temp_B[24] ;
  assign x__h11613 = temp_A[25] & temp_B[25] ;
  assign x__h11660 = temp_A[25] ^ temp_B[25] ;
  assign x__h11805 = temp_A[26] & temp_B[26] ;
  assign x__h11852 = temp_A[26] ^ temp_B[26] ;
  assign x__h11997 = temp_A[27] & temp_B[27] ;
  assign x__h12044 = temp_A[27] ^ temp_B[27] ;
  assign x__h12189 = temp_A[28] & temp_B[28] ;
  assign x__h12236 = temp_A[28] ^ temp_B[28] ;
  assign x__h12381 = temp_A[29] & temp_B[29] ;
  assign x__h12428 = temp_A[29] ^ temp_B[29] ;
  assign x__h12573 = temp_A[30] & temp_B[30] ;
  assign x__h12620 = temp_A[30] ^ temp_B[30] ;
  assign x__h12765 = temp_A[31] & temp_B[31] ;
  assign x__h12812 = temp_A[31] ^ temp_B[31] ;
  assign x__h12957 = temp_A[32] & temp_B[32] ;
  assign x__h13004 = temp_A[32] ^ temp_B[32] ;
  assign x__h13149 = temp_A[33] & temp_B[33] ;
  assign x__h13196 = temp_A[33] ^ temp_B[33] ;
  assign x__h13341 = temp_A[34] & temp_B[34] ;
  assign x__h13388 = temp_A[34] ^ temp_B[34] ;
  assign x__h13533 = temp_A[35] & temp_B[35] ;
  assign x__h13580 = temp_A[35] ^ temp_B[35] ;
  assign x__h13725 = temp_A[36] & temp_B[36] ;
  assign x__h13772 = temp_A[36] ^ temp_B[36] ;
  assign x__h13917 = temp_A[37] & temp_B[37] ;
  assign x__h13964 = temp_A[37] ^ temp_B[37] ;
  assign x__h14109 = temp_A[38] & temp_B[38] ;
  assign x__h14156 = temp_A[38] ^ temp_B[38] ;
  assign x__h14301 = temp_A[39] & temp_B[39] ;
  assign x__h14348 = temp_A[39] ^ temp_B[39] ;
  assign x__h14493 = temp_A[40] & temp_B[40] ;
  assign x__h14540 = temp_A[40] ^ temp_B[40] ;
  assign x__h14685 = temp_A[41] & temp_B[41] ;
  assign x__h14732 = temp_A[41] ^ temp_B[41] ;
  assign x__h14877 = temp_A[42] & temp_B[42] ;
  assign x__h14924 = temp_A[42] ^ temp_B[42] ;
  assign x__h15069 = temp_A[43] & temp_B[43] ;
  assign x__h15116 = temp_A[43] ^ temp_B[43] ;
  assign x__h15261 = temp_A[44] & temp_B[44] ;
  assign x__h15308 = temp_A[44] ^ temp_B[44] ;
  assign x__h15453 = temp_A[45] & temp_B[45] ;
  assign x__h15500 = temp_A[45] ^ temp_B[45] ;
  assign x__h15645 = temp_A[46] & temp_B[46] ;
  assign x__h15692 = temp_A[46] ^ temp_B[46] ;
  assign x__h15837 = temp_A[47] & temp_B[47] ;
  assign x__h15884 = temp_A[47] ^ temp_B[47] ;
  assign x__h15970 = temp_A[49] ^ temp_B[49] ;
  assign x__h16029 = temp_A[48] & temp_B[48] ;
  assign x__h16076 = temp_A[48] ^ temp_B[48] ;
  assign x__h17502 = temp_A[1] ^ INV_temp_B_45_29_PLUS_1___d530[1] ;
  assign x__h17631 = temp_A[2] ^ INV_temp_B_45_29_PLUS_1___d530[2] ;
  assign x__h17690 = temp_A[1] & INV_temp_B_45_29_PLUS_1___d530[1] ;
  assign x__h17823 = temp_A[3] ^ INV_temp_B_45_29_PLUS_1___d530[3] ;
  assign x__h17882 = temp_A[2] & INV_temp_B_45_29_PLUS_1___d530[2] ;
  assign x__h18015 = temp_A[4] ^ INV_temp_B_45_29_PLUS_1___d530[4] ;
  assign x__h18074 = temp_A[3] & INV_temp_B_45_29_PLUS_1___d530[3] ;
  assign x__h18207 = temp_A[5] ^ INV_temp_B_45_29_PLUS_1___d530[5] ;
  assign x__h18266 = temp_A[4] & INV_temp_B_45_29_PLUS_1___d530[4] ;
  assign x__h18399 = temp_A[6] ^ INV_temp_B_45_29_PLUS_1___d530[6] ;
  assign x__h18458 = temp_A[5] & INV_temp_B_45_29_PLUS_1___d530[5] ;
  assign x__h18591 = temp_A[7] ^ INV_temp_B_45_29_PLUS_1___d530[7] ;
  assign x__h18650 = temp_A[6] & INV_temp_B_45_29_PLUS_1___d530[6] ;
  assign x__h18783 = temp_A[8] ^ INV_temp_B_45_29_PLUS_1___d530[8] ;
  assign x__h18842 = temp_A[7] & INV_temp_B_45_29_PLUS_1___d530[7] ;
  assign x__h18975 = temp_A[9] ^ INV_temp_B_45_29_PLUS_1___d530[9] ;
  assign x__h19034 = temp_A[8] & INV_temp_B_45_29_PLUS_1___d530[8] ;
  assign x__h19167 = temp_A[10] ^ INV_temp_B_45_29_PLUS_1___d530[10] ;
  assign x__h19226 = temp_A[9] & INV_temp_B_45_29_PLUS_1___d530[9] ;
  assign x__h19359 = temp_A[11] ^ INV_temp_B_45_29_PLUS_1___d530[11] ;
  assign x__h19418 = temp_A[10] & INV_temp_B_45_29_PLUS_1___d530[10] ;
  assign x__h19551 = temp_A[12] ^ INV_temp_B_45_29_PLUS_1___d530[12] ;
  assign x__h19610 = temp_A[11] & INV_temp_B_45_29_PLUS_1___d530[11] ;
  assign x__h19743 = temp_A[13] ^ INV_temp_B_45_29_PLUS_1___d530[13] ;
  assign x__h19802 = temp_A[12] & INV_temp_B_45_29_PLUS_1___d530[12] ;
  assign x__h19935 = temp_A[14] ^ INV_temp_B_45_29_PLUS_1___d530[14] ;
  assign x__h19994 = temp_A[13] & INV_temp_B_45_29_PLUS_1___d530[13] ;
  assign x__h20127 = temp_A[15] ^ INV_temp_B_45_29_PLUS_1___d530[15] ;
  assign x__h20186 = temp_A[14] & INV_temp_B_45_29_PLUS_1___d530[14] ;
  assign x__h20319 = temp_A[16] ^ INV_temp_B_45_29_PLUS_1___d530[16] ;
  assign x__h20378 = temp_A[15] & INV_temp_B_45_29_PLUS_1___d530[15] ;
  assign x__h20511 = temp_A[17] ^ INV_temp_B_45_29_PLUS_1___d530[17] ;
  assign x__h20570 = temp_A[16] & INV_temp_B_45_29_PLUS_1___d530[16] ;
  assign x__h20703 = temp_A[18] ^ INV_temp_B_45_29_PLUS_1___d530[18] ;
  assign x__h20762 = temp_A[17] & INV_temp_B_45_29_PLUS_1___d530[17] ;
  assign x__h20895 = temp_A[19] ^ INV_temp_B_45_29_PLUS_1___d530[19] ;
  assign x__h20954 = temp_A[18] & INV_temp_B_45_29_PLUS_1___d530[18] ;
  assign x__h21087 = temp_A[20] ^ INV_temp_B_45_29_PLUS_1___d530[20] ;
  assign x__h21146 = temp_A[19] & INV_temp_B_45_29_PLUS_1___d530[19] ;
  assign x__h21279 = temp_A[21] ^ INV_temp_B_45_29_PLUS_1___d530[21] ;
  assign x__h21338 = temp_A[20] & INV_temp_B_45_29_PLUS_1___d530[20] ;
  assign x__h21471 = temp_A[22] ^ INV_temp_B_45_29_PLUS_1___d530[22] ;
  assign x__h21530 = temp_A[21] & INV_temp_B_45_29_PLUS_1___d530[21] ;
  assign x__h21663 = temp_A[23] ^ INV_temp_B_45_29_PLUS_1___d530[23] ;
  assign x__h21722 = temp_A[22] & INV_temp_B_45_29_PLUS_1___d530[22] ;
  assign x__h21855 = temp_A[24] ^ INV_temp_B_45_29_PLUS_1___d530[24] ;
  assign x__h21914 = temp_A[23] & INV_temp_B_45_29_PLUS_1___d530[23] ;
  assign x__h22047 = temp_A[25] ^ INV_temp_B_45_29_PLUS_1___d530[25] ;
  assign x__h22106 = temp_A[24] & INV_temp_B_45_29_PLUS_1___d530[24] ;
  assign x__h22239 = temp_A[26] ^ INV_temp_B_45_29_PLUS_1___d530[26] ;
  assign x__h22298 = temp_A[25] & INV_temp_B_45_29_PLUS_1___d530[25] ;
  assign x__h22431 = temp_A[27] ^ INV_temp_B_45_29_PLUS_1___d530[27] ;
  assign x__h22490 = temp_A[26] & INV_temp_B_45_29_PLUS_1___d530[26] ;
  assign x__h22623 = temp_A[28] ^ INV_temp_B_45_29_PLUS_1___d530[28] ;
  assign x__h22682 = temp_A[27] & INV_temp_B_45_29_PLUS_1___d530[27] ;
  assign x__h22815 = temp_A[29] ^ INV_temp_B_45_29_PLUS_1___d530[29] ;
  assign x__h22874 = temp_A[28] & INV_temp_B_45_29_PLUS_1___d530[28] ;
  assign x__h23007 = temp_A[30] ^ INV_temp_B_45_29_PLUS_1___d530[30] ;
  assign x__h23066 = temp_A[29] & INV_temp_B_45_29_PLUS_1___d530[29] ;
  assign x__h23199 = temp_A[31] ^ INV_temp_B_45_29_PLUS_1___d530[31] ;
  assign x__h23258 = temp_A[30] & INV_temp_B_45_29_PLUS_1___d530[30] ;
  assign x__h23391 = temp_A[32] ^ INV_temp_B_45_29_PLUS_1___d530[32] ;
  assign x__h23450 = temp_A[31] & INV_temp_B_45_29_PLUS_1___d530[31] ;
  assign x__h23583 = temp_A[33] ^ INV_temp_B_45_29_PLUS_1___d530[33] ;
  assign x__h23642 = temp_A[32] & INV_temp_B_45_29_PLUS_1___d530[32] ;
  assign x__h23775 = temp_A[34] ^ INV_temp_B_45_29_PLUS_1___d530[34] ;
  assign x__h23834 = temp_A[33] & INV_temp_B_45_29_PLUS_1___d530[33] ;
  assign x__h23967 = temp_A[35] ^ INV_temp_B_45_29_PLUS_1___d530[35] ;
  assign x__h24026 = temp_A[34] & INV_temp_B_45_29_PLUS_1___d530[34] ;
  assign x__h24159 = temp_A[36] ^ INV_temp_B_45_29_PLUS_1___d530[36] ;
  assign x__h24218 = temp_A[35] & INV_temp_B_45_29_PLUS_1___d530[35] ;
  assign x__h24351 = temp_A[37] ^ INV_temp_B_45_29_PLUS_1___d530[37] ;
  assign x__h24410 = temp_A[36] & INV_temp_B_45_29_PLUS_1___d530[36] ;
  assign x__h24543 = temp_A[38] ^ INV_temp_B_45_29_PLUS_1___d530[38] ;
  assign x__h24602 = temp_A[37] & INV_temp_B_45_29_PLUS_1___d530[37] ;
  assign x__h24735 = temp_A[39] ^ INV_temp_B_45_29_PLUS_1___d530[39] ;
  assign x__h24794 = temp_A[38] & INV_temp_B_45_29_PLUS_1___d530[38] ;
  assign x__h24927 = temp_A[40] ^ INV_temp_B_45_29_PLUS_1___d530[40] ;
  assign x__h24986 = temp_A[39] & INV_temp_B_45_29_PLUS_1___d530[39] ;
  assign x__h25119 = temp_A[41] ^ INV_temp_B_45_29_PLUS_1___d530[41] ;
  assign x__h25178 = temp_A[40] & INV_temp_B_45_29_PLUS_1___d530[40] ;
  assign x__h25311 = temp_A[42] ^ INV_temp_B_45_29_PLUS_1___d530[42] ;
  assign x__h25370 = temp_A[41] & INV_temp_B_45_29_PLUS_1___d530[41] ;
  assign x__h25503 = temp_A[43] ^ INV_temp_B_45_29_PLUS_1___d530[43] ;
  assign x__h25562 = temp_A[42] & INV_temp_B_45_29_PLUS_1___d530[42] ;
  assign x__h25695 = temp_A[44] ^ INV_temp_B_45_29_PLUS_1___d530[44] ;
  assign x__h25754 = temp_A[43] & INV_temp_B_45_29_PLUS_1___d530[43] ;
  assign x__h25887 = temp_A[45] ^ INV_temp_B_45_29_PLUS_1___d530[45] ;
  assign x__h25946 = temp_A[44] & INV_temp_B_45_29_PLUS_1___d530[44] ;
  assign x__h26079 = temp_A[46] ^ INV_temp_B_45_29_PLUS_1___d530[46] ;
  assign x__h26138 = temp_A[45] & INV_temp_B_45_29_PLUS_1___d530[45] ;
  assign x__h26271 = temp_A[47] ^ INV_temp_B_45_29_PLUS_1___d530[47] ;
  assign x__h26330 = temp_A[46] & INV_temp_B_45_29_PLUS_1___d530[46] ;
  assign x__h26463 = temp_A[48] ^ INV_temp_B_45_29_PLUS_1___d530[48] ;
  assign x__h26522 = temp_A[47] & INV_temp_B_45_29_PLUS_1___d530[47] ;
  assign x__h26655 = temp_A[49] ^ INV_temp_B_45_29_PLUS_1___d530[49] ;
  assign x__h26714 = temp_A[48] & INV_temp_B_45_29_PLUS_1___d530[48] ;
  assign x__h27260 = ~fp_a[24] ;
  assign x__h27387 = ~fp_a[25] ;
  assign x__h27575 = ~fp_a[26] ;
  assign x__h27763 = ~fp_a[27] ;
  assign x__h27951 = ~fp_a[28] ;
  assign x__h28139 = ~fp_a[29] ;
  assign x__h28327 = ~fp_a[30] ;
  assign x__h34625 =
	     { temp_sum[49] ^ y__h34257,
	       temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032,
	       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053 } ;
  assign x__h34648 =
	     { temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032,
	       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1069 } ;
  assign x__h3977 = fp_a[24] ^ y__h3980 ;
  assign x__h39973 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h39976 :
	       _theResult___snd_fst__h42975 ;
  assign x__h4104 = fp_a[25] ^ y__h4107 ;
  assign x__h4161 = fp_a[24] & y__h3980 ;
  assign x__h41740 = fp_a[24] ^ fp_a[23] ;
  assign x__h41866 = fp_a[25] ^ y__h40370 ;
  assign x__h42052 = fp_a[26] ^ y__h40556 ;
  assign x__h42238 = fp_a[27] ^ y__h40742 ;
  assign x__h42424 = fp_a[28] ^ y__h40928 ;
  assign x__h42610 = fp_a[29] ^ y__h41114 ;
  assign x__h4290 = fp_a[26] ^ y__h4293 ;
  assign x__h4347 = fp_a[25] & y__h4107 ;
  assign x__h4476 = fp_a[27] ^ y__h4479 ;
  assign x__h4533 = fp_a[26] & y__h4293 ;
  assign x__h4662 = fp_a[28] ^ y__h4665 ;
  assign x__h4719 = fp_a[27] & y__h4479 ;
  assign x__h4848 = fp_a[29] ^ y__h4851 ;
  assign x__h4905 = fp_a[28] & y__h4665 ;
  assign x__h5034 = fp_a[30] ^ y__h5037 ;
  assign x__h5091 = fp_a[29] & y__h4851 ;
  assign x__h56122 =
	     { temp_sum[46] ^ y__h55754,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226,
	       temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227,
	       temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228 } ;
  assign x__h56145 =
	     { temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1244 } ;
  assign x__h61401 =
	     { temp_sum[48] ^ y__h61033,
	       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104 } ;
  assign x__h61424 =
	     { temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1120 } ;
  assign x__h61470 =
	     temp_sum[48] ?
	       _theResult___snd_fst__h42975 :
	       _theResult___snd_fst__h61473 ;
  assign x__h7005 = temp_A[1] & temp_B[1] ;
  assign x__h7052 = temp_A[1] ^ temp_B[1] ;
  assign x__h7197 = temp_A[2] & temp_B[2] ;
  assign x__h7244 = temp_A[2] ^ temp_B[2] ;
  assign x__h7389 = temp_A[3] & temp_B[3] ;
  assign x__h7436 = temp_A[3] ^ temp_B[3] ;
  assign x__h7581 = temp_A[4] & temp_B[4] ;
  assign x__h7628 = temp_A[4] ^ temp_B[4] ;
  assign x__h7773 = temp_A[5] & temp_B[5] ;
  assign x__h7820 = temp_A[5] ^ temp_B[5] ;
  assign x__h7965 = temp_A[6] & temp_B[6] ;
  assign x__h8012 = temp_A[6] ^ temp_B[6] ;
  assign x__h8157 = temp_A[7] & temp_B[7] ;
  assign x__h8204 = temp_A[7] ^ temp_B[7] ;
  assign x__h8349 = temp_A[8] & temp_B[8] ;
  assign x__h8396 = temp_A[8] ^ temp_B[8] ;
  assign x__h8541 = temp_A[9] & temp_B[9] ;
  assign x__h8588 = temp_A[9] ^ temp_B[9] ;
  assign x__h8733 = temp_A[10] & temp_B[10] ;
  assign x__h8780 = temp_A[10] ^ temp_B[10] ;
  assign x__h8925 = temp_A[11] & temp_B[11] ;
  assign x__h8972 = temp_A[11] ^ temp_B[11] ;
  assign x__h9117 = temp_A[12] & temp_B[12] ;
  assign x__h9164 = temp_A[12] ^ temp_B[12] ;
  assign x__h9309 = temp_A[13] & temp_B[13] ;
  assign x__h9356 = temp_A[13] ^ temp_B[13] ;
  assign x__h9501 = temp_A[14] & temp_B[14] ;
  assign x__h9548 = temp_A[14] ^ temp_B[14] ;
  assign x__h9693 = temp_A[15] & temp_B[15] ;
  assign x__h9740 = temp_A[15] ^ temp_B[15] ;
  assign x__h9885 = temp_A[16] & temp_B[16] ;
  assign x__h9932 = temp_A[16] ^ temp_B[16] ;
  assign x_exponent__h26995 =
	     { x__h28327 ^ y__h28328,
	       x__h28139 ^ y__h28140,
	       INV_fp_a_3_BIT_28_8_64_XOR_fp_a_3_BIT_27_2_OR__ETC___d893 } ;
  assign x_exponent__h70341 = fp_a[30:23] | fp_b[30:23] ;
  assign x_fraction__h70342 = fp_a[22:0] | fp_b[22:0] ;
  assign x_sign__h70340 = fp_a[31] | fp_b[31] ;
  assign y__h10019 = x__h10077 | y__h10078 ;
  assign y__h10078 = x__h10124 & y__h9827 ;
  assign y__h10211 = x__h10269 | y__h10270 ;
  assign y__h10270 = x__h10316 & y__h10019 ;
  assign y__h10403 = x__h10461 | y__h10462 ;
  assign y__h10462 = x__h10508 & y__h10211 ;
  assign y__h10595 = x__h10653 | y__h10654 ;
  assign y__h10654 = x__h10700 & y__h10403 ;
  assign y__h10787 = x__h10845 | y__h10846 ;
  assign y__h10846 = x__h10892 & y__h10595 ;
  assign y__h10979 = x__h11037 | y__h11038 ;
  assign y__h11038 = x__h11084 & y__h10787 ;
  assign y__h11171 = x__h11229 | y__h11230 ;
  assign y__h11230 = x__h11276 & y__h10979 ;
  assign y__h11363 = x__h11421 | y__h11422 ;
  assign y__h11422 = x__h11468 & y__h11171 ;
  assign y__h11555 = x__h11613 | y__h11614 ;
  assign y__h11614 = x__h11660 & y__h11363 ;
  assign y__h11747 = x__h11805 | y__h11806 ;
  assign y__h11806 = x__h11852 & y__h11555 ;
  assign y__h11939 = x__h11997 | y__h11998 ;
  assign y__h11998 = x__h12044 & y__h11747 ;
  assign y__h12131 = x__h12189 | y__h12190 ;
  assign y__h12190 = x__h12236 & y__h11939 ;
  assign y__h12323 = x__h12381 | y__h12382 ;
  assign y__h12382 = x__h12428 & y__h12131 ;
  assign y__h12515 = x__h12573 | y__h12574 ;
  assign y__h12574 = x__h12620 & y__h12323 ;
  assign y__h12707 = x__h12765 | y__h12766 ;
  assign y__h12766 = x__h12812 & y__h12515 ;
  assign y__h12899 = x__h12957 | y__h12958 ;
  assign y__h12958 = x__h13004 & y__h12707 ;
  assign y__h13091 = x__h13149 | y__h13150 ;
  assign y__h13150 = x__h13196 & y__h12899 ;
  assign y__h13283 = x__h13341 | y__h13342 ;
  assign y__h13342 = x__h13388 & y__h13091 ;
  assign y__h13475 = x__h13533 | y__h13534 ;
  assign y__h13534 = x__h13580 & y__h13283 ;
  assign y__h13667 = x__h13725 | y__h13726 ;
  assign y__h13726 = x__h13772 & y__h13475 ;
  assign y__h13859 = x__h13917 | y__h13918 ;
  assign y__h13918 = x__h13964 & y__h13667 ;
  assign y__h14051 = x__h14109 | y__h14110 ;
  assign y__h14110 = x__h14156 & y__h13859 ;
  assign y__h14243 = x__h14301 | y__h14302 ;
  assign y__h14302 = x__h14348 & y__h14051 ;
  assign y__h14435 = x__h14493 | y__h14494 ;
  assign y__h14494 = x__h14540 & y__h14243 ;
  assign y__h14627 = x__h14685 | y__h14686 ;
  assign y__h14686 = x__h14732 & y__h14435 ;
  assign y__h14819 = x__h14877 | y__h14878 ;
  assign y__h14878 = x__h14924 & y__h14627 ;
  assign y__h15011 = x__h15069 | y__h15070 ;
  assign y__h15070 = x__h15116 & y__h14819 ;
  assign y__h15203 = x__h15261 | y__h15262 ;
  assign y__h15262 = x__h15308 & y__h15011 ;
  assign y__h15395 = x__h15453 | y__h15454 ;
  assign y__h15454 = x__h15500 & y__h15203 ;
  assign y__h15587 = x__h15645 | y__h15646 ;
  assign y__h15646 = x__h15692 & y__h15395 ;
  assign y__h15779 = x__h15837 | y__h15838 ;
  assign y__h15838 = x__h15884 & y__h15587 ;
  assign y__h15971 = x__h16029 | y__h16030 ;
  assign y__h16030 = x__h16076 & y__h15779 ;
  assign y__h17503 = temp_A[0] & INV_temp_B_45_29_PLUS_1___d530[0] ;
  assign y__h17632 = x__h17690 | y__h17691 ;
  assign y__h17691 = x__h17502 & y__h17503 ;
  assign y__h17824 = x__h17882 | y__h17883 ;
  assign y__h17883 = x__h17631 & y__h17632 ;
  assign y__h18016 = x__h18074 | y__h18075 ;
  assign y__h18075 = x__h17823 & y__h17824 ;
  assign y__h18208 = x__h18266 | y__h18267 ;
  assign y__h18267 = x__h18015 & y__h18016 ;
  assign y__h18400 = x__h18458 | y__h18459 ;
  assign y__h18459 = x__h18207 & y__h18208 ;
  assign y__h18592 = x__h18650 | y__h18651 ;
  assign y__h18651 = x__h18399 & y__h18400 ;
  assign y__h18784 = x__h18842 | y__h18843 ;
  assign y__h18843 = x__h18591 & y__h18592 ;
  assign y__h18976 = x__h19034 | y__h19035 ;
  assign y__h19035 = x__h18783 & y__h18784 ;
  assign y__h19168 = x__h19226 | y__h19227 ;
  assign y__h19227 = x__h18975 & y__h18976 ;
  assign y__h19360 = x__h19418 | y__h19419 ;
  assign y__h19419 = x__h19167 & y__h19168 ;
  assign y__h19552 = x__h19610 | y__h19611 ;
  assign y__h19611 = x__h19359 & y__h19360 ;
  assign y__h19744 = x__h19802 | y__h19803 ;
  assign y__h19803 = x__h19551 & y__h19552 ;
  assign y__h19936 = x__h19994 | y__h19995 ;
  assign y__h19995 = x__h19743 & y__h19744 ;
  assign y__h20128 = x__h20186 | y__h20187 ;
  assign y__h20187 = x__h19935 & y__h19936 ;
  assign y__h20320 = x__h20378 | y__h20379 ;
  assign y__h20379 = x__h20127 & y__h20128 ;
  assign y__h20512 = x__h20570 | y__h20571 ;
  assign y__h20571 = x__h20319 & y__h20320 ;
  assign y__h20704 = x__h20762 | y__h20763 ;
  assign y__h20763 = x__h20511 & y__h20512 ;
  assign y__h20896 = x__h20954 | y__h20955 ;
  assign y__h20955 = x__h20703 & y__h20704 ;
  assign y__h21088 = x__h21146 | y__h21147 ;
  assign y__h21147 = x__h20895 & y__h20896 ;
  assign y__h21280 = x__h21338 | y__h21339 ;
  assign y__h21339 = x__h21087 & y__h21088 ;
  assign y__h21472 = x__h21530 | y__h21531 ;
  assign y__h21531 = x__h21279 & y__h21280 ;
  assign y__h21664 = x__h21722 | y__h21723 ;
  assign y__h21723 = x__h21471 & y__h21472 ;
  assign y__h21856 = x__h21914 | y__h21915 ;
  assign y__h21915 = x__h21663 & y__h21664 ;
  assign y__h22048 = x__h22106 | y__h22107 ;
  assign y__h22107 = x__h21855 & y__h21856 ;
  assign y__h22240 = x__h22298 | y__h22299 ;
  assign y__h22299 = x__h22047 & y__h22048 ;
  assign y__h22432 = x__h22490 | y__h22491 ;
  assign y__h22491 = x__h22239 & y__h22240 ;
  assign y__h22624 = x__h22682 | y__h22683 ;
  assign y__h22683 = x__h22431 & y__h22432 ;
  assign y__h22816 = x__h22874 | y__h22875 ;
  assign y__h22875 = x__h22623 & y__h22624 ;
  assign y__h23008 = x__h23066 | y__h23067 ;
  assign y__h23067 = x__h22815 & y__h22816 ;
  assign y__h23200 = x__h23258 | y__h23259 ;
  assign y__h23259 = x__h23007 & y__h23008 ;
  assign y__h23392 = x__h23450 | y__h23451 ;
  assign y__h23451 = x__h23199 & y__h23200 ;
  assign y__h23584 = x__h23642 | y__h23643 ;
  assign y__h23643 = x__h23391 & y__h23392 ;
  assign y__h23776 = x__h23834 | y__h23835 ;
  assign y__h23835 = x__h23583 & y__h23584 ;
  assign y__h23968 = x__h24026 | y__h24027 ;
  assign y__h24027 = x__h23775 & y__h23776 ;
  assign y__h24160 = x__h24218 | y__h24219 ;
  assign y__h24219 = x__h23967 & y__h23968 ;
  assign y__h24352 = x__h24410 | y__h24411 ;
  assign y__h24411 = x__h24159 & y__h24160 ;
  assign y__h24544 = x__h24602 | y__h24603 ;
  assign y__h24603 = x__h24351 & y__h24352 ;
  assign y__h24736 = x__h24794 | y__h24795 ;
  assign y__h24795 = x__h24543 & y__h24544 ;
  assign y__h24928 = x__h24986 | y__h24987 ;
  assign y__h24987 = x__h24735 & y__h24736 ;
  assign y__h25120 = x__h25178 | y__h25179 ;
  assign y__h25179 = x__h24927 & y__h24928 ;
  assign y__h25312 = x__h25370 | y__h25371 ;
  assign y__h25371 = x__h25119 & y__h25120 ;
  assign y__h25504 = x__h25562 | y__h25563 ;
  assign y__h25563 = x__h25311 & y__h25312 ;
  assign y__h25696 = x__h25754 | y__h25755 ;
  assign y__h25755 = x__h25503 & y__h25504 ;
  assign y__h25888 = x__h25946 | y__h25947 ;
  assign y__h25947 = x__h25695 & y__h25696 ;
  assign y__h26080 = x__h26138 | y__h26139 ;
  assign y__h26139 = x__h25887 & y__h25888 ;
  assign y__h26272 = x__h26330 | y__h26331 ;
  assign y__h26331 = x__h26079 & y__h26080 ;
  assign y__h26464 = x__h26522 | y__h26523 ;
  assign y__h26523 = x__h26271 & y__h26272 ;
  assign y__h26656 = x__h26714 | y__h26715 ;
  assign y__h26715 = x__h26463 & y__h26464 ;
  assign y__h27388 = fp_a[24] | y__h27446 ;
  assign y__h27446 = x__h27260 & fp_a[23] ;
  assign y__h27576 = fp_a[25] | y__h27634 ;
  assign y__h27634 = x__h27387 & y__h27388 ;
  assign y__h27764 = fp_a[26] | y__h27822 ;
  assign y__h27822 = x__h27575 & y__h27576 ;
  assign y__h27952 = fp_a[27] | y__h28010 ;
  assign y__h28010 = x__h27763 & y__h27764 ;
  assign y__h28140 = fp_a[28] | y__h28198 ;
  assign y__h28198 = x__h27951 & y__h27952 ;
  assign y__h2820 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h28328 = fp_a[29] | y__h28386 ;
  assign y__h28386 = x__h28139 & y__h28140 ;
  assign y__h3009 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h2820 ;
  assign y__h30351 = temp_sum[27] & temp_sum[26] ;
  assign y__h30537 = temp_sum[28] & y__h30351 ;
  assign y__h30723 = temp_sum[29] & y__h30537 ;
  assign y__h30909 = temp_sum[30] & y__h30723 ;
  assign y__h31095 = temp_sum[31] & y__h30909 ;
  assign y__h31281 = temp_sum[32] & y__h31095 ;
  assign y__h31467 = temp_sum[33] & y__h31281 ;
  assign y__h31653 = temp_sum[34] & y__h31467 ;
  assign y__h31839 = temp_sum[35] & y__h31653 ;
  assign y__h3198 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h3009 ;
  assign y__h32025 = temp_sum[36] & y__h31839 ;
  assign y__h32211 = temp_sum[37] & y__h32025 ;
  assign y__h32397 = temp_sum[38] & y__h32211 ;
  assign y__h32583 = temp_sum[39] & y__h32397 ;
  assign y__h32769 = temp_sum[40] & y__h32583 ;
  assign y__h32955 = temp_sum[41] & y__h32769 ;
  assign y__h33141 = temp_sum[42] & y__h32955 ;
  assign y__h33327 = temp_sum[43] & y__h33141 ;
  assign y__h33513 = temp_sum[44] & y__h33327 ;
  assign y__h33699 = temp_sum[45] & y__h33513 ;
  assign y__h3387 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h3198 ;
  assign y__h33885 = temp_sum[46] & y__h33699 ;
  assign y__h34071 = temp_sum[47] & y__h33885 ;
  assign y__h34257 = temp_sum[48] & y__h34071 ;
  assign y__h3576 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h3387 ;
  assign y__h3765 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h3576 ;
  assign y__h3978 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h3980 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h40370 = fp_a[24] & fp_a[23] ;
  assign y__h40556 = fp_a[25] & y__h40370 ;
  assign y__h40742 = fp_a[26] & y__h40556 ;
  assign y__h40928 = fp_a[27] & y__h40742 ;
  assign y__h4105 = x__h4161 | y__h4162 ;
  assign y__h4107 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h2820 ;
  assign y__h41114 = fp_a[28] & y__h40928 ;
  assign y__h41300 = fp_a[29] & y__h41114 ;
  assign y__h4162 = x__h3977 & y__h3978 ;
  assign y__h41867 = x__h41740 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h42053 = x__h41866 & y__h41867 ;
  assign y__h42239 = x__h42052 & y__h42053 ;
  assign y__h42425 = x__h42238 & y__h42239 ;
  assign y__h42611 = x__h42424 & y__h42425 ;
  assign y__h42797 = x__h42610 & y__h42611 ;
  assign y__h4291 = x__h4347 | y__h4348 ;
  assign y__h4293 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h3009 ;
  assign y__h4348 = x__h4104 & y__h4105 ;
  assign y__h4477 = x__h4533 | y__h4534 ;
  assign y__h4479 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h3198 ;
  assign y__h4534 = x__h4290 & y__h4291 ;
  assign y__h4663 = x__h4719 | y__h4720 ;
  assign y__h4665 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h3387 ;
  assign y__h4720 = x__h4476 & y__h4477 ;
  assign y__h4849 = x__h4905 | y__h4906 ;
  assign y__h4851 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h3576 ;
  assign y__h4906 = x__h4662 & y__h4663 ;
  assign y__h5035 = x__h5091 | y__h5092 ;
  assign y__h5037 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h3765 ;
  assign y__h5092 = x__h4848 & y__h4849 ;
  assign y__h51848 = temp_sum[24] & temp_sum[23] ;
  assign y__h52034 = temp_sum[25] & y__h51848 ;
  assign y__h52220 = temp_sum[26] & y__h52034 ;
  assign y__h52406 = temp_sum[27] & y__h52220 ;
  assign y__h52592 = temp_sum[28] & y__h52406 ;
  assign y__h52778 = temp_sum[29] & y__h52592 ;
  assign y__h52964 = temp_sum[30] & y__h52778 ;
  assign y__h53150 = temp_sum[31] & y__h52964 ;
  assign y__h53336 = temp_sum[32] & y__h53150 ;
  assign y__h53522 = temp_sum[33] & y__h53336 ;
  assign y__h53708 = temp_sum[34] & y__h53522 ;
  assign y__h53894 = temp_sum[35] & y__h53708 ;
  assign y__h54080 = temp_sum[36] & y__h53894 ;
  assign y__h54266 = temp_sum[37] & y__h54080 ;
  assign y__h54452 = temp_sum[38] & y__h54266 ;
  assign y__h54638 = temp_sum[39] & y__h54452 ;
  assign y__h54824 = temp_sum[40] & y__h54638 ;
  assign y__h55010 = temp_sum[41] & y__h54824 ;
  assign y__h55196 = temp_sum[42] & y__h55010 ;
  assign y__h55382 = temp_sum[43] & y__h55196 ;
  assign y__h55568 = temp_sum[44] & y__h55382 ;
  assign y__h55754 = temp_sum[45] & y__h55568 ;
  assign y__h55940 = temp_sum[46] & y__h55754 ;
  assign y__h57127 = temp_sum[26] & temp_sum[25] ;
  assign y__h57313 = temp_sum[27] & y__h57127 ;
  assign y__h57499 = temp_sum[28] & y__h57313 ;
  assign y__h57685 = temp_sum[29] & y__h57499 ;
  assign y__h57871 = temp_sum[30] & y__h57685 ;
  assign y__h58057 = temp_sum[31] & y__h57871 ;
  assign y__h58243 = temp_sum[32] & y__h58057 ;
  assign y__h58429 = temp_sum[33] & y__h58243 ;
  assign y__h58615 = temp_sum[34] & y__h58429 ;
  assign y__h58801 = temp_sum[35] & y__h58615 ;
  assign y__h58987 = temp_sum[36] & y__h58801 ;
  assign y__h59173 = temp_sum[37] & y__h58987 ;
  assign y__h59359 = temp_sum[38] & y__h59173 ;
  assign y__h59545 = temp_sum[39] & y__h59359 ;
  assign y__h59731 = temp_sum[40] & y__h59545 ;
  assign y__h59917 = temp_sum[41] & y__h59731 ;
  assign y__h60103 = temp_sum[42] & y__h59917 ;
  assign y__h60289 = temp_sum[43] & y__h60103 ;
  assign y__h60475 = temp_sum[44] & y__h60289 ;
  assign y__h60661 = temp_sum[45] & y__h60475 ;
  assign y__h60847 = temp_sum[46] & y__h60661 ;
  assign y__h61033 = temp_sum[47] & y__h60847 ;
  assign y__h61219 = temp_sum[48] & y__h61033 ;
  assign y__h61874 = exp___1__h50885[1] & exp___1__h50885[0] ;
  assign y__h62063 = exp___1__h50885[2] & y__h61874 ;
  assign y__h62252 = exp___1__h50885[3] & y__h62063 ;
  assign y__h62441 = exp___1__h50885[4] & y__h62252 ;
  assign y__h62630 = exp___1__h50885[5] & y__h62441 ;
  assign y__h62819 = exp___1__h50885[6] & y__h62630 ;
  assign y__h6947 = x__h7005 | y__h7006 ;
  assign y__h7006 = x__h7052 & y__h7053 ;
  assign y__h7053 = temp_A[0] & temp_B[0] ;
  assign y__h7139 = x__h7197 | y__h7198 ;
  assign y__h7198 = x__h7244 & y__h6947 ;
  assign y__h7331 = x__h7389 | y__h7390 ;
  assign y__h7390 = x__h7436 & y__h7139 ;
  assign y__h7523 = x__h7581 | y__h7582 ;
  assign y__h7582 = x__h7628 & y__h7331 ;
  assign y__h7715 = x__h7773 | y__h7774 ;
  assign y__h7774 = x__h7820 & y__h7523 ;
  assign y__h7907 = x__h7965 | y__h7966 ;
  assign y__h7966 = x__h8012 & y__h7715 ;
  assign y__h8099 = x__h8157 | y__h8158 ;
  assign y__h8158 = x__h8204 & y__h7907 ;
  assign y__h8291 = x__h8349 | y__h8350 ;
  assign y__h8350 = x__h8396 & y__h8099 ;
  assign y__h8483 = x__h8541 | y__h8542 ;
  assign y__h8542 = x__h8588 & y__h8291 ;
  assign y__h8675 = x__h8733 | y__h8734 ;
  assign y__h8734 = x__h8780 & y__h8483 ;
  assign y__h8867 = x__h8925 | y__h8926 ;
  assign y__h8926 = x__h8972 & y__h8675 ;
  assign y__h9059 = x__h9117 | y__h9118 ;
  assign y__h9118 = x__h9164 & y__h8867 ;
  assign y__h9251 = x__h9309 | y__h9310 ;
  assign y__h9310 = x__h9356 & y__h9059 ;
  assign y__h9443 = x__h9501 | y__h9502 ;
  assign y__h9502 = x__h9548 & y__h9251 ;
  assign y__h9635 = x__h9693 | y__h9694 ;
  assign y__h9694 = x__h9740 & y__h9443 ;
  assign y__h9827 = x__h9885 | y__h9886 ;
  assign y__h9886 = x__h9932 & y__h9635 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	adj_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adj_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_add <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_oneinpzero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	out_fifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (adj_done_EN) adj_done <= `BSV_ASSIGNMENT_DELAY adj_done_D_IN;
	if (adj_sub_EN) adj_sub <= `BSV_ASSIGNMENT_DELAY adj_sub_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (do_add_EN) do_add <= `BSV_ASSIGNMENT_DELAY do_add_D_IN;
	if (do_sub_EN) do_sub <= `BSV_ASSIGNMENT_DELAY do_sub_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (handle_oneinpzero_EN)
	  handle_oneinpzero <= `BSV_ASSIGNMENT_DELAY handle_oneinpzero_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (inpA_fifo_rv_EN)
	  inpA_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpA_fifo_rv_D_IN;
	if (inpB_fifo_rv_EN)
	  inpB_fifo_rv <= `BSV_ASSIGNMENT_DELAY inpB_fifo_rv_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (out_fifo_rv_EN)
	  out_fifo_rv <= `BSV_ASSIGNMENT_DELAY out_fifo_rv_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    adj_done = 1'h0;
    adj_sub = 1'h0;
    assembled_answer = 1'h0;
    do_add = 1'h0;
    do_sub = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    handle_oneinpzero = 1'h0;
    handle_zero = 1'h0;
    inpA_fifo_rv = 33'h0AAAAAAAA;
    inpB_fifo_rv = 33'h0AAAAAAAA;
    operands_swapped_if_needed = 1'h0;
    out_fifo_rv = 33'h0AAAAAAAA;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

