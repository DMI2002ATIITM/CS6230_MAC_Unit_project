//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sat Oct 26 15:54:44 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// RDY_get_S1_or_S2               O     1
// output_MAC                     O    32 reg
// RDY_output_MAC                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16 reg
// get_B_b                        I    16 reg
// get_C_c                        I    32 reg
// get_S1_or_S2_s1_or_s2          I     1 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_get_S1_or_S2                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC_fp32(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  get_C_c,
		  EN_get_C,
		  RDY_get_C,

		  get_S1_or_S2_s1_or_s2,
		  EN_get_S1_or_S2,
		  RDY_get_S1_or_S2,

		  output_MAC,
		  RDY_output_MAC);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // action method get_S1_or_S2
  input  get_S1_or_S2_s1_or_s2;
  input  EN_get_S1_or_S2;
  output RDY_get_S1_or_S2;

  // value method output_MAC
  output [31 : 0] output_MAC;
  output RDY_output_MAC;

  // signals for module outputs
  wire [31 : 0] output_MAC;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_S1_or_S2, RDY_output_MAC;

  // register add_initiated
  reg add_initiated;
  wire add_initiated_D_IN, add_initiated_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_s1_or_s2
  reg got_s1_or_s2;
  wire got_s1_or_s2_D_IN, got_s1_or_s2_EN;

  // register mac_completed
  reg mac_completed;
  wire mac_completed_D_IN, mac_completed_EN;

  // register mac_output
  reg [31 : 0] mac_output;
  wire [31 : 0] mac_output_D_IN;
  wire mac_output_EN;

  // register mul_completed
  reg mul_completed;
  wire mul_completed_D_IN, mul_completed_EN;

  // register mul_initiated
  reg mul_initiated;
  wire mul_initiated_D_IN, mul_initiated_EN;

  // register rg_S1_or_S2
  reg rg_S1_or_S2;
  wire rg_S1_or_S2_D_IN, rg_S1_or_S2_EN;

  // register rg_a
  reg [15 : 0] rg_a;
  wire [15 : 0] rg_a_D_IN;
  wire rg_a_EN;

  // register rg_ab
  reg [15 : 0] rg_ab;
  wire [15 : 0] rg_ab_D_IN;
  wire rg_ab_EN;

  // register rg_b
  reg [15 : 0] rg_b;
  wire [15 : 0] rg_b_D_IN;
  wire rg_b_EN;

  // register rg_c
  reg [31 : 0] rg_c;
  wire [31 : 0] rg_c_D_IN;
  wire rg_c_EN;

  // ports of submodule fadd
  wire [31 : 0] fadd_get_B_b, fadd_out_AaddB;
  wire [15 : 0] fadd_get_A_a;
  wire fadd_EN_get_A,
       fadd_EN_get_B,
       fadd_RDY_get_A,
       fadd_RDY_get_B,
       fadd_RDY_out_AaddB;

  // ports of submodule fmul
  wire [15 : 0] fmul_get_A_a, fmul_get_B_b, fmul_out_AB;
  wire fmul_EN_get_A,
       fmul_EN_get_B,
       fmul_RDY_get_A,
       fmul_RDY_get_B,
       fmul_RDY_out_AB;

  // rule scheduling signals
  wire CAN_FIRE_RL_do_add,
       CAN_FIRE_RL_do_mul,
       CAN_FIRE_RL_get_addres,
       CAN_FIRE_RL_get_mulres,
       CAN_FIRE_RL_restore_mac,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_get_S1_or_S2,
       WILL_FIRE_RL_do_add,
       WILL_FIRE_RL_do_mul,
       WILL_FIRE_RL_get_addres,
       WILL_FIRE_RL_get_mulres,
       WILL_FIRE_RL_restore_mac,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_get_S1_or_S2;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = !got_C ;
  assign CAN_FIRE_get_C = !got_C ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // action method get_S1_or_S2
  assign RDY_get_S1_or_S2 = !got_s1_or_s2 ;
  assign CAN_FIRE_get_S1_or_S2 = !got_s1_or_s2 ;
  assign WILL_FIRE_get_S1_or_S2 = EN_get_S1_or_S2 ;

  // value method output_MAC
  assign output_MAC = mac_output ;
  assign RDY_output_MAC = mac_completed ;

  // submodule fadd
  mkfp32_add fadd(.CLK(CLK),
		  .RST_N(RST_N),
		  .get_A_a(fadd_get_A_a),
		  .get_B_b(fadd_get_B_b),
		  .EN_get_A(fadd_EN_get_A),
		  .EN_get_B(fadd_EN_get_B),
		  .RDY_get_A(fadd_RDY_get_A),
		  .RDY_get_B(fadd_RDY_get_B),
		  .out_AaddB(fadd_out_AaddB),
		  .RDY_out_AaddB(fadd_RDY_out_AaddB));

  // submodule fmul
  mkbf16_mul fmul(.CLK(CLK),
		  .RST_N(RST_N),
		  .get_A_a(fmul_get_A_a),
		  .get_B_b(fmul_get_B_b),
		  .EN_get_A(fmul_EN_get_A),
		  .EN_get_B(fmul_EN_get_B),
		  .RDY_get_A(fmul_RDY_get_A),
		  .RDY_get_B(fmul_RDY_get_B),
		  .out_AB(fmul_out_AB),
		  .RDY_out_AB(fmul_RDY_out_AB));

  // rule RL_do_mul
  assign CAN_FIRE_RL_do_mul =
	     fmul_RDY_get_A && fmul_RDY_get_B && got_A && got_B && got_C &&
	     !mul_initiated ;
  assign WILL_FIRE_RL_do_mul = CAN_FIRE_RL_do_mul ;

  // rule RL_do_add
  assign CAN_FIRE_RL_do_add =
	     fadd_RDY_get_A && fadd_RDY_get_B && got_A && got_B && got_C &&
	     mul_completed &&
	     !add_initiated ;
  assign WILL_FIRE_RL_do_add = CAN_FIRE_RL_do_add ;

  // rule RL_get_mulres
  assign CAN_FIRE_RL_get_mulres = fmul_RDY_out_AB && mul_initiated ;
  assign WILL_FIRE_RL_get_mulres = CAN_FIRE_RL_get_mulres ;

  // rule RL_get_addres
  assign CAN_FIRE_RL_get_addres = fadd_RDY_out_AaddB && add_initiated ;
  assign WILL_FIRE_RL_get_addres = CAN_FIRE_RL_get_addres ;

  // rule RL_restore_mac
  assign CAN_FIRE_RL_restore_mac = mac_completed ;
  assign WILL_FIRE_RL_restore_mac =
	     mac_completed && !WILL_FIRE_RL_get_addres ;

  // register add_initiated
  assign add_initiated_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign add_initiated_EN = WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_do_add ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign got_A_EN = WILL_FIRE_RL_restore_mac || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign got_B_EN = WILL_FIRE_RL_restore_mac || EN_get_B ;

  // register got_C
  assign got_C_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign got_C_EN = WILL_FIRE_RL_restore_mac || EN_get_C ;

  // register got_s1_or_s2
  assign got_s1_or_s2_D_IN = 1'd1 ;
  assign got_s1_or_s2_EN = EN_get_S1_or_S2 ;

  // register mac_completed
  assign mac_completed_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign mac_completed_EN =
	     WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_get_addres ;

  // register mac_output
  assign mac_output_D_IN = fadd_out_AaddB ;
  assign mac_output_EN = CAN_FIRE_RL_get_addres ;

  // register mul_completed
  assign mul_completed_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign mul_completed_EN =
	     WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_get_mulres ;

  // register mul_initiated
  assign mul_initiated_D_IN = !WILL_FIRE_RL_restore_mac ;
  assign mul_initiated_EN = WILL_FIRE_RL_restore_mac || WILL_FIRE_RL_do_mul ;

  // register rg_S1_or_S2
  assign rg_S1_or_S2_D_IN = get_S1_or_S2_s1_or_s2 ;
  assign rg_S1_or_S2_EN = EN_get_S1_or_S2 ;

  // register rg_a
  assign rg_a_D_IN = get_A_a ;
  assign rg_a_EN = EN_get_A ;

  // register rg_ab
  assign rg_ab_D_IN = fmul_out_AB ;
  assign rg_ab_EN = CAN_FIRE_RL_get_mulres ;

  // register rg_b
  assign rg_b_D_IN = get_B_b ;
  assign rg_b_EN = EN_get_B ;

  // register rg_c
  assign rg_c_D_IN = get_C_c ;
  assign rg_c_EN = EN_get_C ;

  // submodule fadd
  assign fadd_get_A_a = rg_ab ;
  assign fadd_get_B_b = rg_c ;
  assign fadd_EN_get_A = CAN_FIRE_RL_do_add ;
  assign fadd_EN_get_B = CAN_FIRE_RL_do_add ;

  // submodule fmul
  assign fmul_get_A_a = rg_a ;
  assign fmul_get_B_b = rg_b ;
  assign fmul_EN_get_A = CAN_FIRE_RL_do_mul ;
  assign fmul_EN_get_B = CAN_FIRE_RL_do_mul ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_initiated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_output <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mul_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_initiated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_ab <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (add_initiated_EN)
	  add_initiated <= `BSV_ASSIGNMENT_DELAY add_initiated_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_s1_or_s2_EN)
	  got_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY got_s1_or_s2_D_IN;
	if (mac_completed_EN)
	  mac_completed <= `BSV_ASSIGNMENT_DELAY mac_completed_D_IN;
	if (mac_output_EN)
	  mac_output <= `BSV_ASSIGNMENT_DELAY mac_output_D_IN;
	if (mul_completed_EN)
	  mul_completed <= `BSV_ASSIGNMENT_DELAY mul_completed_D_IN;
	if (mul_initiated_EN)
	  mul_initiated <= `BSV_ASSIGNMENT_DELAY mul_initiated_D_IN;
	if (rg_S1_or_S2_EN)
	  rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY rg_S1_or_S2_D_IN;
	if (rg_a_EN) rg_a <= `BSV_ASSIGNMENT_DELAY rg_a_D_IN;
	if (rg_ab_EN) rg_ab <= `BSV_ASSIGNMENT_DELAY rg_ab_D_IN;
	if (rg_b_EN) rg_b <= `BSV_ASSIGNMENT_DELAY rg_b_D_IN;
	if (rg_c_EN) rg_c <= `BSV_ASSIGNMENT_DELAY rg_c_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_initiated = 1'h0;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_s1_or_s2 = 1'h0;
    mac_completed = 1'h0;
    mac_output = 32'hAAAAAAAA;
    mul_completed = 1'h0;
    mul_initiated = 1'h0;
    rg_S1_or_S2 = 1'h0;
    rg_a = 16'hAAAA;
    rg_ab = 16'hAAAA;
    rg_b = 16'hAAAA;
    rg_c = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC_fp32

