//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Tue Oct 22 22:58:32 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AB                         O    16 reg
// RDY_out_AB                     O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16 reg
// get_B_b                        I    16 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbf16_mul(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AB,
		  RDY_out_AB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AB
  output [15 : 0] out_AB;
  output RDY_out_AB;

  // signals for module outputs
  wire [15 : 0] out_AB;
  wire RDY_get_A, RDY_get_B, RDY_out_AB;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register bf_a
  reg [15 : 0] bf_a;
  wire [15 : 0] bf_a_D_IN;
  wire bf_a_EN;

  // register bf_b
  reg [15 : 0] bf_b;
  wire [15 : 0] bf_b_D_IN;
  wire bf_b_EN;

  // register bf_c
  reg [15 : 0] bf_c;
  wire [15 : 0] bf_c_D_IN;
  wire bf_c_EN;

  // register exp_c
  reg [7 : 0] exp_c;
  wire [7 : 0] exp_c_D_IN;
  wire exp_c_EN;

  // register expone_calculated
  reg expone_calculated;
  wire expone_calculated_D_IN, expone_calculated_EN;

  // register final_output
  reg [15 : 0] final_output;
  wire [15 : 0] final_output_D_IN;
  wire final_output_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register man_c
  reg [6 : 0] man_c;
  wire [6 : 0] man_c_D_IN;
  wire man_c_EN;

  // register man_c_and_final_exp
  reg [14 : 0] man_c_and_final_exp;
  wire [14 : 0] man_c_and_final_exp_D_IN;
  wire man_c_and_final_exp_EN;

  // register mantissa_calculated
  reg mantissa_calculated;
  wire mantissa_calculated_D_IN, mantissa_calculated_EN;

  // register rounding_done
  reg rounding_done;
  wire rounding_done_D_IN, rounding_done_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register sign_calculated
  reg sign_calculated;
  wire sign_calculated_D_IN, sign_calculated_EN;

  // register temp_A
  reg [7 : 0] temp_A;
  wire [7 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [7 : 0] temp_B;
  wire [7 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_prod
  reg [15 : 0] temp_prod;
  wire [15 : 0] temp_prod_D_IN;
  wire temp_prod_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expone,
       CAN_FIRE_RL_calculate_mantissa,
       CAN_FIRE_RL_calculate_sign,
       CAN_FIRE_RL_round_nearest,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expone,
       WILL_FIRE_RL_calculate_mantissa,
       WILL_FIRE_RL_calculate_sign,
       WILL_FIRE_RL_round_nearest,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // remaining internal signals
  wire [31 : 0] _0_CONCAT_temp_A_0_1_MUL_0_CONCAT_temp_B_2_3___d34;
  wire [14 : 0] _theResult___snd_fst__h1113;
  wire [8 : 0] _0_CONCAT_temp_prod_0_BITS_15_TO_8_1_2_PLUS_1___d53,
	       temp_prod_0_BITS_15_TO_7_6_PLUS_1___d67;
  wire [7 : 0] _theResult___fst__h1120,
	       _theResult___fst__h1262,
	       _theResult___fst__h1316,
	       _theResult___fst__h1371,
	       _theResult___fst__h1513,
	       exp___1__h1115,
	       x__h1617,
	       x__h835,
	       x__h876,
	       x__h892;
  wire got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d26;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AB
  assign out_AB = bf_c ;
  assign RDY_out_AB = assembled_answer ;

  // rule RL_calculate_sign
  assign CAN_FIRE_RL_calculate_sign = got_A && got_B && !sign_calculated ;
  assign WILL_FIRE_RL_calculate_sign = CAN_FIRE_RL_calculate_sign ;

  // rule RL_calculate_expone
  assign CAN_FIRE_RL_calculate_expone =
	     got_A && got_B && sign_calculated && !expone_calculated ;
  assign WILL_FIRE_RL_calculate_expone = CAN_FIRE_RL_calculate_expone ;

  // rule RL_calculate_mantissa
  assign CAN_FIRE_RL_calculate_mantissa =
	     got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d26 &&
	     !mantissa_calculated ;
  assign WILL_FIRE_RL_calculate_mantissa = CAN_FIRE_RL_calculate_mantissa ;

  // rule RL_round_nearest
  assign CAN_FIRE_RL_round_nearest =
	     got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d26 &&
	     mantissa_calculated &&
	     !rounding_done ;
  assign WILL_FIRE_RL_round_nearest = CAN_FIRE_RL_round_nearest ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d26 &&
	     mantissa_calculated &&
	     rounding_done &&
	     !assembled_answer ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_calculate_sign ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_calculate_sign || WILL_FIRE_RL_assemble_answer ;

  // register bf_a
  assign bf_a_D_IN = get_A_a ;
  assign bf_a_EN = EN_get_A ;

  // register bf_b
  assign bf_b_D_IN = get_B_b ;
  assign bf_b_EN = EN_get_B ;

  // register bf_c
  assign bf_c_D_IN = { sign_c, man_c_and_final_exp } ;
  assign bf_c_EN = CAN_FIRE_RL_assemble_answer ;

  // register exp_c
  assign exp_c_D_IN = x__h835 + 8'b10000001 ;
  assign exp_c_EN = CAN_FIRE_RL_calculate_expone ;

  // register expone_calculated
  assign expone_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign expone_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_expone ;

  // register final_output
  assign final_output_D_IN = 16'h0 ;
  assign final_output_EN = 1'b0 ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_A_EN = WILL_FIRE_RL_assemble_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_B_EN = WILL_FIRE_RL_assemble_answer || EN_get_B ;

  // register man_c
  assign man_c_D_IN = 7'h0 ;
  assign man_c_EN = 1'b0 ;

  // register man_c_and_final_exp
  assign man_c_and_final_exp_D_IN =
	     _theResult___snd_fst__h1113 + { x__h1617, 7'd0 } ;
  assign man_c_and_final_exp_EN = CAN_FIRE_RL_round_nearest ;

  // register mantissa_calculated
  assign mantissa_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign mantissa_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_mantissa ;

  // register rounding_done
  assign rounding_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign rounding_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_round_nearest ;

  // register sign_c
  assign sign_c_D_IN = bf_a[15] ^ bf_b[15] ;
  assign sign_c_EN = CAN_FIRE_RL_calculate_sign ;

  // register sign_calculated
  assign sign_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign sign_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_sign ;

  // register temp_A
  assign temp_A_D_IN = x__h876 + 8'b10000000 ;
  assign temp_A_EN = CAN_FIRE_RL_calculate_expone ;

  // register temp_B
  assign temp_B_D_IN = x__h892 + 8'b10000000 ;
  assign temp_B_EN = CAN_FIRE_RL_calculate_expone ;

  // register temp_prod
  assign temp_prod_D_IN =
	     _0_CONCAT_temp_A_0_1_MUL_0_CONCAT_temp_B_2_3___d34[15:0] ;
  assign temp_prod_EN = CAN_FIRE_RL_calculate_mantissa ;

  // remaining internal signals
  assign _0_CONCAT_temp_A_0_1_MUL_0_CONCAT_temp_B_2_3___d34 =
	     { 8'd0, temp_A } * { 8'd0, temp_B } ;
  assign _0_CONCAT_temp_prod_0_BITS_15_TO_8_1_2_PLUS_1___d53 =
	     { 1'd0, temp_prod[15:8] } + 9'd1 ;
  assign _theResult___fst__h1120 =
	     (!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
	       exp___1__h1115 :
	       _theResult___fst__h1262 ;
  assign _theResult___fst__h1262 =
	     _0_CONCAT_temp_prod_0_BITS_15_TO_8_1_2_PLUS_1___d53[8] ?
	       _theResult___fst__h1316 :
	       exp___1__h1115 ;
  assign _theResult___fst__h1316 = exp_c + 8'd2 ;
  assign _theResult___fst__h1371 =
	     (!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
	       exp_c :
	       _theResult___fst__h1513 ;
  assign _theResult___fst__h1513 =
	     temp_prod_0_BITS_15_TO_7_6_PLUS_1___d67[8] ?
	       exp___1__h1115 :
	       exp_c ;
  assign _theResult___snd_fst__h1113 =
	     { 8'd0,
	       temp_prod[15] ?
		 ((!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
		    temp_prod[14:8] :
		    (_0_CONCAT_temp_prod_0_BITS_15_TO_8_1_2_PLUS_1___d53[8] ?
		       _0_CONCAT_temp_prod_0_BITS_15_TO_8_1_2_PLUS_1___d53[7:1] :
		       _0_CONCAT_temp_prod_0_BITS_15_TO_8_1_2_PLUS_1___d53[6:0])) :
		 ((!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
		    temp_prod[13:7] :
		    (temp_prod_0_BITS_15_TO_7_6_PLUS_1___d67[8] ?
		       temp_prod_0_BITS_15_TO_7_6_PLUS_1___d67[7:1] :
		       temp_prod_0_BITS_15_TO_7_6_PLUS_1___d67[6:0])) } ;
  assign exp___1__h1115 = exp_c + 8'd1 ;
  assign got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d26 =
	     got_A && got_B && sign_calculated && expone_calculated ;
  assign temp_prod_0_BITS_15_TO_7_6_PLUS_1___d67 = temp_prod[15:7] + 9'd1 ;
  assign x__h1617 =
	     temp_prod[15] ?
	       _theResult___fst__h1120 :
	       _theResult___fst__h1371 ;
  assign x__h835 = bf_a[14:7] + bf_b[14:7] ;
  assign x__h876 = { 1'd0, bf_a[6:0] } ;
  assign x__h892 = { 1'd0, bf_b[6:0] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bf_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_c <= `BSV_ASSIGNMENT_DELAY 16'd0;
	exp_c <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expone_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	final_output <= `BSV_ASSIGNMENT_DELAY 16'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	man_c <= `BSV_ASSIGNMENT_DELAY 7'd0;
	man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY 15'd0;
	mantissa_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rounding_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 8'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 8'd0;
	temp_prod <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (bf_a_EN) bf_a <= `BSV_ASSIGNMENT_DELAY bf_a_D_IN;
	if (bf_b_EN) bf_b <= `BSV_ASSIGNMENT_DELAY bf_b_D_IN;
	if (bf_c_EN) bf_c <= `BSV_ASSIGNMENT_DELAY bf_c_D_IN;
	if (exp_c_EN) exp_c <= `BSV_ASSIGNMENT_DELAY exp_c_D_IN;
	if (expone_calculated_EN)
	  expone_calculated <= `BSV_ASSIGNMENT_DELAY expone_calculated_D_IN;
	if (final_output_EN)
	  final_output <= `BSV_ASSIGNMENT_DELAY final_output_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (man_c_EN) man_c <= `BSV_ASSIGNMENT_DELAY man_c_D_IN;
	if (man_c_and_final_exp_EN)
	  man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY
	      man_c_and_final_exp_D_IN;
	if (mantissa_calculated_EN)
	  mantissa_calculated <= `BSV_ASSIGNMENT_DELAY
	      mantissa_calculated_D_IN;
	if (rounding_done_EN)
	  rounding_done <= `BSV_ASSIGNMENT_DELAY rounding_done_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (sign_calculated_EN)
	  sign_calculated <= `BSV_ASSIGNMENT_DELAY sign_calculated_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_prod_EN) temp_prod <= `BSV_ASSIGNMENT_DELAY temp_prod_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    assembled_answer = 1'h0;
    bf_a = 16'hAAAA;
    bf_b = 16'hAAAA;
    bf_c = 16'hAAAA;
    exp_c = 8'hAA;
    expone_calculated = 1'h0;
    final_output = 16'hAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    man_c = 7'h2A;
    man_c_and_final_exp = 15'h2AAA;
    mantissa_calculated = 1'h0;
    rounding_done = 1'h0;
    sign_c = 1'h0;
    sign_calculated = 1'h0;
    temp_A = 8'hAA;
    temp_B = 8'hAA;
    temp_prod = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbf16_mul

