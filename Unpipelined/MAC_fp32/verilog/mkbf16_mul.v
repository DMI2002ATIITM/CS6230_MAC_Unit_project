//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Wed Oct 23 23:12:07 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AB                         O    16 reg
// RDY_out_AB                     O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16 reg
// get_B_b                        I    16 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbf16_mul(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AB,
		  RDY_out_AB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AB
  output [15 : 0] out_AB;
  output RDY_out_AB;

  // signals for module outputs
  wire [15 : 0] out_AB;
  wire RDY_get_A, RDY_get_B, RDY_out_AB;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register bf_a
  reg [15 : 0] bf_a;
  wire [15 : 0] bf_a_D_IN;
  wire bf_a_EN;

  // register bf_b
  reg [15 : 0] bf_b;
  wire [15 : 0] bf_b_D_IN;
  wire bf_b_EN;

  // register bf_c
  reg [15 : 0] bf_c;
  wire [15 : 0] bf_c_D_IN;
  wire bf_c_EN;

  // register calculate_mantissa
  reg calculate_mantissa;
  wire calculate_mantissa_D_IN, calculate_mantissa_EN;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count_D_IN;
  wire count_EN;

  // register exp_c
  reg [7 : 0] exp_c;
  wire [7 : 0] exp_c_D_IN;
  wire exp_c_EN;

  // register expone_calculated
  reg expone_calculated;
  wire expone_calculated_D_IN, expone_calculated_EN;

  // register final_output
  reg [15 : 0] final_output;
  wire [15 : 0] final_output_D_IN;
  wire final_output_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register man_c
  reg [6 : 0] man_c;
  wire [6 : 0] man_c_D_IN;
  wire man_c_EN;

  // register man_c_and_final_exp
  reg [14 : 0] man_c_and_final_exp;
  wire [14 : 0] man_c_and_final_exp_D_IN;
  wire man_c_and_final_exp_EN;

  // register rounding_done
  reg rounding_done;
  wire rounding_done_D_IN, rounding_done_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register sign_calculated
  reg sign_calculated;
  wire sign_calculated_D_IN, sign_calculated_EN;

  // register temp_A
  reg [15 : 0] temp_A;
  wire [15 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [15 : 0] temp_B;
  wire [15 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_prod
  reg [15 : 0] temp_prod;
  wire [15 : 0] temp_prod_D_IN;
  wire temp_prod_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expone,
       CAN_FIRE_RL_calculate_sign,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_RL_round_nearest,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expone,
       WILL_FIRE_RL_calculate_sign,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_RL_round_nearest,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_temp_A_write_1__VAL_1,
		MUX_temp_A_write_1__VAL_2,
		MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_prod_write_1__VAL_2;
  wire [4 : 0] MUX_count_write_1__VAL_2;

  // remaining internal signals
  wire [15 : 0] IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5;
  wire [14 : 0] IF_IF_temp_prod_03_BIT_15_04_THEN_IF_NOT_temp__ETC__q8;
  wire [13 : 0] temp_prod_03_BIT_13_12_XOR_temp_A_05_BIT_13_13_ETC___d219;
  wire [11 : 0] temp_prod_03_BIT_11_20_XOR_temp_A_05_BIT_11_21_ETC___d218;
  wire [9 : 0] temp_prod_03_BIT_9_28_XOR_temp_A_05_BIT_9_29_3_ETC___d217;
  wire [8 : 0] IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7,
	       IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6;
  wire [7 : 0] IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q3,
	       IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q4,
	       IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2,
	       IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1,
	       _theResult___snd__h11736,
	       _theResult___snd_fst__h11811,
	       _theResult___snd_fst__h14827,
	       _theResult___snd_fst__h14835,
	       exp_c_38_BIT_7_39_XOR_exp_c_38_BIT_6_40_AND_ex_ETC___d293,
	       temp_prod_03_BIT_7_36_XOR_temp_A_05_BIT_7_37_3_ETC___d216,
	       x__h11808;
  wire [6 : 0] IF_NOT_temp_prod_03_BIT_6_40_96_OR_temp_prod_0_ETC___d349,
	       IF_NOT_temp_prod_03_BIT_7_36_32_OR_temp_prod_0_ETC___d330,
	       IF_temp_prod_03_BIT_15_04_THEN_IF_NOT_temp_pro_ETC___d350,
	       x__h11739,
	       x__h11762,
	       x__h9804,
	       x__h9827;
  wire [5 : 0] bf_a_BIT_12_3_XOR_bf_b_BIT_12_4_6_XOR_bf_a_BIT_ETC___d87,
	       exp_c_38_BIT_5_41_XOR_exp_c_38_BIT_4_42_AND_ex_ETC___d292,
	       temp_prod_03_BIT_5_44_XOR_temp_A_05_BIT_5_45_4_ETC___d215;
  wire [4 : 0] temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d346,
	       temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d327;
  wire [3 : 0] bf_a_BIT_10_1_XOR_bf_b_BIT_10_2_4_XOR_bf_a_BIT_ETC___d86,
	       exp_c_38_BIT_3_43_XOR_exp_c_38_BIT_2_44_AND_ex_ETC___d291,
	       temp_prod_03_BIT_3_52_XOR_temp_A_05_BIT_3_53_5_ETC___d214;
  wire [1 : 0] temp_prod_03_BIT_1_60_XOR_temp_A_05_BIT_1_61_6_ETC___d213;
  wire exp_c_38_BIT_7_39_XOR_exp_c_38_BIT_6_40_AND_ex_ETC___d253,
       got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d226,
       temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d318,
       temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d336,
       temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d317,
       temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d335,
       temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d316,
       temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d334,
       temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d315,
       temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d333,
       temp_prod_03_BIT_14_08_XOR_temp_prod_03_BIT_13_ETC___d314,
       temp_prod_03_BIT_15_04_AND_temp_prod_03_BIT_14_ETC___d273,
       temp_prod_03_BIT_15_04_XOR_temp_prod_03_BIT_14_ETC___d308,
       temp_prod_03_BIT_8_32_XOR_temp_prod_03_BIT_7_36___d338,
       temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_32___d319,
       temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_3_ETC___d337,
       x__h13592,
       x__h13718,
       x__h1380,
       x__h13904,
       x__h14090,
       x__h14276,
       x__h14462,
       x__h1507,
       x__h1564,
       x__h1693,
       x__h1750,
       x__h1879,
       x__h1936,
       x__h2065,
       x__h2122,
       x__h2251,
       x__h2308,
       x__h2437,
       x__h2494,
       x__h2667,
       x__h2793,
       x__h2979,
       x__h3165,
       x__h3351,
       x__h3537,
       x__h3723,
       x__h4707,
       x__h4754,
       x__h4899,
       x__h4946,
       x__h5091,
       x__h5138,
       x__h5283,
       x__h5330,
       x__h5475,
       x__h5522,
       x__h5667,
       x__h5714,
       x__h5859,
       x__h5906,
       x__h6051,
       x__h6098,
       x__h6243,
       x__h6290,
       x__h6435,
       x__h6482,
       x__h6627,
       x__h6674,
       x__h6819,
       x__h6866,
       x__h7011,
       x__h7058,
       x__h7144,
       x__h7203,
       x__h7250,
       y__h10441,
       y__h10627,
       y__h10813,
       y__h10999,
       y__h11185,
       y__h11371,
       y__h11557,
       y__h13719,
       y__h1381,
       y__h13905,
       y__h14091,
       y__h14277,
       y__h14463,
       y__h14649,
       y__h1508,
       y__h15226,
       y__h15415,
       y__h15604,
       y__h1565,
       y__h15793,
       y__h15982,
       y__h16171,
       y__h1694,
       y__h1751,
       y__h1880,
       y__h1937,
       y__h2066,
       y__h2123,
       y__h2252,
       y__h2309,
       y__h2438,
       y__h2495,
       y__h2794,
       y__h2980,
       y__h3166,
       y__h3352,
       y__h3538,
       y__h3724,
       y__h4649,
       y__h4708,
       y__h4755,
       y__h4841,
       y__h4900,
       y__h5033,
       y__h5092,
       y__h5225,
       y__h5284,
       y__h5417,
       y__h5476,
       y__h5609,
       y__h5668,
       y__h5801,
       y__h5860,
       y__h5993,
       y__h6052,
       y__h6185,
       y__h6244,
       y__h6377,
       y__h6436,
       y__h6569,
       y__h6628,
       y__h6761,
       y__h6820,
       y__h6953,
       y__h7012,
       y__h7145,
       y__h7204,
       y__h8506,
       y__h8692,
       y__h8878,
       y__h9064,
       y__h9250,
       y__h9436;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AB
  assign out_AB = bf_c ;
  assign RDY_out_AB = assembled_answer ;

  // rule RL_calculate_sign
  assign CAN_FIRE_RL_calculate_sign = got_A && got_B && !sign_calculated ;
  assign WILL_FIRE_RL_calculate_sign = CAN_FIRE_RL_calculate_sign ;

  // rule RL_calculate_expone
  assign CAN_FIRE_RL_calculate_expone =
	     got_A && got_B && sign_calculated && !expone_calculated ;
  assign WILL_FIRE_RL_calculate_expone = CAN_FIRE_RL_calculate_expone ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     got_A && got_B && count != 5'd0 && sign_calculated &&
	     expone_calculated &&
	     calculate_mantissa ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_round_nearest
  assign CAN_FIRE_RL_round_nearest =
	     got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d226 &&
	     calculate_mantissa &&
	     count == 5'd0 &&
	     !rounding_done ;
  assign WILL_FIRE_RL_round_nearest = CAN_FIRE_RL_round_nearest ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d226 &&
	     calculate_mantissa &&
	     rounding_done &&
	     !assembled_answer ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // inputs to muxes for submodule ports
  assign MUX_count_write_1__VAL_2 = count - 5'd1 ;
  assign MUX_temp_A_write_1__VAL_1 = { 9'd1, bf_a[6:0] } ;
  assign MUX_temp_A_write_1__VAL_2 = { temp_A[14:0], 1'd0 } ;
  assign MUX_temp_B_write_1__VAL_1 = { 9'd1, bf_b[6:0] } ;
  assign MUX_temp_B_write_1__VAL_2 = { 1'd0, temp_B[15:1] } ;
  assign MUX_temp_prod_write_1__VAL_2 =
	     { x__h7144 ^ y__h7145,
	       x__h7250 ^ y__h6953,
	       temp_prod_03_BIT_13_12_XOR_temp_A_05_BIT_13_13_ETC___d219 } ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_calculate_sign ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_calculate_sign || WILL_FIRE_RL_assemble_answer ;

  // register bf_a
  assign bf_a_D_IN = get_A_a ;
  assign bf_a_EN = EN_get_A ;

  // register bf_b
  assign bf_b_D_IN = get_B_b ;
  assign bf_b_EN = EN_get_B ;

  // register bf_c
  assign bf_c_D_IN = { sign_c, man_c_and_final_exp } ;
  assign bf_c_EN = CAN_FIRE_RL_assemble_answer ;

  // register calculate_mantissa
  assign calculate_mantissa_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign calculate_mantissa_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_expone ;

  // register count
  assign count_D_IN =
	     WILL_FIRE_RL_assemble_answer ? 5'd8 : MUX_count_write_1__VAL_2 ;
  assign count_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_assemble_answer ;

  // register exp_c
  assign exp_c_D_IN =
	     { x__h3723 ^ y__h3724,
	       x__h3537 ^ y__h3538,
	       bf_a_BIT_12_3_XOR_bf_b_BIT_12_4_6_XOR_bf_a_BIT_ETC___d87 } ;
  assign exp_c_EN = CAN_FIRE_RL_calculate_expone ;

  // register expone_calculated
  assign expone_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign expone_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_expone ;

  // register final_output
  assign final_output_D_IN = 16'h0 ;
  assign final_output_EN = 1'b0 ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_A_EN = WILL_FIRE_RL_assemble_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_B_EN = WILL_FIRE_RL_assemble_answer || EN_get_B ;

  // register man_c
  assign man_c_D_IN = 7'h0 ;
  assign man_c_EN = 1'b0 ;

  // register man_c_and_final_exp
  assign man_c_and_final_exp_D_IN =
	     { x__h11808,
	       IF_temp_prod_03_BIT_15_04_THEN_IF_NOT_temp_pro_ETC___d350[6:1],
	       IF_IF_temp_prod_03_BIT_15_04_THEN_IF_NOT_temp__ETC__q8[0] } ;
  assign man_c_and_final_exp_EN = CAN_FIRE_RL_round_nearest ;

  // register rounding_done
  assign rounding_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign rounding_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_round_nearest ;

  // register sign_c
  assign sign_c_D_IN = bf_a[15] ^ bf_b[15] ;
  assign sign_c_EN = CAN_FIRE_RL_calculate_sign ;

  // register sign_calculated
  assign sign_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign sign_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_sign ;

  // register temp_A
  assign temp_A_D_IN =
	     WILL_FIRE_RL_calculate_expone ?
	       MUX_temp_A_write_1__VAL_1 :
	       MUX_temp_A_write_1__VAL_2 ;
  assign temp_A_EN =
	     WILL_FIRE_RL_calculate_expone || WILL_FIRE_RL_rl_multiply ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_calculate_expone ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN =
	     WILL_FIRE_RL_calculate_expone || WILL_FIRE_RL_rl_multiply ;

  // register temp_prod
  assign temp_prod_D_IN =
	     WILL_FIRE_RL_assemble_answer ?
	       16'd0 :
	       MUX_temp_prod_write_1__VAL_2 ;
  assign temp_prod_EN =
	     WILL_FIRE_RL_rl_multiply && temp_B[0] ||
	     WILL_FIRE_RL_assemble_answer ;

  // remaining internal signals
  assign IF_IF_temp_prod_03_BIT_15_04_THEN_IF_NOT_temp__ETC__q8 =
	     IF_temp_prod_03_BIT_15_04_THEN_IF_NOT_temp_pro_ETC___d350[0] ?
	       15'd1 :
	       15'd0 ;
  assign IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q3 =
	     (~IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q4 =
	     (~IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2 = (~exp_c[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7 =
	     (~temp_prod[7]) ? 9'd1 : 9'd0 ;
  assign IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6 =
	     (~temp_prod[8]) ? 9'd1 : 9'd0 ;
  assign IF_NOT_temp_prod_03_BIT_6_40_96_OR_temp_prod_0_ETC___d349 =
	     (!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
	       temp_prod[13:7] :
	       (temp_prod_03_BIT_15_04_XOR_temp_prod_03_BIT_14_ETC___d308 ?
		  x__h11739 :
		  x__h11762) ;
  assign IF_NOT_temp_prod_03_BIT_7_36_32_OR_temp_prod_0_ETC___d330 =
	     (!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
	       temp_prod[14:8] :
	       (temp_prod_03_BIT_15_04_AND_temp_prod_03_BIT_14_ETC___d273 ?
		  x__h9804 :
		  x__h9827) ;
  assign IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1 =
	     (bf_a[7] ^ bf_b[7]) ? 8'd1 : 8'd0 ;
  assign IF_temp_prod_03_BIT_15_04_THEN_IF_NOT_temp_pro_ETC___d350 =
	     temp_prod[15] ?
	       IF_NOT_temp_prod_03_BIT_7_36_32_OR_temp_prod_0_ETC___d330 :
	       IF_NOT_temp_prod_03_BIT_6_40_96_OR_temp_prod_0_ETC___d349 ;
  assign IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5 =
	     (temp_prod[0] ^ temp_A[0]) ? 16'd1 : 16'd0 ;
  assign _theResult___snd__h11736 =
	     { exp_c_38_BIT_7_39_XOR_exp_c_38_BIT_6_40_AND_ex_ETC___d253,
	       x__h14462,
	       x__h14276,
	       x__h14090,
	       x__h13904,
	       x__h13718,
	       x__h13592,
	       IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign _theResult___snd_fst__h11811 =
	     (!temp_prod[7] || temp_prod[6:0] == 7'd0 && !temp_prod[8]) ?
	       _theResult___snd__h11736 :
	       (temp_prod_03_BIT_15_04_AND_temp_prod_03_BIT_14_ETC___d273 ?
		  exp_c_38_BIT_7_39_XOR_exp_c_38_BIT_6_40_AND_ex_ETC___d293 :
		  _theResult___snd__h11736) ;
  assign _theResult___snd_fst__h14827 =
	     (!temp_prod[6] || temp_prod[5:0] == 6'd0 && !temp_prod[7]) ?
	       exp_c :
	       _theResult___snd_fst__h14835 ;
  assign _theResult___snd_fst__h14835 =
	     temp_prod_03_BIT_15_04_XOR_temp_prod_03_BIT_14_ETC___d308 ?
	       _theResult___snd__h11736 :
	       exp_c ;
  assign bf_a_BIT_10_1_XOR_bf_b_BIT_10_2_4_XOR_bf_a_BIT_ETC___d86 =
	     { x__h2979 ^ y__h2980,
	       x__h2793 ^ y__h2794,
	       x__h2667 ^ IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0],
	       IF_INV_IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELS_ETC__q4[0] } ;
  assign bf_a_BIT_12_3_XOR_bf_b_BIT_12_4_6_XOR_bf_a_BIT_ETC___d87 =
	     { x__h3351 ^ y__h3352,
	       x__h3165 ^ y__h3166,
	       bf_a_BIT_10_1_XOR_bf_b_BIT_10_2_4_XOR_bf_a_BIT_ETC___d86 } ;
  assign exp_c_38_BIT_3_43_XOR_exp_c_38_BIT_2_44_AND_ex_ETC___d291 =
	     { x__h13904 ^ y__h13905,
	       x__h13718 ^ y__h13719,
	       x__h13592 ^ IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0],
	       IF_INV_IF_INV_exp_c_BIT_0_THEN_1_ELSE_0_BIT_0__ETC__q3[0] } ;
  assign exp_c_38_BIT_5_41_XOR_exp_c_38_BIT_4_42_AND_ex_ETC___d292 =
	     { x__h14276 ^ y__h14277,
	       x__h14090 ^ y__h14091,
	       exp_c_38_BIT_3_43_XOR_exp_c_38_BIT_2_44_AND_ex_ETC___d291 } ;
  assign exp_c_38_BIT_7_39_XOR_exp_c_38_BIT_6_40_AND_ex_ETC___d253 =
	     exp_c[7] ^ y__h16171 ;
  assign exp_c_38_BIT_7_39_XOR_exp_c_38_BIT_6_40_AND_ex_ETC___d293 =
	     { exp_c_38_BIT_7_39_XOR_exp_c_38_BIT_6_40_AND_ex_ETC___d253 ^
	       y__h14649,
	       x__h14462 ^ y__h14463,
	       exp_c_38_BIT_5_41_XOR_exp_c_38_BIT_4_42_AND_ex_ETC___d292 } ;
  assign got_A_AND_got_B_AND_sign_calculated_2_AND_expo_ETC___d226 =
	     got_A && got_B && sign_calculated && expone_calculated ;
  assign temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d318 =
	     temp_prod[10] ^ y__h8506 ;
  assign temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d336 =
	     temp_prod[10] ^ y__h10627 ;
  assign temp_prod_03_BIT_11_20_XOR_temp_A_05_BIT_11_21_ETC___d218 =
	     { x__h6674 ^ y__h6377,
	       x__h6482 ^ y__h6185,
	       temp_prod_03_BIT_9_28_XOR_temp_A_05_BIT_9_29_3_ETC___d217 } ;
  assign temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d317 =
	     temp_prod[11] ^ y__h8692 ;
  assign temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d335 =
	     temp_prod[11] ^ y__h10813 ;
  assign temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d346 =
	     { temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d335,
	       temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d336,
	       temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_3_ETC___d337,
	       temp_prod_03_BIT_8_32_XOR_temp_prod_03_BIT_7_36___d338,
	       IF_INV_temp_prod_BIT_7_THEN_1_ELSE_0__q7[0] } ;
  assign temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d316 =
	     temp_prod[12] ^ y__h8878 ;
  assign temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d327 =
	     { temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d316,
	       temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d317,
	       temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d318,
	       temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_32___d319,
	       IF_INV_temp_prod_BIT_8_THEN_1_ELSE_0__q6[0] } ;
  assign temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d334 =
	     temp_prod[12] ^ y__h10999 ;
  assign temp_prod_03_BIT_13_12_XOR_temp_A_05_BIT_13_13_ETC___d219 =
	     { x__h7058 ^ y__h6761,
	       x__h6866 ^ y__h6569,
	       temp_prod_03_BIT_11_20_XOR_temp_A_05_BIT_11_21_ETC___d218 } ;
  assign temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d315 =
	     temp_prod[13] ^ y__h9064 ;
  assign temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d333 =
	     temp_prod[13] ^ y__h11185 ;
  assign temp_prod_03_BIT_14_08_XOR_temp_prod_03_BIT_13_ETC___d314 =
	     temp_prod[14] ^ y__h9250 ;
  assign temp_prod_03_BIT_15_04_AND_temp_prod_03_BIT_14_ETC___d273 =
	     temp_prod[15] & y__h9436 ;
  assign temp_prod_03_BIT_15_04_XOR_temp_prod_03_BIT_14_ETC___d308 =
	     temp_prod[15] ^ y__h11557 ;
  assign temp_prod_03_BIT_1_60_XOR_temp_A_05_BIT_1_61_6_ETC___d213 =
	     { x__h4754 ^ y__h4755,
	       IF_temp_prod_BIT_0_XOR_temp_A_BIT_0_THEN_1_ELSE_0__q5[0] } ;
  assign temp_prod_03_BIT_3_52_XOR_temp_A_05_BIT_3_53_5_ETC___d214 =
	     { x__h5138 ^ y__h4841,
	       x__h4946 ^ y__h4649,
	       temp_prod_03_BIT_1_60_XOR_temp_A_05_BIT_1_61_6_ETC___d213 } ;
  assign temp_prod_03_BIT_5_44_XOR_temp_A_05_BIT_5_45_4_ETC___d215 =
	     { x__h5522 ^ y__h5225,
	       x__h5330 ^ y__h5033,
	       temp_prod_03_BIT_3_52_XOR_temp_A_05_BIT_3_53_5_ETC___d214 } ;
  assign temp_prod_03_BIT_7_36_XOR_temp_A_05_BIT_7_37_3_ETC___d216 =
	     { x__h5906 ^ y__h5609,
	       x__h5714 ^ y__h5417,
	       temp_prod_03_BIT_5_44_XOR_temp_A_05_BIT_5_45_4_ETC___d215 } ;
  assign temp_prod_03_BIT_8_32_XOR_temp_prod_03_BIT_7_36___d338 =
	     temp_prod[8] ^ temp_prod[7] ;
  assign temp_prod_03_BIT_9_28_XOR_temp_A_05_BIT_9_29_3_ETC___d217 =
	     { x__h6290 ^ y__h5993,
	       x__h6098 ^ y__h5801,
	       temp_prod_03_BIT_7_36_XOR_temp_A_05_BIT_7_37_3_ETC___d216 } ;
  assign temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_32___d319 =
	     temp_prod[9] ^ temp_prod[8] ;
  assign temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_3_ETC___d337 =
	     temp_prod[9] ^ y__h10441 ;
  assign x__h11739 =
	     { temp_prod[14] ^ y__h11371,
	       temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d333,
	       temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d334,
	       temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d335,
	       temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d336,
	       temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_3_ETC___d337,
	       temp_prod_03_BIT_8_32_XOR_temp_prod_03_BIT_7_36___d338 } ;
  assign x__h11762 =
	     { temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d333,
	       temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d334,
	       temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d346 } ;
  assign x__h11808 =
	     temp_prod[15] ?
	       _theResult___snd_fst__h11811 :
	       _theResult___snd_fst__h14827 ;
  assign x__h13592 = exp_c[1] ^ exp_c[0] ;
  assign x__h13718 = exp_c[2] ^ y__h15226 ;
  assign x__h1380 = bf_a[8] ^ bf_b[8] ;
  assign x__h13904 = exp_c[3] ^ y__h15415 ;
  assign x__h14090 = exp_c[4] ^ y__h15604 ;
  assign x__h14276 = exp_c[5] ^ y__h15793 ;
  assign x__h14462 = exp_c[6] ^ y__h15982 ;
  assign x__h1507 = bf_a[9] ^ bf_b[9] ;
  assign x__h1564 = bf_a[8] & bf_b[8] ;
  assign x__h1693 = bf_a[10] ^ bf_b[10] ;
  assign x__h1750 = bf_a[9] & bf_b[9] ;
  assign x__h1879 = bf_a[11] ^ bf_b[11] ;
  assign x__h1936 = bf_a[10] & bf_b[10] ;
  assign x__h2065 = bf_a[12] ^ bf_b[12] ;
  assign x__h2122 = bf_a[11] & bf_b[11] ;
  assign x__h2251 = bf_a[13] ^ bf_b[13] ;
  assign x__h2308 = bf_a[12] & bf_b[12] ;
  assign x__h2437 = bf_a[14] ^ bf_b[14] ;
  assign x__h2494 = bf_a[13] & bf_b[13] ;
  assign x__h2667 = x__h1380 ^ y__h1381 ;
  assign x__h2793 = x__h1507 ^ y__h1508 ;
  assign x__h2979 = x__h1693 ^ y__h1694 ;
  assign x__h3165 = x__h1879 ^ y__h1880 ;
  assign x__h3351 = x__h2065 ^ y__h2066 ;
  assign x__h3537 = x__h2251 ^ y__h2252 ;
  assign x__h3723 = ~(x__h2437 ^ y__h2438) ;
  assign x__h4707 = temp_prod[1] & temp_A[1] ;
  assign x__h4754 = temp_prod[1] ^ temp_A[1] ;
  assign x__h4899 = temp_prod[2] & temp_A[2] ;
  assign x__h4946 = temp_prod[2] ^ temp_A[2] ;
  assign x__h5091 = temp_prod[3] & temp_A[3] ;
  assign x__h5138 = temp_prod[3] ^ temp_A[3] ;
  assign x__h5283 = temp_prod[4] & temp_A[4] ;
  assign x__h5330 = temp_prod[4] ^ temp_A[4] ;
  assign x__h5475 = temp_prod[5] & temp_A[5] ;
  assign x__h5522 = temp_prod[5] ^ temp_A[5] ;
  assign x__h5667 = temp_prod[6] & temp_A[6] ;
  assign x__h5714 = temp_prod[6] ^ temp_A[6] ;
  assign x__h5859 = temp_prod[7] & temp_A[7] ;
  assign x__h5906 = temp_prod[7] ^ temp_A[7] ;
  assign x__h6051 = temp_prod[8] & temp_A[8] ;
  assign x__h6098 = temp_prod[8] ^ temp_A[8] ;
  assign x__h6243 = temp_prod[9] & temp_A[9] ;
  assign x__h6290 = temp_prod[9] ^ temp_A[9] ;
  assign x__h6435 = temp_prod[10] & temp_A[10] ;
  assign x__h6482 = temp_prod[10] ^ temp_A[10] ;
  assign x__h6627 = temp_prod[11] & temp_A[11] ;
  assign x__h6674 = temp_prod[11] ^ temp_A[11] ;
  assign x__h6819 = temp_prod[12] & temp_A[12] ;
  assign x__h6866 = temp_prod[12] ^ temp_A[12] ;
  assign x__h7011 = temp_prod[13] & temp_A[13] ;
  assign x__h7058 = temp_prod[13] ^ temp_A[13] ;
  assign x__h7144 = temp_prod[15] ^ temp_A[15] ;
  assign x__h7203 = temp_prod[14] & temp_A[14] ;
  assign x__h7250 = temp_prod[14] ^ temp_A[14] ;
  assign x__h9804 =
	     { temp_prod[15] ^ y__h9436,
	       temp_prod_03_BIT_14_08_XOR_temp_prod_03_BIT_13_ETC___d314,
	       temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d315,
	       temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d316,
	       temp_prod_03_BIT_11_20_XOR_temp_prod_03_BIT_10_ETC___d317,
	       temp_prod_03_BIT_10_24_XOR_temp_prod_03_BIT_9__ETC___d318,
	       temp_prod_03_BIT_9_28_XOR_temp_prod_03_BIT_8_32___d319 } ;
  assign x__h9827 =
	     { temp_prod_03_BIT_14_08_XOR_temp_prod_03_BIT_13_ETC___d314,
	       temp_prod_03_BIT_13_12_XOR_temp_prod_03_BIT_12_ETC___d315,
	       temp_prod_03_BIT_12_16_XOR_temp_prod_03_BIT_11_ETC___d327 } ;
  assign y__h10441 = temp_prod[8] & temp_prod[7] ;
  assign y__h10627 = temp_prod[9] & y__h10441 ;
  assign y__h10813 = temp_prod[10] & y__h10627 ;
  assign y__h10999 = temp_prod[11] & y__h10813 ;
  assign y__h11185 = temp_prod[12] & y__h10999 ;
  assign y__h11371 = temp_prod[13] & y__h11185 ;
  assign y__h11557 = temp_prod[14] & y__h11371 ;
  assign y__h13719 = x__h13592 & IF_INV_exp_c_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h1381 = bf_a[7] & bf_b[7] ;
  assign y__h13905 = x__h13718 & y__h13719 ;
  assign y__h14091 = x__h13904 & y__h13905 ;
  assign y__h14277 = x__h14090 & y__h14091 ;
  assign y__h14463 = x__h14276 & y__h14277 ;
  assign y__h14649 = x__h14462 & y__h14463 ;
  assign y__h1508 = x__h1564 | y__h1565 ;
  assign y__h15226 = exp_c[1] & exp_c[0] ;
  assign y__h15415 = exp_c[2] & y__h15226 ;
  assign y__h15604 = exp_c[3] & y__h15415 ;
  assign y__h1565 = x__h1380 & y__h1381 ;
  assign y__h15793 = exp_c[4] & y__h15604 ;
  assign y__h15982 = exp_c[5] & y__h15793 ;
  assign y__h16171 = exp_c[6] & y__h15982 ;
  assign y__h1694 = x__h1750 | y__h1751 ;
  assign y__h1751 = x__h1507 & y__h1508 ;
  assign y__h1880 = x__h1936 | y__h1937 ;
  assign y__h1937 = x__h1693 & y__h1694 ;
  assign y__h2066 = x__h2122 | y__h2123 ;
  assign y__h2123 = x__h1879 & y__h1880 ;
  assign y__h2252 = x__h2308 | y__h2309 ;
  assign y__h2309 = x__h2065 & y__h2066 ;
  assign y__h2438 = x__h2494 | y__h2495 ;
  assign y__h2495 = x__h2251 & y__h2252 ;
  assign y__h2794 =
	     x__h2667 & IF_bf_a_BIT_7_XOR_bf_b_BIT_7_THEN_1_ELSE_0__q1[0] ;
  assign y__h2980 = x__h2793 & y__h2794 ;
  assign y__h3166 = x__h2979 & y__h2980 ;
  assign y__h3352 = x__h3165 & y__h3166 ;
  assign y__h3538 = x__h3351 & y__h3352 ;
  assign y__h3724 = x__h3537 & y__h3538 ;
  assign y__h4649 = x__h4707 | y__h4708 ;
  assign y__h4708 = x__h4754 & y__h4755 ;
  assign y__h4755 = temp_prod[0] & temp_A[0] ;
  assign y__h4841 = x__h4899 | y__h4900 ;
  assign y__h4900 = x__h4946 & y__h4649 ;
  assign y__h5033 = x__h5091 | y__h5092 ;
  assign y__h5092 = x__h5138 & y__h4841 ;
  assign y__h5225 = x__h5283 | y__h5284 ;
  assign y__h5284 = x__h5330 & y__h5033 ;
  assign y__h5417 = x__h5475 | y__h5476 ;
  assign y__h5476 = x__h5522 & y__h5225 ;
  assign y__h5609 = x__h5667 | y__h5668 ;
  assign y__h5668 = x__h5714 & y__h5417 ;
  assign y__h5801 = x__h5859 | y__h5860 ;
  assign y__h5860 = x__h5906 & y__h5609 ;
  assign y__h5993 = x__h6051 | y__h6052 ;
  assign y__h6052 = x__h6098 & y__h5801 ;
  assign y__h6185 = x__h6243 | y__h6244 ;
  assign y__h6244 = x__h6290 & y__h5993 ;
  assign y__h6377 = x__h6435 | y__h6436 ;
  assign y__h6436 = x__h6482 & y__h6185 ;
  assign y__h6569 = x__h6627 | y__h6628 ;
  assign y__h6628 = x__h6674 & y__h6377 ;
  assign y__h6761 = x__h6819 | y__h6820 ;
  assign y__h6820 = x__h6866 & y__h6569 ;
  assign y__h6953 = x__h7011 | y__h7012 ;
  assign y__h7012 = x__h7058 & y__h6761 ;
  assign y__h7145 = x__h7203 | y__h7204 ;
  assign y__h7204 = x__h7250 & y__h6953 ;
  assign y__h8506 = temp_prod[9] & temp_prod[8] ;
  assign y__h8692 = temp_prod[10] & y__h8506 ;
  assign y__h8878 = temp_prod[11] & y__h8692 ;
  assign y__h9064 = temp_prod[12] & y__h8878 ;
  assign y__h9250 = temp_prod[13] & y__h9064 ;
  assign y__h9436 = temp_prod[14] & y__h9250 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bf_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_c <= `BSV_ASSIGNMENT_DELAY 16'd0;
	calculate_mantissa <= `BSV_ASSIGNMENT_DELAY 1'd0;
	count <= `BSV_ASSIGNMENT_DELAY 5'd8;
	exp_c <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expone_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	final_output <= `BSV_ASSIGNMENT_DELAY 16'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	man_c <= `BSV_ASSIGNMENT_DELAY 7'd0;
	man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY 15'd0;
	rounding_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	temp_prod <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (bf_a_EN) bf_a <= `BSV_ASSIGNMENT_DELAY bf_a_D_IN;
	if (bf_b_EN) bf_b <= `BSV_ASSIGNMENT_DELAY bf_b_D_IN;
	if (bf_c_EN) bf_c <= `BSV_ASSIGNMENT_DELAY bf_c_D_IN;
	if (calculate_mantissa_EN)
	  calculate_mantissa <= `BSV_ASSIGNMENT_DELAY calculate_mantissa_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (exp_c_EN) exp_c <= `BSV_ASSIGNMENT_DELAY exp_c_D_IN;
	if (expone_calculated_EN)
	  expone_calculated <= `BSV_ASSIGNMENT_DELAY expone_calculated_D_IN;
	if (final_output_EN)
	  final_output <= `BSV_ASSIGNMENT_DELAY final_output_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (man_c_EN) man_c <= `BSV_ASSIGNMENT_DELAY man_c_D_IN;
	if (man_c_and_final_exp_EN)
	  man_c_and_final_exp <= `BSV_ASSIGNMENT_DELAY
	      man_c_and_final_exp_D_IN;
	if (rounding_done_EN)
	  rounding_done <= `BSV_ASSIGNMENT_DELAY rounding_done_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (sign_calculated_EN)
	  sign_calculated <= `BSV_ASSIGNMENT_DELAY sign_calculated_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_prod_EN) temp_prod <= `BSV_ASSIGNMENT_DELAY temp_prod_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    assembled_answer = 1'h0;
    bf_a = 16'hAAAA;
    bf_b = 16'hAAAA;
    bf_c = 16'hAAAA;
    calculate_mantissa = 1'h0;
    count = 5'h0A;
    exp_c = 8'hAA;
    expone_calculated = 1'h0;
    final_output = 16'hAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    man_c = 7'h2A;
    man_c_and_final_exp = 15'h2AAA;
    rounding_done = 1'h0;
    sign_c = 1'h0;
    sign_calculated = 1'h0;
    temp_A = 16'hAAAA;
    temp_B = 16'hAAAA;
    temp_prod = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbf16_mul

