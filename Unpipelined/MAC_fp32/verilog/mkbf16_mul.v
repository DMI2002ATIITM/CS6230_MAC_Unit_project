//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Mon Oct 14 00:09:31 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AB                         O    16 const
// RDY_out_AB                     O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16 reg
// get_B_b                        I    16 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkbf16_mul(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AB,
		  RDY_out_AB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AB
  output [15 : 0] out_AB;
  output RDY_out_AB;

  // signals for module outputs
  wire [15 : 0] out_AB;
  wire RDY_get_A, RDY_get_B, RDY_out_AB;

  // register bf_a
  reg [15 : 0] bf_a;
  wire [15 : 0] bf_a_D_IN;
  wire bf_a_EN;

  // register bf_b
  reg [15 : 0] bf_b;
  wire [15 : 0] bf_b_D_IN;
  wire bf_b_EN;

  // register bf_c
  reg [15 : 0] bf_c;
  wire [15 : 0] bf_c_D_IN;
  wire bf_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // rule scheduling signals
  wire CAN_FIRE_get_A, CAN_FIRE_get_B, WILL_FIRE_get_A, WILL_FIRE_get_B;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AB
  assign out_AB = 16'd0 ;
  assign RDY_out_AB = 1'd1 ;

  // register bf_a
  assign bf_a_D_IN = get_A_a ;
  assign bf_a_EN = EN_get_A ;

  // register bf_b
  assign bf_b_D_IN = get_B_b ;
  assign bf_b_EN = EN_get_B ;

  // register bf_c
  assign bf_c_D_IN = 16'h0 ;
  assign bf_c_EN = 1'b0 ;

  // register got_A
  assign got_A_D_IN = 1'd1 ;
  assign got_A_EN = EN_get_A ;

  // register got_B
  assign got_B_D_IN = 1'd1 ;
  assign got_B_EN = EN_get_B ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bf_a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	bf_c <= `BSV_ASSIGNMENT_DELAY 16'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (bf_a_EN) bf_a <= `BSV_ASSIGNMENT_DELAY bf_a_D_IN;
	if (bf_b_EN) bf_b <= `BSV_ASSIGNMENT_DELAY bf_b_D_IN;
	if (bf_c_EN) bf_c <= `BSV_ASSIGNMENT_DELAY bf_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bf_a = 16'hAAAA;
    bf_b = 16'hAAAA;
    bf_c = 16'hAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkbf16_mul

