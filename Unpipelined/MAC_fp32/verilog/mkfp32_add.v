//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri Oct 25 23:03:18 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  reg [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register adj_done
  reg adj_done;
  wire adj_done_D_IN, adj_done_EN;

  // register adj_sub
  reg adj_sub;
  wire adj_sub_D_IN, adj_sub_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register do_add
  reg do_add;
  wire do_add_D_IN, do_add_EN;

  // register do_sub
  reg do_sub;
  wire do_sub_D_IN, do_sub_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  reg [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  wire [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  reg [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_adjust_subres,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_round_sub,
       CAN_FIRE_RL_sub,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_adjust_subres,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_round_sub,
       WILL_FIRE_RL_sub,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_3,
		MUX_temp_sum_write_1__VAL_4;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2, MUX_fp_a_write_1__VAL_3;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_1,
		MUX_add_res_with_adj_exp_write_1__VAL_2;
  wire MUX_fp_a_write_1__SEL_1, MUX_fp_a_write_1__SEL_2;

  // remaining internal signals
  wire [30 : 0] IF_IF_temp_sum_21_BIT_48_22_THEN_IF_NOT_temp_s_ETC__q10,
		IF_IF_temp_sum_21_BIT_49_33_THEN_IF_NOT_temp_s_ETC__q11;
  wire [24 : 0] IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5,
		IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [22 : 0] IF_NOT_temp_sum_21_BIT_23_72_73_OR_temp_sum_21_ETC___d483,
		IF_NOT_temp_sum_21_BIT_24_28_29_OR_temp_sum_21_ETC___d362,
		IF_NOT_temp_sum_21_BIT_25_34_35_OR_temp_sum_21_ETC___d311,
		IF_temp_sum_21_BIT_48_22_THEN_IF_NOT_temp_sum__ETC___d484,
		IF_temp_sum_21_BIT_49_33_THEN_IF_NOT_temp_sum__ETC___d363,
		x__h10889,
		x__h10912,
		x__h32372,
		x__h32395,
		x__h37651,
		x__h37674;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_INV_x_exponent767_BIT_0_THEN_1_ELSE_0__q7,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h16165,
	       _theResult___snd__h32369,
	       _theResult___snd_fst__h16240,
	       _theResult___snd_fst__h19239,
	       _theResult___snd_fst__h19247,
	       _theResult___snd_fst__h37723,
	       _theResult___snd_fst__h37731,
	       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d225,
	       x__h16237,
	       x__h37720,
	       x_exponent__h4767;
  wire [5 : 0] fp_a_BITS_30_TO_23_MINUS_0b1_24_BIT_5_04_XOR_f_ETC___d428,
	       fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d224;
  wire [4 : 0] temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d472,
	       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d351,
	       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d300;
  wire [3 : 0] fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d223;
  wire [1 : 0] fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93;
  wire fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17,
       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d148,
       fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106,
       got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97,
       temp_sum_21_BIT_24_28_XOR_temp_sum_21_BIT_23_72___d456,
       temp_sum_21_BIT_25_34_XOR_temp_sum_21_BIT_24_2_ETC___d455,
       temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_34___d335,
       temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_3_ETC___d454,
       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_38___d284,
       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d334,
       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d453,
       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d283,
       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d333,
       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d452,
       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d282,
       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d332,
       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d451,
       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d281,
       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d331,
       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d450,
       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d280,
       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d330,
       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d449,
       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d279,
       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d329,
       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d448,
       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d278,
       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d328,
       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d447,
       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d277,
       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d327,
       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d446,
       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d276,
       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d326,
       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d445,
       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d275,
       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d325,
       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d444,
       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d274,
       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d324,
       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d443,
       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d273,
       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d323,
       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d442,
       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d272,
       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d322,
       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d441,
       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d271,
       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d321,
       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d440,
       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d270,
       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d320,
       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d439,
       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d269,
       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d319,
       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d438,
       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d268,
       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d318,
       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d437,
       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d267,
       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d317,
       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d436,
       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d266,
       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d316,
       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d435,
       temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d265,
       temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d315,
       temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d264,
       temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d314,
       temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d401,
       temp_sum_21_BIT_48_22_XOR_temp_sum_21_BIT_47_6_ETC___d263,
       temp_sum_21_BIT_49_33_AND_temp_sum_21_BIT_48_2_ETC___d205,
       temp_sum_21_BIT_49_33_XOR_temp_sum_21_BIT_48_2_ETC___d257,
       x__h18004,
       x__h18130,
       x__h18316,
       x__h18502,
       x__h18688,
       x__h18874,
       x__h2910,
       x__h3037,
       x__h3094,
       x__h3223,
       x__h3280,
       x__h3409,
       x__h3466,
       x__h3595,
       x__h3652,
       x__h3781,
       x__h3838,
       x__h3967,
       x__h4024,
       y__h10149,
       y__h10335,
       y__h10521,
       y__h16634,
       y__h16820,
       y__h17006,
       y__h17192,
       y__h17378,
       y__h1753,
       y__h17564,
       y__h18131,
       y__h18317,
       y__h18503,
       y__h18689,
       y__h18875,
       y__h19061,
       y__h1942,
       y__h2131,
       y__h2320,
       y__h2509,
       y__h2698,
       y__h28098,
       y__h28284,
       y__h28470,
       y__h28656,
       y__h28842,
       y__h29028,
       y__h2911,
       y__h2913,
       y__h29214,
       y__h29400,
       y__h29586,
       y__h29772,
       y__h29958,
       y__h30144,
       y__h30330,
       y__h3038,
       y__h3040,
       y__h30516,
       y__h30702,
       y__h30888,
       y__h3095,
       y__h31074,
       y__h31260,
       y__h31446,
       y__h31632,
       y__h31818,
       y__h32004,
       y__h32190,
       y__h3224,
       y__h3226,
       y__h3281,
       y__h33377,
       y__h33563,
       y__h33749,
       y__h33935,
       y__h3410,
       y__h3412,
       y__h34121,
       y__h34307,
       y__h34493,
       y__h3467,
       y__h34679,
       y__h34865,
       y__h35051,
       y__h35237,
       y__h35423,
       y__h35609,
       y__h35795,
       y__h3596,
       y__h3598,
       y__h35981,
       y__h36167,
       y__h36353,
       y__h3653,
       y__h36539,
       y__h36725,
       y__h36911,
       y__h37097,
       y__h37283,
       y__h37469,
       y__h3782,
       y__h3784,
       y__h38124,
       y__h38313,
       y__h3839,
       y__h38502,
       y__h38691,
       y__h38880,
       y__h39069,
       y__h3968,
       y__h3970,
       y__h4025,
       y__h6615,
       y__h6801,
       y__h6987,
       y__h7173,
       y__h7359,
       y__h7545,
       y__h7731,
       y__h7917,
       y__h8103,
       y__h8289,
       y__h8475,
       y__h8661,
       y__h8847,
       y__h9033,
       y__h9219,
       y__h9405,
       y__h9591,
       y__h9777,
       y__h9963;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = assembled_answer ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     got_A && got_B && !operands_swapped_if_needed ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff =
	     got_A && got_B && operands_swapped_if_needed &&
	     !expdiff_calculated ;
  assign WILL_FIRE_RL_calculate_expdiff = CAN_FIRE_RL_calculate_expdiff ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     !add_prep_done ;
  assign WILL_FIRE_RL_add_prep = CAN_FIRE_RL_add_prep ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_addition_result &&
	     !round_done ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_round_sub
  assign CAN_FIRE_RL_round_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_subtraction_result &&
	     !round_done ;
  assign WILL_FIRE_RL_round_sub =
	     CAN_FIRE_RL_round_sub && !WILL_FIRE_RL_round_add ;

  // rule RL_adjust_subres
  assign CAN_FIRE_RL_adjust_subres =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     adj_sub &&
	     !adj_done ;
  assign WILL_FIRE_RL_adjust_subres = CAN_FIRE_RL_adjust_subres ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     do_add ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_sub
  assign CAN_FIRE_RL_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     do_sub ;
  assign WILL_FIRE_RL_sub = CAN_FIRE_RL_sub ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_done &&
	     !assembled_answer ;
  assign WILL_FIRE_RL_assemble_answer =
	     CAN_FIRE_RL_assemble_answer && !WILL_FIRE_RL_add_prep ;

  // inputs to muxes for submodule ports
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ;
  assign MUX_fp_a_write_1__SEL_2 =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_1 =
	     { x__h16237,
	       IF_temp_sum_21_BIT_49_33_THEN_IF_NOT_temp_sum__ETC___d363[22:1],
	       IF_IF_temp_sum_21_BIT_49_33_THEN_IF_NOT_temp_s_ETC__q11[0] } ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_2 =
	     { x__h37720,
	       IF_temp_sum_21_BIT_48_22_THEN_IF_NOT_temp_sum__ETC___d484[22:1],
	       IF_IF_temp_sum_21_BIT_48_22_THEN_IF_NOT_temp_s_ETC__q10[0] } ;
  assign MUX_fp_a_write_1__VAL_2 =
	     { fp_a[31], x_exponent__h4767, fp_a[22:0] } ;
  assign MUX_fp_a_write_1__VAL_3 = { get_A_a, 16'b0 } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_2 = temp_A - temp_B ;
  assign MUX_temp_sum_write_1__VAL_3 = temp_A + temp_B ;
  assign MUX_temp_sum_write_1__VAL_4 = { temp_sum[48:0], 1'd0 } ;

  // register add_done
  assign add_done_D_IN = 1'd0 ;
  assign add_done_EN = WILL_FIRE_RL_assemble_answer ;

  // register add_prep_done
  assign add_prep_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign add_prep_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  always@(WILL_FIRE_RL_round_add or
	  MUX_add_res_with_adj_exp_write_1__VAL_1 or
	  WILL_FIRE_RL_round_sub or
	  MUX_add_res_with_adj_exp_write_1__VAL_2 or
	  WILL_FIRE_RL_assemble_answer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_round_add:
	  add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_1;
      WILL_FIRE_RL_round_sub:
	  add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_2;
      WILL_FIRE_RL_assemble_answer: add_res_with_adj_exp_D_IN = 31'd0;
      default: add_res_with_adj_exp_D_IN =
		   31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_assemble_answer ;

  // register adj_done
  assign adj_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign adj_done_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_assemble_answer ;

  // register adj_sub
  assign adj_sub_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign adj_sub_EN = WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_sub ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_swap_operands_if_needed ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_swap_operands_if_needed ||
	     WILL_FIRE_RL_assemble_answer ;

  // register do_add
  assign do_add_D_IN = !WILL_FIRE_RL_assemble_answer && !WILL_FIRE_RL_add ;
  assign do_add_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ||
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_add ;

  // register do_sub
  assign do_sub_D_IN = !WILL_FIRE_RL_assemble_answer && !WILL_FIRE_RL_sub ;
  assign do_sub_EN =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ||
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_sub ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h3967 ^ y__h3968,
	       x__h3781 ^ y__h3782,
	       fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 } ;
  assign expdiff_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign expdiff_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  always@(MUX_fp_a_write_1__SEL_1 or
	  fp_b or
	  MUX_fp_a_write_1__SEL_2 or
	  MUX_fp_a_write_1__VAL_2 or EN_get_A or MUX_fp_a_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fp_a_write_1__SEL_1: fp_a_D_IN = fp_b;
      MUX_fp_a_write_1__SEL_2: fp_a_D_IN = MUX_fp_a_write_1__VAL_2;
      EN_get_A: fp_a_D_IN = MUX_fp_a_write_1__VAL_3;
      default: fp_a_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     EN_get_A ;

  // register fp_b
  assign fp_b_D_IN = MUX_fp_a_write_1__SEL_1 ? fp_a : get_B_b ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     EN_get_B ;

  // register fp_c
  assign fp_c_D_IN = { sign_c, add_res_with_adj_exp } ;
  assign fp_c_EN = WILL_FIRE_RL_assemble_answer ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_A_EN = WILL_FIRE_RL_assemble_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_B_EN = WILL_FIRE_RL_assemble_answer || EN_get_B ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign operands_swapped_if_needed_EN =
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_swap_operands_if_needed ;

  // register round_addition_result
  assign round_addition_result_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_addition_result_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_subtraction_result_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_assemble_answer ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = CAN_FIRE_RL_add_prep ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_add_prep ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN = WILL_FIRE_RL_add_prep || WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  always@(WILL_FIRE_RL_assemble_answer or
	  WILL_FIRE_RL_sub or
	  MUX_temp_sum_write_1__VAL_2 or
	  WILL_FIRE_RL_add or
	  MUX_temp_sum_write_1__VAL_3 or
	  MUX_fp_a_write_1__SEL_2 or MUX_temp_sum_write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_assemble_answer: temp_sum_D_IN = 50'd0;
    WILL_FIRE_RL_sub: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_2;
    WILL_FIRE_RL_add: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_3;
    MUX_fp_a_write_1__SEL_2: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_4;
    default: temp_sum_D_IN =
		 50'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign temp_sum_EN =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_add ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_assemble_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_21_BIT_48_22_THEN_IF_NOT_temp_s_ETC__q10 =
	     IF_temp_sum_21_BIT_48_22_THEN_IF_NOT_temp_sum__ETC___d484[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_IF_temp_sum_21_BIT_49_33_THEN_IF_NOT_temp_s_ETC__q11 =
	     IF_temp_sum_21_BIT_49_33_THEN_IF_NOT_temp_sum__ETC___d363[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5 =
	     (~temp_sum[23]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_INV_x_exponent767_BIT_0_THEN_1_ELSE_0__q7 =
	     (~x_exponent__h4767[0]) ? 8'd1 : 8'd0 ;
  assign IF_NOT_temp_sum_21_BIT_23_72_73_OR_temp_sum_21_ETC___d483 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       temp_sum[46:24] :
	       (temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d401 ?
		  x__h32372 :
		  x__h32395) ;
  assign IF_NOT_temp_sum_21_BIT_24_28_29_OR_temp_sum_21_ETC___d362 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_21_BIT_49_33_XOR_temp_sum_21_BIT_48_2_ETC___d257 ?
		  x__h37651 :
		  x__h37674) ;
  assign IF_NOT_temp_sum_21_BIT_25_34_35_OR_temp_sum_21_ETC___d311 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_21_BIT_49_33_AND_temp_sum_21_BIT_48_2_ETC___d205 ?
		  x__h10889 :
		  x__h10912) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_sum_21_BIT_48_22_THEN_IF_NOT_temp_sum__ETC___d484 =
	     temp_sum[48] ?
	       IF_NOT_temp_sum_21_BIT_24_28_29_OR_temp_sum_21_ETC___d362 :
	       IF_NOT_temp_sum_21_BIT_23_72_73_OR_temp_sum_21_ETC___d483 ;
  assign IF_temp_sum_21_BIT_49_33_THEN_IF_NOT_temp_sum__ETC___d363 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_21_BIT_25_34_35_OR_temp_sum_21_ETC___d311 :
	       IF_NOT_temp_sum_21_BIT_24_28_29_OR_temp_sum_21_ETC___d362 ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign _theResult___snd__h16165 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d148,
	       x__h18874,
	       x__h18688,
	       x__h18502,
	       x__h18316,
	       x__h18130,
	       x__h18004,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd__h32369 =
	     { x_exponent__h4767[7] ^ y__h39069,
	       x_exponent__h4767[6] ^ y__h38880,
	       fp_a_BITS_30_TO_23_MINUS_0b1_24_BIT_5_04_XOR_f_ETC___d428 } ;
  assign _theResult___snd_fst__h16240 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h16165 :
	       (temp_sum_21_BIT_49_33_AND_temp_sum_21_BIT_48_2_ETC___d205 ?
		  fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d225 :
		  _theResult___snd__h16165) ;
  assign _theResult___snd_fst__h19239 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h19247 ;
  assign _theResult___snd_fst__h19247 =
	     temp_sum_21_BIT_49_33_XOR_temp_sum_21_BIT_48_2_ETC___d257 ?
	       _theResult___snd__h16165 :
	       fp_a[30:23] ;
  assign _theResult___snd_fst__h37723 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       x_exponent__h4767 :
	       _theResult___snd_fst__h37731 ;
  assign _theResult___snd_fst__h37731 =
	     temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d401 ?
	       _theResult___snd__h32369 :
	       x_exponent__h4767 ;
  assign fp_a_BITS_30_TO_23_MINUS_0b1_24_BIT_5_04_XOR_f_ETC___d428 =
	     { x_exponent__h4767[5] ^ y__h38691,
	       x_exponent__h4767[4] ^ y__h38502,
	       x_exponent__h4767[3] ^ y__h38313,
	       x_exponent__h4767[2] ^ y__h38124,
	       x_exponent__h4767[1] ^ x_exponent__h4767[0],
	       IF_INV_x_exponent767_BIT_0_THEN_1_ELSE_0__q7[0] } ;
  assign fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 =
	     fp_a[30:23] < fp_b[30:23] ||
	     fp_a[30:23] == fp_b[30:23] && fp_a[22:0] < fp_b[22:0] ;
  assign fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 =
	     { x__h2910 ^ y__h2911,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9[0] } ;
  assign fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 =
	     { x__h3223 ^ y__h3224,
	       x__h3037 ^ y__h3038,
	       fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 } ;
  assign fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d223 =
	     { x__h18316 ^ y__h18317,
	       x__h18130 ^ y__h18131,
	       x__h18004 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8[0] } ;
  assign fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 =
	     { x__h3595 ^ y__h3596,
	       x__h3409 ^ y__h3410,
	       fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 } ;
  assign fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d224 =
	     { x__h18688 ^ y__h18689,
	       x__h18502 ^ y__h18503,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d223 } ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d148 =
	     fp_a[30] ^ y__h17564 ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d225 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d148 ^
	       y__h19061,
	       x__h18874 ^ y__h18875,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d224 } ;
  assign fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 = fp_a[31] == fp_b[31] ;
  assign got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 =
	     got_A && got_B && operands_swapped_if_needed &&
	     expdiff_calculated ;
  assign temp_sum_21_BIT_24_28_XOR_temp_sum_21_BIT_23_72___d456 =
	     temp_sum[24] ^ temp_sum[23] ;
  assign temp_sum_21_BIT_25_34_XOR_temp_sum_21_BIT_24_2_ETC___d455 =
	     temp_sum[25] ^ y__h28098 ;
  assign temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_34___d335 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_3_ETC___d454 =
	     temp_sum[26] ^ y__h28284 ;
  assign temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_38___d284 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d334 =
	     temp_sum[27] ^ y__h33377 ;
  assign temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d453 =
	     temp_sum[27] ^ y__h28470 ;
  assign temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d472 =
	     { temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d453,
	       temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_3_ETC___d454,
	       temp_sum_21_BIT_25_34_XOR_temp_sum_21_BIT_24_2_ETC___d455,
	       temp_sum_21_BIT_24_28_XOR_temp_sum_21_BIT_23_72___d456,
	       IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5[0] } ;
  assign temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d283 =
	     temp_sum[28] ^ y__h6615 ;
  assign temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d333 =
	     temp_sum[28] ^ y__h33563 ;
  assign temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d452 =
	     temp_sum[28] ^ y__h28656 ;
  assign temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d282 =
	     temp_sum[29] ^ y__h6801 ;
  assign temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d332 =
	     temp_sum[29] ^ y__h33749 ;
  assign temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d351 =
	     { temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d332,
	       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d333,
	       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d334,
	       temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_34___d335,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4[0] } ;
  assign temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d451 =
	     temp_sum[29] ^ y__h28842 ;
  assign temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d281 =
	     temp_sum[30] ^ y__h6987 ;
  assign temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d300 =
	     { temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d281,
	       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d282,
	       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d283,
	       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_38___d284,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d331 =
	     temp_sum[30] ^ y__h33935 ;
  assign temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d450 =
	     temp_sum[30] ^ y__h29028 ;
  assign temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d280 =
	     temp_sum[31] ^ y__h7173 ;
  assign temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d330 =
	     temp_sum[31] ^ y__h34121 ;
  assign temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d449 =
	     temp_sum[31] ^ y__h29214 ;
  assign temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d279 =
	     temp_sum[32] ^ y__h7359 ;
  assign temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d329 =
	     temp_sum[32] ^ y__h34307 ;
  assign temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d448 =
	     temp_sum[32] ^ y__h29400 ;
  assign temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d278 =
	     temp_sum[33] ^ y__h7545 ;
  assign temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d328 =
	     temp_sum[33] ^ y__h34493 ;
  assign temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d447 =
	     temp_sum[33] ^ y__h29586 ;
  assign temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d277 =
	     temp_sum[34] ^ y__h7731 ;
  assign temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d327 =
	     temp_sum[34] ^ y__h34679 ;
  assign temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d446 =
	     temp_sum[34] ^ y__h29772 ;
  assign temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d276 =
	     temp_sum[35] ^ y__h7917 ;
  assign temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d326 =
	     temp_sum[35] ^ y__h34865 ;
  assign temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d445 =
	     temp_sum[35] ^ y__h29958 ;
  assign temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d275 =
	     temp_sum[36] ^ y__h8103 ;
  assign temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d325 =
	     temp_sum[36] ^ y__h35051 ;
  assign temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d444 =
	     temp_sum[36] ^ y__h30144 ;
  assign temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d274 =
	     temp_sum[37] ^ y__h8289 ;
  assign temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d324 =
	     temp_sum[37] ^ y__h35237 ;
  assign temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d443 =
	     temp_sum[37] ^ y__h30330 ;
  assign temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d273 =
	     temp_sum[38] ^ y__h8475 ;
  assign temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d323 =
	     temp_sum[38] ^ y__h35423 ;
  assign temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d442 =
	     temp_sum[38] ^ y__h30516 ;
  assign temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d272 =
	     temp_sum[39] ^ y__h8661 ;
  assign temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d322 =
	     temp_sum[39] ^ y__h35609 ;
  assign temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d441 =
	     temp_sum[39] ^ y__h30702 ;
  assign temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d271 =
	     temp_sum[40] ^ y__h8847 ;
  assign temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d321 =
	     temp_sum[40] ^ y__h35795 ;
  assign temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d440 =
	     temp_sum[40] ^ y__h30888 ;
  assign temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d270 =
	     temp_sum[41] ^ y__h9033 ;
  assign temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d320 =
	     temp_sum[41] ^ y__h35981 ;
  assign temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d439 =
	     temp_sum[41] ^ y__h31074 ;
  assign temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d269 =
	     temp_sum[42] ^ y__h9219 ;
  assign temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d319 =
	     temp_sum[42] ^ y__h36167 ;
  assign temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d438 =
	     temp_sum[42] ^ y__h31260 ;
  assign temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d268 =
	     temp_sum[43] ^ y__h9405 ;
  assign temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d318 =
	     temp_sum[43] ^ y__h36353 ;
  assign temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d437 =
	     temp_sum[43] ^ y__h31446 ;
  assign temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d267 =
	     temp_sum[44] ^ y__h9591 ;
  assign temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d317 =
	     temp_sum[44] ^ y__h36539 ;
  assign temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d436 =
	     temp_sum[44] ^ y__h31632 ;
  assign temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d266 =
	     temp_sum[45] ^ y__h9777 ;
  assign temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d316 =
	     temp_sum[45] ^ y__h36725 ;
  assign temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d435 =
	     temp_sum[45] ^ y__h31818 ;
  assign temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d265 =
	     temp_sum[46] ^ y__h9963 ;
  assign temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d315 =
	     temp_sum[46] ^ y__h36911 ;
  assign temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d264 =
	     temp_sum[47] ^ y__h10149 ;
  assign temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d314 =
	     temp_sum[47] ^ y__h37097 ;
  assign temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d401 =
	     temp_sum[47] ^ y__h32190 ;
  assign temp_sum_21_BIT_48_22_XOR_temp_sum_21_BIT_47_6_ETC___d263 =
	     temp_sum[48] ^ y__h10335 ;
  assign temp_sum_21_BIT_49_33_AND_temp_sum_21_BIT_48_2_ETC___d205 =
	     temp_sum[49] & y__h10521 ;
  assign temp_sum_21_BIT_49_33_XOR_temp_sum_21_BIT_48_2_ETC___d257 =
	     temp_sum[49] ^ y__h37469 ;
  assign x__h10889 =
	     { temp_sum[49] ^ y__h10521,
	       temp_sum_21_BIT_48_22_XOR_temp_sum_21_BIT_47_6_ETC___d263,
	       temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d264,
	       temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d265,
	       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d266,
	       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d267,
	       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d268,
	       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d269,
	       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d270,
	       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d271,
	       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d272,
	       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d273,
	       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d274,
	       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d275,
	       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d276,
	       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d277,
	       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d278,
	       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d279,
	       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d280,
	       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d281,
	       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d282,
	       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d283,
	       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_38___d284 } ;
  assign x__h10912 =
	     { temp_sum_21_BIT_48_22_XOR_temp_sum_21_BIT_47_6_ETC___d263,
	       temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d264,
	       temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d265,
	       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d266,
	       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d267,
	       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d268,
	       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d269,
	       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d270,
	       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d271,
	       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d272,
	       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d273,
	       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d274,
	       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d275,
	       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d276,
	       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d277,
	       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d278,
	       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d279,
	       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d280,
	       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d300 } ;
  assign x__h16237 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h16240 :
	       _theResult___snd_fst__h19239 ;
  assign x__h18004 = fp_a[24] ^ fp_a[23] ;
  assign x__h18130 = fp_a[25] ^ y__h16634 ;
  assign x__h18316 = fp_a[26] ^ y__h16820 ;
  assign x__h18502 = fp_a[27] ^ y__h17006 ;
  assign x__h18688 = fp_a[28] ^ y__h17192 ;
  assign x__h18874 = fp_a[29] ^ y__h17378 ;
  assign x__h2910 = fp_a[24] ^ y__h2913 ;
  assign x__h3037 = fp_a[25] ^ y__h3040 ;
  assign x__h3094 = fp_a[24] & y__h2913 ;
  assign x__h3223 = fp_a[26] ^ y__h3226 ;
  assign x__h32372 =
	     { temp_sum[46] ^ y__h32004,
	       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d435,
	       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d436,
	       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d437,
	       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d438,
	       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d439,
	       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d440,
	       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d441,
	       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d442,
	       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d443,
	       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d444,
	       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d445,
	       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d446,
	       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d447,
	       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d448,
	       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d449,
	       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d450,
	       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d451,
	       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d452,
	       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d453,
	       temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_3_ETC___d454,
	       temp_sum_21_BIT_25_34_XOR_temp_sum_21_BIT_24_2_ETC___d455,
	       temp_sum_21_BIT_24_28_XOR_temp_sum_21_BIT_23_72___d456 } ;
  assign x__h32395 =
	     { temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d435,
	       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d436,
	       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d437,
	       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d438,
	       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d439,
	       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d440,
	       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d441,
	       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d442,
	       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d443,
	       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d444,
	       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d445,
	       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d446,
	       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d447,
	       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d448,
	       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d449,
	       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d450,
	       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d451,
	       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d452,
	       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d472 } ;
  assign x__h3280 = fp_a[25] & y__h3040 ;
  assign x__h3409 = fp_a[27] ^ y__h3412 ;
  assign x__h3466 = fp_a[26] & y__h3226 ;
  assign x__h3595 = fp_a[28] ^ y__h3598 ;
  assign x__h3652 = fp_a[27] & y__h3412 ;
  assign x__h37651 =
	     { temp_sum[48] ^ y__h37283,
	       temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d314,
	       temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d315,
	       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d316,
	       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d317,
	       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d318,
	       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d319,
	       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d320,
	       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d321,
	       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d322,
	       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d323,
	       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d324,
	       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d325,
	       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d326,
	       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d327,
	       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d328,
	       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d329,
	       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d330,
	       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d331,
	       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d332,
	       temp_sum_21_BIT_28_81_XOR_temp_sum_21_BIT_27_8_ETC___d333,
	       temp_sum_21_BIT_27_82_XOR_temp_sum_21_BIT_26_3_ETC___d334,
	       temp_sum_21_BIT_26_38_XOR_temp_sum_21_BIT_25_34___d335 } ;
  assign x__h37674 =
	     { temp_sum_21_BIT_47_62_XOR_temp_sum_21_BIT_46_6_ETC___d314,
	       temp_sum_21_BIT_46_63_XOR_temp_sum_21_BIT_45_6_ETC___d315,
	       temp_sum_21_BIT_45_64_XOR_temp_sum_21_BIT_44_6_ETC___d316,
	       temp_sum_21_BIT_44_65_XOR_temp_sum_21_BIT_43_6_ETC___d317,
	       temp_sum_21_BIT_43_66_XOR_temp_sum_21_BIT_42_6_ETC___d318,
	       temp_sum_21_BIT_42_67_XOR_temp_sum_21_BIT_41_6_ETC___d319,
	       temp_sum_21_BIT_41_68_XOR_temp_sum_21_BIT_40_6_ETC___d320,
	       temp_sum_21_BIT_40_69_XOR_temp_sum_21_BIT_39_7_ETC___d321,
	       temp_sum_21_BIT_39_70_XOR_temp_sum_21_BIT_38_7_ETC___d322,
	       temp_sum_21_BIT_38_71_XOR_temp_sum_21_BIT_37_7_ETC___d323,
	       temp_sum_21_BIT_37_72_XOR_temp_sum_21_BIT_36_7_ETC___d324,
	       temp_sum_21_BIT_36_73_XOR_temp_sum_21_BIT_35_7_ETC___d325,
	       temp_sum_21_BIT_35_74_XOR_temp_sum_21_BIT_34_7_ETC___d326,
	       temp_sum_21_BIT_34_75_XOR_temp_sum_21_BIT_33_7_ETC___d327,
	       temp_sum_21_BIT_33_76_XOR_temp_sum_21_BIT_32_7_ETC___d328,
	       temp_sum_21_BIT_32_77_XOR_temp_sum_21_BIT_31_7_ETC___d329,
	       temp_sum_21_BIT_31_78_XOR_temp_sum_21_BIT_30_7_ETC___d330,
	       temp_sum_21_BIT_30_79_XOR_temp_sum_21_BIT_29_8_ETC___d331,
	       temp_sum_21_BIT_29_80_XOR_temp_sum_21_BIT_28_8_ETC___d351 } ;
  assign x__h37720 =
	     temp_sum[48] ?
	       _theResult___snd_fst__h19239 :
	       _theResult___snd_fst__h37723 ;
  assign x__h3781 = fp_a[29] ^ y__h3784 ;
  assign x__h3838 = fp_a[28] & y__h3598 ;
  assign x__h3967 = fp_a[30] ^ y__h3970 ;
  assign x__h4024 = fp_a[29] & y__h3784 ;
  assign x_exponent__h4767 = fp_a[30:23] - 8'b00000001 ;
  assign y__h10149 = temp_sum[46] & y__h9963 ;
  assign y__h10335 = temp_sum[47] & y__h10149 ;
  assign y__h10521 = temp_sum[48] & y__h10335 ;
  assign y__h16634 = fp_a[24] & fp_a[23] ;
  assign y__h16820 = fp_a[25] & y__h16634 ;
  assign y__h17006 = fp_a[26] & y__h16820 ;
  assign y__h17192 = fp_a[27] & y__h17006 ;
  assign y__h17378 = fp_a[28] & y__h17192 ;
  assign y__h1753 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h17564 = fp_a[29] & y__h17378 ;
  assign y__h18131 = x__h18004 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h18317 = x__h18130 & y__h18131 ;
  assign y__h18503 = x__h18316 & y__h18317 ;
  assign y__h18689 = x__h18502 & y__h18503 ;
  assign y__h18875 = x__h18688 & y__h18689 ;
  assign y__h19061 = x__h18874 & y__h18875 ;
  assign y__h1942 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h1753 ;
  assign y__h2131 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h1942 ;
  assign y__h2320 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h2131 ;
  assign y__h2509 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h2320 ;
  assign y__h2698 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h2509 ;
  assign y__h28098 = temp_sum[24] & temp_sum[23] ;
  assign y__h28284 = temp_sum[25] & y__h28098 ;
  assign y__h28470 = temp_sum[26] & y__h28284 ;
  assign y__h28656 = temp_sum[27] & y__h28470 ;
  assign y__h28842 = temp_sum[28] & y__h28656 ;
  assign y__h29028 = temp_sum[29] & y__h28842 ;
  assign y__h2911 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h2913 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h29214 = temp_sum[30] & y__h29028 ;
  assign y__h29400 = temp_sum[31] & y__h29214 ;
  assign y__h29586 = temp_sum[32] & y__h29400 ;
  assign y__h29772 = temp_sum[33] & y__h29586 ;
  assign y__h29958 = temp_sum[34] & y__h29772 ;
  assign y__h30144 = temp_sum[35] & y__h29958 ;
  assign y__h30330 = temp_sum[36] & y__h30144 ;
  assign y__h3038 = x__h3094 | y__h3095 ;
  assign y__h3040 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h1753 ;
  assign y__h30516 = temp_sum[37] & y__h30330 ;
  assign y__h30702 = temp_sum[38] & y__h30516 ;
  assign y__h30888 = temp_sum[39] & y__h30702 ;
  assign y__h3095 = x__h2910 & y__h2911 ;
  assign y__h31074 = temp_sum[40] & y__h30888 ;
  assign y__h31260 = temp_sum[41] & y__h31074 ;
  assign y__h31446 = temp_sum[42] & y__h31260 ;
  assign y__h31632 = temp_sum[43] & y__h31446 ;
  assign y__h31818 = temp_sum[44] & y__h31632 ;
  assign y__h32004 = temp_sum[45] & y__h31818 ;
  assign y__h32190 = temp_sum[46] & y__h32004 ;
  assign y__h3224 = x__h3280 | y__h3281 ;
  assign y__h3226 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h1942 ;
  assign y__h3281 = x__h3037 & y__h3038 ;
  assign y__h33377 = temp_sum[26] & temp_sum[25] ;
  assign y__h33563 = temp_sum[27] & y__h33377 ;
  assign y__h33749 = temp_sum[28] & y__h33563 ;
  assign y__h33935 = temp_sum[29] & y__h33749 ;
  assign y__h3410 = x__h3466 | y__h3467 ;
  assign y__h3412 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h2131 ;
  assign y__h34121 = temp_sum[30] & y__h33935 ;
  assign y__h34307 = temp_sum[31] & y__h34121 ;
  assign y__h34493 = temp_sum[32] & y__h34307 ;
  assign y__h3467 = x__h3223 & y__h3224 ;
  assign y__h34679 = temp_sum[33] & y__h34493 ;
  assign y__h34865 = temp_sum[34] & y__h34679 ;
  assign y__h35051 = temp_sum[35] & y__h34865 ;
  assign y__h35237 = temp_sum[36] & y__h35051 ;
  assign y__h35423 = temp_sum[37] & y__h35237 ;
  assign y__h35609 = temp_sum[38] & y__h35423 ;
  assign y__h35795 = temp_sum[39] & y__h35609 ;
  assign y__h3596 = x__h3652 | y__h3653 ;
  assign y__h3598 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h2320 ;
  assign y__h35981 = temp_sum[40] & y__h35795 ;
  assign y__h36167 = temp_sum[41] & y__h35981 ;
  assign y__h36353 = temp_sum[42] & y__h36167 ;
  assign y__h3653 = x__h3409 & y__h3410 ;
  assign y__h36539 = temp_sum[43] & y__h36353 ;
  assign y__h36725 = temp_sum[44] & y__h36539 ;
  assign y__h36911 = temp_sum[45] & y__h36725 ;
  assign y__h37097 = temp_sum[46] & y__h36911 ;
  assign y__h37283 = temp_sum[47] & y__h37097 ;
  assign y__h37469 = temp_sum[48] & y__h37283 ;
  assign y__h3782 = x__h3838 | y__h3839 ;
  assign y__h3784 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h2509 ;
  assign y__h38124 = x_exponent__h4767[1] & x_exponent__h4767[0] ;
  assign y__h38313 = x_exponent__h4767[2] & y__h38124 ;
  assign y__h3839 = x__h3595 & y__h3596 ;
  assign y__h38502 = x_exponent__h4767[3] & y__h38313 ;
  assign y__h38691 = x_exponent__h4767[4] & y__h38502 ;
  assign y__h38880 = x_exponent__h4767[5] & y__h38691 ;
  assign y__h39069 = x_exponent__h4767[6] & y__h38880 ;
  assign y__h3968 = x__h4024 | y__h4025 ;
  assign y__h3970 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h2698 ;
  assign y__h4025 = x__h3781 & y__h3782 ;
  assign y__h6615 = temp_sum[27] & temp_sum[26] ;
  assign y__h6801 = temp_sum[28] & y__h6615 ;
  assign y__h6987 = temp_sum[29] & y__h6801 ;
  assign y__h7173 = temp_sum[30] & y__h6987 ;
  assign y__h7359 = temp_sum[31] & y__h7173 ;
  assign y__h7545 = temp_sum[32] & y__h7359 ;
  assign y__h7731 = temp_sum[33] & y__h7545 ;
  assign y__h7917 = temp_sum[34] & y__h7731 ;
  assign y__h8103 = temp_sum[35] & y__h7917 ;
  assign y__h8289 = temp_sum[36] & y__h8103 ;
  assign y__h8475 = temp_sum[37] & y__h8289 ;
  assign y__h8661 = temp_sum[38] & y__h8475 ;
  assign y__h8847 = temp_sum[39] & y__h8661 ;
  assign y__h9033 = temp_sum[40] & y__h8847 ;
  assign y__h9219 = temp_sum[41] & y__h9033 ;
  assign y__h9405 = temp_sum[42] & y__h9219 ;
  assign y__h9591 = temp_sum[43] & y__h9405 ;
  assign y__h9777 = temp_sum[44] & y__h9591 ;
  assign y__h9963 = temp_sum[45] & y__h9777 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	adj_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adj_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_add <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (adj_done_EN) adj_done <= `BSV_ASSIGNMENT_DELAY adj_done_D_IN;
	if (adj_sub_EN) adj_sub <= `BSV_ASSIGNMENT_DELAY adj_sub_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (do_add_EN) do_add <= `BSV_ASSIGNMENT_DELAY do_add_D_IN;
	if (do_sub_EN) do_sub <= `BSV_ASSIGNMENT_DELAY do_sub_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    adj_done = 1'h0;
    adj_sub = 1'h0;
    assembled_answer = 1'h0;
    do_add = 1'h0;
    do_sub = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    operands_swapped_if_needed = 1'h0;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

