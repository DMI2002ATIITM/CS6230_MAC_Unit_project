//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri Oct 25 23:48:22 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  reg [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register adj_done
  reg adj_done;
  wire adj_done_D_IN, adj_done_EN;

  // register adj_sub
  reg adj_sub;
  wire adj_sub_D_IN, adj_sub_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register do_add
  reg do_add;
  wire do_add_D_IN, do_add_EN;

  // register do_sub
  reg do_sub;
  wire do_sub_D_IN, do_sub_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  reg [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  wire [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  reg [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_adjust_subres,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_round_sub,
       CAN_FIRE_RL_sub,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_adjust_subres,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_round_sub,
       WILL_FIRE_RL_sub,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_3,
		MUX_temp_sum_write_1__VAL_4;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2, MUX_fp_a_write_1__VAL_3;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_1,
		MUX_add_res_with_adj_exp_write_1__VAL_2;
  wire MUX_fp_a_write_1__SEL_1, MUX_fp_a_write_1__SEL_2;

  // remaining internal signals
  wire [49 : 0] IF_temp_A_BIT_0_XOR_INV_temp_B_02_85_PLUS_1_86_ETC__q11,
		IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10,
		INV_temp_B_02_85_PLUS_1___d486;
  wire [47 : 0] temp_A_11_BIT_47_19_XOR_INV_temp_B_02_85_PLUS__ETC___d806,
		temp_A_11_BIT_47_19_XOR_temp_B_02_BIT_47_20_22_ETC___d481;
  wire [45 : 0] temp_A_11_BIT_45_27_XOR_INV_temp_B_02_85_PLUS__ETC___d805,
		temp_A_11_BIT_45_27_XOR_temp_B_02_BIT_45_28_30_ETC___d480;
  wire [43 : 0] temp_A_11_BIT_43_35_XOR_INV_temp_B_02_85_PLUS__ETC___d804,
		temp_A_11_BIT_43_35_XOR_temp_B_02_BIT_43_36_38_ETC___d479;
  wire [41 : 0] temp_A_11_BIT_41_43_XOR_INV_temp_B_02_85_PLUS__ETC___d803,
		temp_A_11_BIT_41_43_XOR_temp_B_02_BIT_41_44_46_ETC___d478;
  wire [39 : 0] temp_A_11_BIT_39_51_XOR_INV_temp_B_02_85_PLUS__ETC___d802,
		temp_A_11_BIT_39_51_XOR_temp_B_02_BIT_39_52_54_ETC___d477;
  wire [37 : 0] temp_A_11_BIT_37_59_XOR_INV_temp_B_02_85_PLUS__ETC___d801,
		temp_A_11_BIT_37_59_XOR_temp_B_02_BIT_37_60_62_ETC___d476;
  wire [35 : 0] temp_A_11_BIT_35_67_XOR_INV_temp_B_02_85_PLUS__ETC___d800,
		temp_A_11_BIT_35_67_XOR_temp_B_02_BIT_35_68_70_ETC___d475;
  wire [33 : 0] temp_A_11_BIT_33_75_XOR_INV_temp_B_02_85_PLUS__ETC___d799,
		temp_A_11_BIT_33_75_XOR_temp_B_02_BIT_33_76_78_ETC___d474;
  wire [31 : 0] temp_A_11_BIT_31_83_XOR_INV_temp_B_02_85_PLUS__ETC___d798,
		temp_A_11_BIT_31_83_XOR_temp_B_02_BIT_31_84_86_ETC___d473;
  wire [30 : 0] IF_IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_s_ETC__q12,
		IF_IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_s_ETC__q13;
  wire [29 : 0] temp_A_11_BIT_29_91_XOR_INV_temp_B_02_85_PLUS__ETC___d797,
		temp_A_11_BIT_29_91_XOR_temp_B_02_BIT_29_92_94_ETC___d472;
  wire [27 : 0] temp_A_11_BIT_27_99_XOR_INV_temp_B_02_85_PLUS__ETC___d796,
		temp_A_11_BIT_27_99_XOR_temp_B_02_BIT_27_00_02_ETC___d471;
  wire [25 : 0] temp_A_11_BIT_25_07_XOR_INV_temp_B_02_85_PLUS__ETC___d795,
		temp_A_11_BIT_25_07_XOR_temp_B_02_BIT_25_08_10_ETC___d470;
  wire [24 : 0] IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5,
		IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [23 : 0] temp_A_11_BIT_23_15_XOR_INV_temp_B_02_85_PLUS__ETC___d794,
		temp_A_11_BIT_23_15_XOR_temp_B_02_BIT_23_16_18_ETC___d469;
  wire [22 : 0] IF_NOT_temp_sum_13_BIT_23_093_094_OR_temp_sum__ETC___d1205,
		IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083,
		IF_NOT_temp_sum_13_BIT_25_58_59_OR_temp_sum_13_ETC___d1032,
		IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206,
		IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084,
		x__h33489,
		x__h33512,
		x__h54972,
		x__h54995,
		x__h60251,
		x__h60274;
  wire [21 : 0] temp_A_11_BIT_21_23_XOR_INV_temp_B_02_85_PLUS__ETC___d793,
		temp_A_11_BIT_21_23_XOR_temp_B_02_BIT_21_24_26_ETC___d468;
  wire [19 : 0] temp_A_11_BIT_19_31_XOR_INV_temp_B_02_85_PLUS__ETC___d792,
		temp_A_11_BIT_19_31_XOR_temp_B_02_BIT_19_32_34_ETC___d467;
  wire [17 : 0] temp_A_11_BIT_17_39_XOR_INV_temp_B_02_85_PLUS__ETC___d791,
		temp_A_11_BIT_17_39_XOR_temp_B_02_BIT_17_40_42_ETC___d466;
  wire [15 : 0] temp_A_11_BIT_15_47_XOR_INV_temp_B_02_85_PLUS__ETC___d790,
		temp_A_11_BIT_15_47_XOR_temp_B_02_BIT_15_48_50_ETC___d465;
  wire [13 : 0] temp_A_11_BIT_13_55_XOR_INV_temp_B_02_85_PLUS__ETC___d789,
		temp_A_11_BIT_13_55_XOR_temp_B_02_BIT_13_56_58_ETC___d464;
  wire [11 : 0] temp_A_11_BIT_11_63_XOR_INV_temp_B_02_85_PLUS__ETC___d788,
		temp_A_11_BIT_11_63_XOR_temp_B_02_BIT_11_64_66_ETC___d463;
  wire [9 : 0] temp_A_11_BIT_9_71_XOR_INV_temp_B_02_85_PLUS_1_ETC___d787,
	       temp_A_11_BIT_9_71_XOR_temp_B_02_BIT_9_72_74_X_ETC___d462;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_exp___19735_BIT_0_THEN_1_ELSE_0__q7,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h38765,
	       _theResult___snd__h54969,
	       _theResult___snd_fst__h38840,
	       _theResult___snd_fst__h41839,
	       _theResult___snd_fst__h41847,
	       _theResult___snd_fst__h60323,
	       _theResult___snd_fst__h60331,
	       exp___1__h49735,
	       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d946,
	       temp_A_11_BIT_7_79_XOR_INV_temp_B_02_85_PLUS_1_ETC___d786,
	       temp_A_11_BIT_7_79_XOR_temp_B_02_BIT_7_80_82_X_ETC___d461,
	       x__h38837,
	       x__h60320,
	       x_exponent__h25873;
  wire [5 : 0] INV_fp_a_BIT_28_6_18_XOR_fp_a_BIT_27_0_OR_INV__ETC___d847,
	       fp_a_BITS_30_TO_23_MINUS_0b1_099_BIT_5_126_XOR_ETC___d1150,
	       fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d945,
	       temp_A_11_BIT_5_87_XOR_INV_temp_B_02_85_PLUS_1_ETC___d785,
	       temp_A_11_BIT_5_87_XOR_temp_B_02_BIT_5_88_90_X_ETC___d460;
  wire [4 : 0] temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1194,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1072,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1021;
  wire [3 : 0] INV_fp_a_BIT_26_4_20_XOR_fp_a_BIT_25_8_OR_INV__ETC___d846,
	       fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d944,
	       temp_A_11_BIT_3_95_XOR_INV_temp_B_02_85_PLUS_1_ETC___d784,
	       temp_A_11_BIT_3_95_XOR_temp_B_02_BIT_3_96_98_X_ETC___d459;
  wire [1 : 0] fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93,
	       temp_A_11_BIT_1_03_XOR_INV_temp_B_02_85_PLUS_1_ETC___d783,
	       temp_A_11_BIT_1_03_XOR_temp_B_02_BIT_1_04_06_X_ETC___d458;
  wire fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17,
       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872,
       fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106,
       got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97,
       temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178,
       temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177,
       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056,
       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176,
       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005,
       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055,
       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175,
       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004,
       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054,
       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174,
       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003,
       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053,
       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173,
       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002,
       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052,
       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172,
       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001,
       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051,
       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171,
       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000,
       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050,
       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170,
       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049,
       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169,
       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999,
       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048,
       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168,
       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998,
       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047,
       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167,
       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997,
       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046,
       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166,
       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996,
       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045,
       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165,
       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995,
       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044,
       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164,
       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994,
       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043,
       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163,
       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993,
       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042,
       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162,
       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992,
       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041,
       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161,
       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991,
       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040,
       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160,
       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990,
       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039,
       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159,
       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989,
       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038,
       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158,
       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988,
       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037,
       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157,
       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987,
       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036,
       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986,
       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035,
       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123,
       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985,
       temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984,
       temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926,
       temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978,
       x__h10135,
       x__h10182,
       x__h10327,
       x__h10374,
       x__h10519,
       x__h10566,
       x__h10711,
       x__h10758,
       x__h10903,
       x__h10950,
       x__h11095,
       x__h11142,
       x__h11287,
       x__h11334,
       x__h11479,
       x__h11526,
       x__h11671,
       x__h11718,
       x__h11863,
       x__h11910,
       x__h12055,
       x__h12102,
       x__h12247,
       x__h12294,
       x__h12439,
       x__h12486,
       x__h12631,
       x__h12678,
       x__h12823,
       x__h12870,
       x__h13015,
       x__h13062,
       x__h13207,
       x__h13254,
       x__h13399,
       x__h13446,
       x__h13591,
       x__h13638,
       x__h13783,
       x__h13830,
       x__h13975,
       x__h14022,
       x__h14167,
       x__h14214,
       x__h14359,
       x__h14406,
       x__h14551,
       x__h14598,
       x__h14743,
       x__h14790,
       x__h14876,
       x__h14935,
       x__h14982,
       x__h16394,
       x__h16523,
       x__h16582,
       x__h16715,
       x__h16774,
       x__h16907,
       x__h16966,
       x__h17099,
       x__h17158,
       x__h17291,
       x__h17350,
       x__h17483,
       x__h17542,
       x__h17675,
       x__h17734,
       x__h17867,
       x__h17926,
       x__h18059,
       x__h18118,
       x__h18251,
       x__h18310,
       x__h18443,
       x__h18502,
       x__h18635,
       x__h18694,
       x__h18827,
       x__h18886,
       x__h19019,
       x__h19078,
       x__h19211,
       x__h19270,
       x__h19403,
       x__h19462,
       x__h19595,
       x__h19654,
       x__h19787,
       x__h19846,
       x__h19979,
       x__h20038,
       x__h20171,
       x__h20230,
       x__h20363,
       x__h20422,
       x__h20555,
       x__h20614,
       x__h20747,
       x__h20806,
       x__h20939,
       x__h20998,
       x__h21131,
       x__h21190,
       x__h21323,
       x__h21382,
       x__h21515,
       x__h21574,
       x__h21707,
       x__h21766,
       x__h21899,
       x__h21958,
       x__h22091,
       x__h22150,
       x__h22283,
       x__h22342,
       x__h22475,
       x__h22534,
       x__h22667,
       x__h22726,
       x__h22859,
       x__h22918,
       x__h23051,
       x__h23110,
       x__h23243,
       x__h23302,
       x__h23435,
       x__h23494,
       x__h23627,
       x__h23686,
       x__h23819,
       x__h23878,
       x__h24011,
       x__h24070,
       x__h24203,
       x__h24262,
       x__h24395,
       x__h24454,
       x__h24587,
       x__h24646,
       x__h24779,
       x__h24838,
       x__h24971,
       x__h25030,
       x__h25163,
       x__h25222,
       x__h25355,
       x__h25414,
       x__h25547,
       x__h25606,
       x__h26138,
       x__h26265,
       x__h26453,
       x__h26641,
       x__h26829,
       x__h27017,
       x__h27205,
       x__h2909,
       x__h3036,
       x__h3093,
       x__h3222,
       x__h3279,
       x__h3408,
       x__h3465,
       x__h3594,
       x__h3651,
       x__h3780,
       x__h3837,
       x__h3966,
       x__h4023,
       x__h40604,
       x__h40730,
       x__h40916,
       x__h41102,
       x__h41288,
       x__h41474,
       x__h5911,
       x__h5958,
       x__h6103,
       x__h6150,
       x__h6295,
       x__h6342,
       x__h6487,
       x__h6534,
       x__h6679,
       x__h6726,
       x__h6871,
       x__h6918,
       x__h7063,
       x__h7110,
       x__h7255,
       x__h7302,
       x__h7447,
       x__h7494,
       x__h7639,
       x__h7686,
       x__h7831,
       x__h7878,
       x__h8023,
       x__h8070,
       x__h8215,
       x__h8262,
       x__h8407,
       x__h8454,
       x__h8599,
       x__h8646,
       x__h8791,
       x__h8838,
       x__h8983,
       x__h9030,
       x__h9175,
       x__h9222,
       x__h9367,
       x__h9414,
       x__h9559,
       x__h9606,
       x__h9751,
       x__h9798,
       x__h9943,
       x__h9990,
       y__h10077,
       y__h10136,
       y__h10269,
       y__h10328,
       y__h10461,
       y__h10520,
       y__h10653,
       y__h10712,
       y__h10845,
       y__h10904,
       y__h11037,
       y__h11096,
       y__h11229,
       y__h11288,
       y__h11421,
       y__h11480,
       y__h11613,
       y__h11672,
       y__h11805,
       y__h11864,
       y__h11997,
       y__h12056,
       y__h12189,
       y__h12248,
       y__h12381,
       y__h12440,
       y__h12573,
       y__h12632,
       y__h12765,
       y__h12824,
       y__h12957,
       y__h13016,
       y__h13149,
       y__h13208,
       y__h13341,
       y__h13400,
       y__h13533,
       y__h13592,
       y__h13725,
       y__h13784,
       y__h13917,
       y__h13976,
       y__h14109,
       y__h14168,
       y__h14301,
       y__h14360,
       y__h14493,
       y__h14552,
       y__h14685,
       y__h14744,
       y__h14877,
       y__h14936,
       y__h16395,
       y__h16524,
       y__h16583,
       y__h16716,
       y__h16775,
       y__h16908,
       y__h16967,
       y__h17100,
       y__h17159,
       y__h17292,
       y__h17351,
       y__h17484,
       y__h1752,
       y__h17543,
       y__h17676,
       y__h17735,
       y__h17868,
       y__h17927,
       y__h18060,
       y__h18119,
       y__h18252,
       y__h18311,
       y__h18444,
       y__h18503,
       y__h18636,
       y__h18695,
       y__h18828,
       y__h18887,
       y__h19020,
       y__h19079,
       y__h19212,
       y__h19271,
       y__h19404,
       y__h1941,
       y__h19463,
       y__h19596,
       y__h19655,
       y__h19788,
       y__h19847,
       y__h19980,
       y__h20039,
       y__h20172,
       y__h20231,
       y__h20364,
       y__h20423,
       y__h20556,
       y__h20615,
       y__h20748,
       y__h20807,
       y__h20940,
       y__h20999,
       y__h21132,
       y__h21191,
       y__h2130,
       y__h21324,
       y__h21383,
       y__h21516,
       y__h21575,
       y__h21708,
       y__h21767,
       y__h21900,
       y__h21959,
       y__h22092,
       y__h22151,
       y__h22284,
       y__h22343,
       y__h22476,
       y__h22535,
       y__h22668,
       y__h22727,
       y__h22860,
       y__h22919,
       y__h23052,
       y__h23111,
       y__h2319,
       y__h23244,
       y__h23303,
       y__h23436,
       y__h23495,
       y__h23628,
       y__h23687,
       y__h23820,
       y__h23879,
       y__h24012,
       y__h24071,
       y__h24204,
       y__h24263,
       y__h24396,
       y__h24455,
       y__h24588,
       y__h24647,
       y__h24780,
       y__h24839,
       y__h24972,
       y__h25031,
       y__h2508,
       y__h25164,
       y__h25223,
       y__h25356,
       y__h25415,
       y__h25548,
       y__h25607,
       y__h26266,
       y__h26324,
       y__h26454,
       y__h26512,
       y__h26642,
       y__h26700,
       y__h26830,
       y__h26888,
       y__h2697,
       y__h27018,
       y__h27076,
       y__h27206,
       y__h27264,
       y__h2910,
       y__h2912,
       y__h29215,
       y__h29401,
       y__h29587,
       y__h29773,
       y__h29959,
       y__h30145,
       y__h30331,
       y__h3037,
       y__h3039,
       y__h30517,
       y__h30703,
       y__h30889,
       y__h3094,
       y__h31075,
       y__h31261,
       y__h31447,
       y__h31633,
       y__h31819,
       y__h32005,
       y__h32191,
       y__h3223,
       y__h3225,
       y__h32377,
       y__h32563,
       y__h32749,
       y__h3280,
       y__h32935,
       y__h33121,
       y__h3409,
       y__h3411,
       y__h3466,
       y__h3595,
       y__h3597,
       y__h3652,
       y__h3781,
       y__h3783,
       y__h3838,
       y__h39234,
       y__h39420,
       y__h39606,
       y__h3967,
       y__h3969,
       y__h39792,
       y__h39978,
       y__h40164,
       y__h4024,
       y__h40731,
       y__h40917,
       y__h41103,
       y__h41289,
       y__h41475,
       y__h41661,
       y__h50698,
       y__h50884,
       y__h51070,
       y__h51256,
       y__h51442,
       y__h51628,
       y__h51814,
       y__h52000,
       y__h52186,
       y__h52372,
       y__h52558,
       y__h52744,
       y__h52930,
       y__h53116,
       y__h53302,
       y__h53488,
       y__h53674,
       y__h53860,
       y__h54046,
       y__h54232,
       y__h54418,
       y__h54604,
       y__h54790,
       y__h55977,
       y__h56163,
       y__h56349,
       y__h56535,
       y__h56721,
       y__h56907,
       y__h57093,
       y__h57279,
       y__h57465,
       y__h57651,
       y__h57837,
       y__h58023,
       y__h58209,
       y__h58395,
       y__h5853,
       y__h58581,
       y__h58767,
       y__h58953,
       y__h5912,
       y__h59139,
       y__h59325,
       y__h59511,
       y__h5959,
       y__h59697,
       y__h59883,
       y__h60069,
       y__h6045,
       y__h60724,
       y__h60913,
       y__h6104,
       y__h61102,
       y__h61291,
       y__h61480,
       y__h61669,
       y__h6237,
       y__h6296,
       y__h6429,
       y__h6488,
       y__h6621,
       y__h6680,
       y__h6813,
       y__h6872,
       y__h7005,
       y__h7064,
       y__h7197,
       y__h7256,
       y__h7389,
       y__h7448,
       y__h7581,
       y__h7640,
       y__h7773,
       y__h7832,
       y__h7965,
       y__h8024,
       y__h8157,
       y__h8216,
       y__h8349,
       y__h8408,
       y__h8541,
       y__h8600,
       y__h8733,
       y__h8792,
       y__h8925,
       y__h8984,
       y__h9117,
       y__h9176,
       y__h9309,
       y__h9368,
       y__h9501,
       y__h9560,
       y__h9693,
       y__h9752,
       y__h9885,
       y__h9944;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = assembled_answer ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     got_A && got_B && !operands_swapped_if_needed ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff =
	     got_A && got_B && operands_swapped_if_needed &&
	     !expdiff_calculated ;
  assign WILL_FIRE_RL_calculate_expdiff = CAN_FIRE_RL_calculate_expdiff ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     !add_prep_done ;
  assign WILL_FIRE_RL_add_prep = CAN_FIRE_RL_add_prep ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_addition_result &&
	     !round_done ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_round_sub
  assign CAN_FIRE_RL_round_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_subtraction_result &&
	     !round_done ;
  assign WILL_FIRE_RL_round_sub =
	     CAN_FIRE_RL_round_sub && !WILL_FIRE_RL_round_add ;

  // rule RL_adjust_subres
  assign CAN_FIRE_RL_adjust_subres =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     adj_sub &&
	     !adj_done ;
  assign WILL_FIRE_RL_adjust_subres = CAN_FIRE_RL_adjust_subres ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     do_add ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_sub
  assign CAN_FIRE_RL_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     do_sub ;
  assign WILL_FIRE_RL_sub = CAN_FIRE_RL_sub ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_done &&
	     !assembled_answer ;
  assign WILL_FIRE_RL_assemble_answer =
	     CAN_FIRE_RL_assemble_answer && !WILL_FIRE_RL_add_prep ;

  // inputs to muxes for submodule ports
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ;
  assign MUX_fp_a_write_1__SEL_2 =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_1 =
	     { x__h38837,
	       IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084[22:1],
	       IF_IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_s_ETC__q13[0] } ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_2 =
	     { x__h60320,
	       IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206[22:1],
	       IF_IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_s_ETC__q12[0] } ;
  assign MUX_fp_a_write_1__VAL_2 =
	     { fp_a[31], x_exponent__h25873, fp_a[22:0] } ;
  assign MUX_fp_a_write_1__VAL_3 = { get_A_a, 16'b0 } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_2 =
	     { x__h25547 ^ y__h25548,
	       x__h25355 ^ y__h25356,
	       temp_A_11_BIT_47_19_XOR_INV_temp_B_02_85_PLUS__ETC___d806 } ;
  assign MUX_temp_sum_write_1__VAL_3 =
	     { x__h14876 ^ y__h14877,
	       x__h14982 ^ y__h14685,
	       temp_A_11_BIT_47_19_XOR_temp_B_02_BIT_47_20_22_ETC___d481 } ;
  assign MUX_temp_sum_write_1__VAL_4 = { temp_sum[48:0], 1'd0 } ;

  // register add_done
  assign add_done_D_IN = 1'd0 ;
  assign add_done_EN = WILL_FIRE_RL_assemble_answer ;

  // register add_prep_done
  assign add_prep_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign add_prep_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  always@(WILL_FIRE_RL_round_add or
	  MUX_add_res_with_adj_exp_write_1__VAL_1 or
	  WILL_FIRE_RL_round_sub or
	  MUX_add_res_with_adj_exp_write_1__VAL_2 or
	  WILL_FIRE_RL_assemble_answer)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_round_add:
	  add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_1;
      WILL_FIRE_RL_round_sub:
	  add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_2;
      WILL_FIRE_RL_assemble_answer: add_res_with_adj_exp_D_IN = 31'd0;
      default: add_res_with_adj_exp_D_IN =
		   31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_assemble_answer ;

  // register adj_done
  assign adj_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign adj_done_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_assemble_answer ;

  // register adj_sub
  assign adj_sub_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign adj_sub_EN = WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_sub ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_swap_operands_if_needed ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_swap_operands_if_needed ||
	     WILL_FIRE_RL_assemble_answer ;

  // register do_add
  assign do_add_D_IN = !WILL_FIRE_RL_assemble_answer && !WILL_FIRE_RL_add ;
  assign do_add_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ||
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_add ;

  // register do_sub
  assign do_sub_D_IN = !WILL_FIRE_RL_assemble_answer && !WILL_FIRE_RL_sub ;
  assign do_sub_EN =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ||
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_sub ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h3966 ^ y__h3967,
	       x__h3780 ^ y__h3781,
	       fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 } ;
  assign expdiff_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign expdiff_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  always@(MUX_fp_a_write_1__SEL_1 or
	  fp_b or
	  MUX_fp_a_write_1__SEL_2 or
	  MUX_fp_a_write_1__VAL_2 or EN_get_A or MUX_fp_a_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fp_a_write_1__SEL_1: fp_a_D_IN = fp_b;
      MUX_fp_a_write_1__SEL_2: fp_a_D_IN = MUX_fp_a_write_1__VAL_2;
      EN_get_A: fp_a_D_IN = MUX_fp_a_write_1__VAL_3;
      default: fp_a_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     EN_get_A ;

  // register fp_b
  assign fp_b_D_IN = MUX_fp_a_write_1__SEL_1 ? fp_a : get_B_b ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     EN_get_B ;

  // register fp_c
  assign fp_c_D_IN = { sign_c, add_res_with_adj_exp } ;
  assign fp_c_EN = WILL_FIRE_RL_assemble_answer ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_A_EN = WILL_FIRE_RL_assemble_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_B_EN = WILL_FIRE_RL_assemble_answer || EN_get_B ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign operands_swapped_if_needed_EN =
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_swap_operands_if_needed ;

  // register round_addition_result
  assign round_addition_result_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_addition_result_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_subtraction_result_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_assemble_answer ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = CAN_FIRE_RL_add_prep ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_add_prep ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN = WILL_FIRE_RL_add_prep || WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  always@(WILL_FIRE_RL_assemble_answer or
	  WILL_FIRE_RL_sub or
	  MUX_temp_sum_write_1__VAL_2 or
	  WILL_FIRE_RL_add or
	  MUX_temp_sum_write_1__VAL_3 or
	  MUX_fp_a_write_1__SEL_2 or MUX_temp_sum_write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_assemble_answer: temp_sum_D_IN = 50'd0;
    WILL_FIRE_RL_sub: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_2;
    WILL_FIRE_RL_add: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_3;
    MUX_fp_a_write_1__SEL_2: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_4;
    default: temp_sum_D_IN =
		 50'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign temp_sum_EN =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_add ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_assemble_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_s_ETC__q12 =
	     IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_s_ETC__q13 =
	     IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_exp___19735_BIT_0_THEN_1_ELSE_0__q7 =
	     (~exp___1__h49735[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5 =
	     (~temp_sum[23]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_NOT_temp_sum_13_BIT_23_093_094_OR_temp_sum__ETC___d1205 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       temp_sum[46:24] :
	       (temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123 ?
		  x__h54972 :
		  x__h54995) ;
  assign IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978 ?
		  x__h60251 :
		  x__h60274) ;
  assign IF_NOT_temp_sum_13_BIT_25_58_59_OR_temp_sum_13_ETC___d1032 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926 ?
		  x__h33489 :
		  x__h33512) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_A_BIT_0_XOR_INV_temp_B_02_85_PLUS_1_86_ETC__q11 =
	     (temp_A[0] ^ INV_temp_B_02_85_PLUS_1___d486[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10 =
	     (temp_A[0] ^ temp_B[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206 =
	     temp_sum[48] ?
	       IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083 :
	       IF_NOT_temp_sum_13_BIT_23_093_094_OR_temp_sum__ETC___d1205 ;
  assign IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_13_BIT_25_58_59_OR_temp_sum_13_ETC___d1032 :
	       IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083 ;
  assign INV_fp_a_BIT_26_4_20_XOR_fp_a_BIT_25_8_OR_INV__ETC___d846 =
	     { x__h26453 ^ y__h26454,
	       x__h26265 ^ y__h26266,
	       x__h26138 ^ fp_a[23],
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign INV_fp_a_BIT_28_6_18_XOR_fp_a_BIT_27_0_OR_INV__ETC___d847 =
	     { x__h26829 ^ y__h26830,
	       x__h26641 ^ y__h26642,
	       INV_fp_a_BIT_26_4_20_XOR_fp_a_BIT_25_8_OR_INV__ETC___d846 } ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign INV_temp_B_02_85_PLUS_1___d486 = ~temp_B + 50'd1 ;
  assign _theResult___snd__h38765 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872,
	       x__h41474,
	       x__h41288,
	       x__h41102,
	       x__h40916,
	       x__h40730,
	       x__h40604,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd__h54969 =
	     { exp___1__h49735[7] ^ y__h61669,
	       exp___1__h49735[6] ^ y__h61480,
	       fp_a_BITS_30_TO_23_MINUS_0b1_099_BIT_5_126_XOR_ETC___d1150 } ;
  assign _theResult___snd_fst__h38840 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h38765 :
	       (temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926 ?
		  fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d946 :
		  _theResult___snd__h38765) ;
  assign _theResult___snd_fst__h41839 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h41847 ;
  assign _theResult___snd_fst__h41847 =
	     temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978 ?
	       _theResult___snd__h38765 :
	       fp_a[30:23] ;
  assign _theResult___snd_fst__h60323 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       exp___1__h49735 :
	       _theResult___snd_fst__h60331 ;
  assign _theResult___snd_fst__h60331 =
	     temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123 ?
	       _theResult___snd__h54969 :
	       exp___1__h49735 ;
  assign exp___1__h49735 = fp_a[30:23] - 8'b00000001 ;
  assign fp_a_BITS_30_TO_23_MINUS_0b1_099_BIT_5_126_XOR_ETC___d1150 =
	     { exp___1__h49735[5] ^ y__h61291,
	       exp___1__h49735[4] ^ y__h61102,
	       exp___1__h49735[3] ^ y__h60913,
	       exp___1__h49735[2] ^ y__h60724,
	       exp___1__h49735[1] ^ exp___1__h49735[0],
	       IF_INV_exp___19735_BIT_0_THEN_1_ELSE_0__q7[0] } ;
  assign fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 =
	     fp_a[30:23] < fp_b[30:23] ||
	     fp_a[30:23] == fp_b[30:23] && fp_a[22:0] < fp_b[22:0] ;
  assign fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 =
	     { x__h2909 ^ y__h2910,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9[0] } ;
  assign fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 =
	     { x__h3222 ^ y__h3223,
	       x__h3036 ^ y__h3037,
	       fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 } ;
  assign fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d944 =
	     { x__h40916 ^ y__h40917,
	       x__h40730 ^ y__h40731,
	       x__h40604 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8[0] } ;
  assign fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 =
	     { x__h3594 ^ y__h3595,
	       x__h3408 ^ y__h3409,
	       fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 } ;
  assign fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d945 =
	     { x__h41288 ^ y__h41289,
	       x__h41102 ^ y__h41103,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d944 } ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872 =
	     fp_a[30] ^ y__h40164 ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d946 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872 ^
	       y__h41661,
	       x__h41474 ^ y__h41475,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d945 } ;
  assign fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 = fp_a[31] == fp_b[31] ;
  assign got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 =
	     got_A && got_B && operands_swapped_if_needed &&
	     expdiff_calculated ;
  assign temp_A_11_BIT_11_63_XOR_INV_temp_B_02_85_PLUS__ETC___d788 =
	     { x__h18251 ^ y__h18252,
	       x__h18059 ^ y__h18060,
	       temp_A_11_BIT_9_71_XOR_INV_temp_B_02_85_PLUS_1_ETC___d787 } ;
  assign temp_A_11_BIT_11_63_XOR_temp_B_02_BIT_11_64_66_ETC___d463 =
	     { x__h7878 ^ y__h7581,
	       x__h7686 ^ y__h7389,
	       temp_A_11_BIT_9_71_XOR_temp_B_02_BIT_9_72_74_X_ETC___d462 } ;
  assign temp_A_11_BIT_13_55_XOR_INV_temp_B_02_85_PLUS__ETC___d789 =
	     { x__h18635 ^ y__h18636,
	       x__h18443 ^ y__h18444,
	       temp_A_11_BIT_11_63_XOR_INV_temp_B_02_85_PLUS__ETC___d788 } ;
  assign temp_A_11_BIT_13_55_XOR_temp_B_02_BIT_13_56_58_ETC___d464 =
	     { x__h8262 ^ y__h7965,
	       x__h8070 ^ y__h7773,
	       temp_A_11_BIT_11_63_XOR_temp_B_02_BIT_11_64_66_ETC___d463 } ;
  assign temp_A_11_BIT_15_47_XOR_INV_temp_B_02_85_PLUS__ETC___d790 =
	     { x__h19019 ^ y__h19020,
	       x__h18827 ^ y__h18828,
	       temp_A_11_BIT_13_55_XOR_INV_temp_B_02_85_PLUS__ETC___d789 } ;
  assign temp_A_11_BIT_15_47_XOR_temp_B_02_BIT_15_48_50_ETC___d465 =
	     { x__h8646 ^ y__h8349,
	       x__h8454 ^ y__h8157,
	       temp_A_11_BIT_13_55_XOR_temp_B_02_BIT_13_56_58_ETC___d464 } ;
  assign temp_A_11_BIT_17_39_XOR_INV_temp_B_02_85_PLUS__ETC___d791 =
	     { x__h19403 ^ y__h19404,
	       x__h19211 ^ y__h19212,
	       temp_A_11_BIT_15_47_XOR_INV_temp_B_02_85_PLUS__ETC___d790 } ;
  assign temp_A_11_BIT_17_39_XOR_temp_B_02_BIT_17_40_42_ETC___d466 =
	     { x__h9030 ^ y__h8733,
	       x__h8838 ^ y__h8541,
	       temp_A_11_BIT_15_47_XOR_temp_B_02_BIT_15_48_50_ETC___d465 } ;
  assign temp_A_11_BIT_19_31_XOR_INV_temp_B_02_85_PLUS__ETC___d792 =
	     { x__h19787 ^ y__h19788,
	       x__h19595 ^ y__h19596,
	       temp_A_11_BIT_17_39_XOR_INV_temp_B_02_85_PLUS__ETC___d791 } ;
  assign temp_A_11_BIT_19_31_XOR_temp_B_02_BIT_19_32_34_ETC___d467 =
	     { x__h9414 ^ y__h9117,
	       x__h9222 ^ y__h8925,
	       temp_A_11_BIT_17_39_XOR_temp_B_02_BIT_17_40_42_ETC___d466 } ;
  assign temp_A_11_BIT_1_03_XOR_INV_temp_B_02_85_PLUS_1_ETC___d783 =
	     { x__h16394 ^ y__h16395,
	       IF_temp_A_BIT_0_XOR_INV_temp_B_02_85_PLUS_1_86_ETC__q11[0] } ;
  assign temp_A_11_BIT_1_03_XOR_temp_B_02_BIT_1_04_06_X_ETC___d458 =
	     { x__h5958 ^ y__h5959,
	       IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10[0] } ;
  assign temp_A_11_BIT_21_23_XOR_INV_temp_B_02_85_PLUS__ETC___d793 =
	     { x__h20171 ^ y__h20172,
	       x__h19979 ^ y__h19980,
	       temp_A_11_BIT_19_31_XOR_INV_temp_B_02_85_PLUS__ETC___d792 } ;
  assign temp_A_11_BIT_21_23_XOR_temp_B_02_BIT_21_24_26_ETC___d468 =
	     { x__h9798 ^ y__h9501,
	       x__h9606 ^ y__h9309,
	       temp_A_11_BIT_19_31_XOR_temp_B_02_BIT_19_32_34_ETC___d467 } ;
  assign temp_A_11_BIT_23_15_XOR_INV_temp_B_02_85_PLUS__ETC___d794 =
	     { x__h20555 ^ y__h20556,
	       x__h20363 ^ y__h20364,
	       temp_A_11_BIT_21_23_XOR_INV_temp_B_02_85_PLUS__ETC___d793 } ;
  assign temp_A_11_BIT_23_15_XOR_temp_B_02_BIT_23_16_18_ETC___d469 =
	     { x__h10182 ^ y__h9885,
	       x__h9990 ^ y__h9693,
	       temp_A_11_BIT_21_23_XOR_temp_B_02_BIT_21_24_26_ETC___d468 } ;
  assign temp_A_11_BIT_25_07_XOR_INV_temp_B_02_85_PLUS__ETC___d795 =
	     { x__h20939 ^ y__h20940,
	       x__h20747 ^ y__h20748,
	       temp_A_11_BIT_23_15_XOR_INV_temp_B_02_85_PLUS__ETC___d794 } ;
  assign temp_A_11_BIT_25_07_XOR_temp_B_02_BIT_25_08_10_ETC___d470 =
	     { x__h10566 ^ y__h10269,
	       x__h10374 ^ y__h10077,
	       temp_A_11_BIT_23_15_XOR_temp_B_02_BIT_23_16_18_ETC___d469 } ;
  assign temp_A_11_BIT_27_99_XOR_INV_temp_B_02_85_PLUS__ETC___d796 =
	     { x__h21323 ^ y__h21324,
	       x__h21131 ^ y__h21132,
	       temp_A_11_BIT_25_07_XOR_INV_temp_B_02_85_PLUS__ETC___d795 } ;
  assign temp_A_11_BIT_27_99_XOR_temp_B_02_BIT_27_00_02_ETC___d471 =
	     { x__h10950 ^ y__h10653,
	       x__h10758 ^ y__h10461,
	       temp_A_11_BIT_25_07_XOR_temp_B_02_BIT_25_08_10_ETC___d470 } ;
  assign temp_A_11_BIT_29_91_XOR_INV_temp_B_02_85_PLUS__ETC___d797 =
	     { x__h21707 ^ y__h21708,
	       x__h21515 ^ y__h21516,
	       temp_A_11_BIT_27_99_XOR_INV_temp_B_02_85_PLUS__ETC___d796 } ;
  assign temp_A_11_BIT_29_91_XOR_temp_B_02_BIT_29_92_94_ETC___d472 =
	     { x__h11334 ^ y__h11037,
	       x__h11142 ^ y__h10845,
	       temp_A_11_BIT_27_99_XOR_temp_B_02_BIT_27_00_02_ETC___d471 } ;
  assign temp_A_11_BIT_31_83_XOR_INV_temp_B_02_85_PLUS__ETC___d798 =
	     { x__h22091 ^ y__h22092,
	       x__h21899 ^ y__h21900,
	       temp_A_11_BIT_29_91_XOR_INV_temp_B_02_85_PLUS__ETC___d797 } ;
  assign temp_A_11_BIT_31_83_XOR_temp_B_02_BIT_31_84_86_ETC___d473 =
	     { x__h11718 ^ y__h11421,
	       x__h11526 ^ y__h11229,
	       temp_A_11_BIT_29_91_XOR_temp_B_02_BIT_29_92_94_ETC___d472 } ;
  assign temp_A_11_BIT_33_75_XOR_INV_temp_B_02_85_PLUS__ETC___d799 =
	     { x__h22475 ^ y__h22476,
	       x__h22283 ^ y__h22284,
	       temp_A_11_BIT_31_83_XOR_INV_temp_B_02_85_PLUS__ETC___d798 } ;
  assign temp_A_11_BIT_33_75_XOR_temp_B_02_BIT_33_76_78_ETC___d474 =
	     { x__h12102 ^ y__h11805,
	       x__h11910 ^ y__h11613,
	       temp_A_11_BIT_31_83_XOR_temp_B_02_BIT_31_84_86_ETC___d473 } ;
  assign temp_A_11_BIT_35_67_XOR_INV_temp_B_02_85_PLUS__ETC___d800 =
	     { x__h22859 ^ y__h22860,
	       x__h22667 ^ y__h22668,
	       temp_A_11_BIT_33_75_XOR_INV_temp_B_02_85_PLUS__ETC___d799 } ;
  assign temp_A_11_BIT_35_67_XOR_temp_B_02_BIT_35_68_70_ETC___d475 =
	     { x__h12486 ^ y__h12189,
	       x__h12294 ^ y__h11997,
	       temp_A_11_BIT_33_75_XOR_temp_B_02_BIT_33_76_78_ETC___d474 } ;
  assign temp_A_11_BIT_37_59_XOR_INV_temp_B_02_85_PLUS__ETC___d801 =
	     { x__h23243 ^ y__h23244,
	       x__h23051 ^ y__h23052,
	       temp_A_11_BIT_35_67_XOR_INV_temp_B_02_85_PLUS__ETC___d800 } ;
  assign temp_A_11_BIT_37_59_XOR_temp_B_02_BIT_37_60_62_ETC___d476 =
	     { x__h12870 ^ y__h12573,
	       x__h12678 ^ y__h12381,
	       temp_A_11_BIT_35_67_XOR_temp_B_02_BIT_35_68_70_ETC___d475 } ;
  assign temp_A_11_BIT_39_51_XOR_INV_temp_B_02_85_PLUS__ETC___d802 =
	     { x__h23627 ^ y__h23628,
	       x__h23435 ^ y__h23436,
	       temp_A_11_BIT_37_59_XOR_INV_temp_B_02_85_PLUS__ETC___d801 } ;
  assign temp_A_11_BIT_39_51_XOR_temp_B_02_BIT_39_52_54_ETC___d477 =
	     { x__h13254 ^ y__h12957,
	       x__h13062 ^ y__h12765,
	       temp_A_11_BIT_37_59_XOR_temp_B_02_BIT_37_60_62_ETC___d476 } ;
  assign temp_A_11_BIT_3_95_XOR_INV_temp_B_02_85_PLUS_1_ETC___d784 =
	     { x__h16715 ^ y__h16716,
	       x__h16523 ^ y__h16524,
	       temp_A_11_BIT_1_03_XOR_INV_temp_B_02_85_PLUS_1_ETC___d783 } ;
  assign temp_A_11_BIT_3_95_XOR_temp_B_02_BIT_3_96_98_X_ETC___d459 =
	     { x__h6342 ^ y__h6045,
	       x__h6150 ^ y__h5853,
	       temp_A_11_BIT_1_03_XOR_temp_B_02_BIT_1_04_06_X_ETC___d458 } ;
  assign temp_A_11_BIT_41_43_XOR_INV_temp_B_02_85_PLUS__ETC___d803 =
	     { x__h24011 ^ y__h24012,
	       x__h23819 ^ y__h23820,
	       temp_A_11_BIT_39_51_XOR_INV_temp_B_02_85_PLUS__ETC___d802 } ;
  assign temp_A_11_BIT_41_43_XOR_temp_B_02_BIT_41_44_46_ETC___d478 =
	     { x__h13638 ^ y__h13341,
	       x__h13446 ^ y__h13149,
	       temp_A_11_BIT_39_51_XOR_temp_B_02_BIT_39_52_54_ETC___d477 } ;
  assign temp_A_11_BIT_43_35_XOR_INV_temp_B_02_85_PLUS__ETC___d804 =
	     { x__h24395 ^ y__h24396,
	       x__h24203 ^ y__h24204,
	       temp_A_11_BIT_41_43_XOR_INV_temp_B_02_85_PLUS__ETC___d803 } ;
  assign temp_A_11_BIT_43_35_XOR_temp_B_02_BIT_43_36_38_ETC___d479 =
	     { x__h14022 ^ y__h13725,
	       x__h13830 ^ y__h13533,
	       temp_A_11_BIT_41_43_XOR_temp_B_02_BIT_41_44_46_ETC___d478 } ;
  assign temp_A_11_BIT_45_27_XOR_INV_temp_B_02_85_PLUS__ETC___d805 =
	     { x__h24779 ^ y__h24780,
	       x__h24587 ^ y__h24588,
	       temp_A_11_BIT_43_35_XOR_INV_temp_B_02_85_PLUS__ETC___d804 } ;
  assign temp_A_11_BIT_45_27_XOR_temp_B_02_BIT_45_28_30_ETC___d480 =
	     { x__h14406 ^ y__h14109,
	       x__h14214 ^ y__h13917,
	       temp_A_11_BIT_43_35_XOR_temp_B_02_BIT_43_36_38_ETC___d479 } ;
  assign temp_A_11_BIT_47_19_XOR_INV_temp_B_02_85_PLUS__ETC___d806 =
	     { x__h25163 ^ y__h25164,
	       x__h24971 ^ y__h24972,
	       temp_A_11_BIT_45_27_XOR_INV_temp_B_02_85_PLUS__ETC___d805 } ;
  assign temp_A_11_BIT_47_19_XOR_temp_B_02_BIT_47_20_22_ETC___d481 =
	     { x__h14790 ^ y__h14493,
	       x__h14598 ^ y__h14301,
	       temp_A_11_BIT_45_27_XOR_temp_B_02_BIT_45_28_30_ETC___d480 } ;
  assign temp_A_11_BIT_5_87_XOR_INV_temp_B_02_85_PLUS_1_ETC___d785 =
	     { x__h17099 ^ y__h17100,
	       x__h16907 ^ y__h16908,
	       temp_A_11_BIT_3_95_XOR_INV_temp_B_02_85_PLUS_1_ETC___d784 } ;
  assign temp_A_11_BIT_5_87_XOR_temp_B_02_BIT_5_88_90_X_ETC___d460 =
	     { x__h6726 ^ y__h6429,
	       x__h6534 ^ y__h6237,
	       temp_A_11_BIT_3_95_XOR_temp_B_02_BIT_3_96_98_X_ETC___d459 } ;
  assign temp_A_11_BIT_7_79_XOR_INV_temp_B_02_85_PLUS_1_ETC___d786 =
	     { x__h17483 ^ y__h17484,
	       x__h17291 ^ y__h17292,
	       temp_A_11_BIT_5_87_XOR_INV_temp_B_02_85_PLUS_1_ETC___d785 } ;
  assign temp_A_11_BIT_7_79_XOR_temp_B_02_BIT_7_80_82_X_ETC___d461 =
	     { x__h7110 ^ y__h6813,
	       x__h6918 ^ y__h6621,
	       temp_A_11_BIT_5_87_XOR_temp_B_02_BIT_5_88_90_X_ETC___d460 } ;
  assign temp_A_11_BIT_9_71_XOR_INV_temp_B_02_85_PLUS_1_ETC___d787 =
	     { x__h17867 ^ y__h17868,
	       x__h17675 ^ y__h17676,
	       temp_A_11_BIT_7_79_XOR_INV_temp_B_02_85_PLUS_1_ETC___d786 } ;
  assign temp_A_11_BIT_9_71_XOR_temp_B_02_BIT_9_72_74_X_ETC___d462 =
	     { x__h7494 ^ y__h7197,
	       x__h7302 ^ y__h7005,
	       temp_A_11_BIT_7_79_XOR_temp_B_02_BIT_7_80_82_X_ETC___d461 } ;
  assign temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178 =
	     temp_sum[24] ^ temp_sum[23] ;
  assign temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177 =
	     temp_sum[25] ^ y__h50698 ;
  assign temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176 =
	     temp_sum[26] ^ y__h50884 ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055 =
	     temp_sum[27] ^ y__h55977 ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175 =
	     temp_sum[27] ^ y__h51070 ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1194 =
	     { temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176,
	       temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177,
	       temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178,
	       IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5[0] } ;
  assign temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004 =
	     temp_sum[28] ^ y__h29215 ;
  assign temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054 =
	     temp_sum[28] ^ y__h56163 ;
  assign temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174 =
	     temp_sum[28] ^ y__h51256 ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003 =
	     temp_sum[29] ^ y__h29401 ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053 =
	     temp_sum[29] ^ y__h56349 ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1072 =
	     { temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4[0] } ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173 =
	     temp_sum[29] ^ y__h51442 ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002 =
	     temp_sum[30] ^ y__h29587 ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1021 =
	     { temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052 =
	     temp_sum[30] ^ y__h56535 ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172 =
	     temp_sum[30] ^ y__h51628 ;
  assign temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001 =
	     temp_sum[31] ^ y__h29773 ;
  assign temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051 =
	     temp_sum[31] ^ y__h56721 ;
  assign temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171 =
	     temp_sum[31] ^ y__h51814 ;
  assign temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000 =
	     temp_sum[32] ^ y__h29959 ;
  assign temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050 =
	     temp_sum[32] ^ y__h56907 ;
  assign temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170 =
	     temp_sum[32] ^ y__h52000 ;
  assign temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049 =
	     temp_sum[33] ^ y__h57093 ;
  assign temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169 =
	     temp_sum[33] ^ y__h52186 ;
  assign temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999 =
	     temp_sum[33] ^ y__h30145 ;
  assign temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048 =
	     temp_sum[34] ^ y__h57279 ;
  assign temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168 =
	     temp_sum[34] ^ y__h52372 ;
  assign temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998 =
	     temp_sum[34] ^ y__h30331 ;
  assign temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047 =
	     temp_sum[35] ^ y__h57465 ;
  assign temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167 =
	     temp_sum[35] ^ y__h52558 ;
  assign temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997 =
	     temp_sum[35] ^ y__h30517 ;
  assign temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046 =
	     temp_sum[36] ^ y__h57651 ;
  assign temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166 =
	     temp_sum[36] ^ y__h52744 ;
  assign temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996 =
	     temp_sum[36] ^ y__h30703 ;
  assign temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045 =
	     temp_sum[37] ^ y__h57837 ;
  assign temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165 =
	     temp_sum[37] ^ y__h52930 ;
  assign temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995 =
	     temp_sum[37] ^ y__h30889 ;
  assign temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044 =
	     temp_sum[38] ^ y__h58023 ;
  assign temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164 =
	     temp_sum[38] ^ y__h53116 ;
  assign temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994 =
	     temp_sum[38] ^ y__h31075 ;
  assign temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043 =
	     temp_sum[39] ^ y__h58209 ;
  assign temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163 =
	     temp_sum[39] ^ y__h53302 ;
  assign temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993 =
	     temp_sum[39] ^ y__h31261 ;
  assign temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042 =
	     temp_sum[40] ^ y__h58395 ;
  assign temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162 =
	     temp_sum[40] ^ y__h53488 ;
  assign temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992 =
	     temp_sum[40] ^ y__h31447 ;
  assign temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041 =
	     temp_sum[41] ^ y__h58581 ;
  assign temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161 =
	     temp_sum[41] ^ y__h53674 ;
  assign temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991 =
	     temp_sum[41] ^ y__h31633 ;
  assign temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040 =
	     temp_sum[42] ^ y__h58767 ;
  assign temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160 =
	     temp_sum[42] ^ y__h53860 ;
  assign temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990 =
	     temp_sum[42] ^ y__h31819 ;
  assign temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039 =
	     temp_sum[43] ^ y__h58953 ;
  assign temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159 =
	     temp_sum[43] ^ y__h54046 ;
  assign temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989 =
	     temp_sum[43] ^ y__h32005 ;
  assign temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038 =
	     temp_sum[44] ^ y__h59139 ;
  assign temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158 =
	     temp_sum[44] ^ y__h54232 ;
  assign temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988 =
	     temp_sum[44] ^ y__h32191 ;
  assign temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037 =
	     temp_sum[45] ^ y__h59325 ;
  assign temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157 =
	     temp_sum[45] ^ y__h54418 ;
  assign temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987 =
	     temp_sum[45] ^ y__h32377 ;
  assign temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036 =
	     temp_sum[46] ^ y__h59511 ;
  assign temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986 =
	     temp_sum[46] ^ y__h32563 ;
  assign temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035 =
	     temp_sum[47] ^ y__h59697 ;
  assign temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123 =
	     temp_sum[47] ^ y__h54790 ;
  assign temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985 =
	     temp_sum[47] ^ y__h32749 ;
  assign temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984 =
	     temp_sum[48] ^ y__h32935 ;
  assign temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926 =
	     temp_sum[49] & y__h33121 ;
  assign temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978 =
	     temp_sum[49] ^ y__h60069 ;
  assign x__h10135 = temp_A[23] & temp_B[23] ;
  assign x__h10182 = temp_A[23] ^ temp_B[23] ;
  assign x__h10327 = temp_A[24] & temp_B[24] ;
  assign x__h10374 = temp_A[24] ^ temp_B[24] ;
  assign x__h10519 = temp_A[25] & temp_B[25] ;
  assign x__h10566 = temp_A[25] ^ temp_B[25] ;
  assign x__h10711 = temp_A[26] & temp_B[26] ;
  assign x__h10758 = temp_A[26] ^ temp_B[26] ;
  assign x__h10903 = temp_A[27] & temp_B[27] ;
  assign x__h10950 = temp_A[27] ^ temp_B[27] ;
  assign x__h11095 = temp_A[28] & temp_B[28] ;
  assign x__h11142 = temp_A[28] ^ temp_B[28] ;
  assign x__h11287 = temp_A[29] & temp_B[29] ;
  assign x__h11334 = temp_A[29] ^ temp_B[29] ;
  assign x__h11479 = temp_A[30] & temp_B[30] ;
  assign x__h11526 = temp_A[30] ^ temp_B[30] ;
  assign x__h11671 = temp_A[31] & temp_B[31] ;
  assign x__h11718 = temp_A[31] ^ temp_B[31] ;
  assign x__h11863 = temp_A[32] & temp_B[32] ;
  assign x__h11910 = temp_A[32] ^ temp_B[32] ;
  assign x__h12055 = temp_A[33] & temp_B[33] ;
  assign x__h12102 = temp_A[33] ^ temp_B[33] ;
  assign x__h12247 = temp_A[34] & temp_B[34] ;
  assign x__h12294 = temp_A[34] ^ temp_B[34] ;
  assign x__h12439 = temp_A[35] & temp_B[35] ;
  assign x__h12486 = temp_A[35] ^ temp_B[35] ;
  assign x__h12631 = temp_A[36] & temp_B[36] ;
  assign x__h12678 = temp_A[36] ^ temp_B[36] ;
  assign x__h12823 = temp_A[37] & temp_B[37] ;
  assign x__h12870 = temp_A[37] ^ temp_B[37] ;
  assign x__h13015 = temp_A[38] & temp_B[38] ;
  assign x__h13062 = temp_A[38] ^ temp_B[38] ;
  assign x__h13207 = temp_A[39] & temp_B[39] ;
  assign x__h13254 = temp_A[39] ^ temp_B[39] ;
  assign x__h13399 = temp_A[40] & temp_B[40] ;
  assign x__h13446 = temp_A[40] ^ temp_B[40] ;
  assign x__h13591 = temp_A[41] & temp_B[41] ;
  assign x__h13638 = temp_A[41] ^ temp_B[41] ;
  assign x__h13783 = temp_A[42] & temp_B[42] ;
  assign x__h13830 = temp_A[42] ^ temp_B[42] ;
  assign x__h13975 = temp_A[43] & temp_B[43] ;
  assign x__h14022 = temp_A[43] ^ temp_B[43] ;
  assign x__h14167 = temp_A[44] & temp_B[44] ;
  assign x__h14214 = temp_A[44] ^ temp_B[44] ;
  assign x__h14359 = temp_A[45] & temp_B[45] ;
  assign x__h14406 = temp_A[45] ^ temp_B[45] ;
  assign x__h14551 = temp_A[46] & temp_B[46] ;
  assign x__h14598 = temp_A[46] ^ temp_B[46] ;
  assign x__h14743 = temp_A[47] & temp_B[47] ;
  assign x__h14790 = temp_A[47] ^ temp_B[47] ;
  assign x__h14876 = temp_A[49] ^ temp_B[49] ;
  assign x__h14935 = temp_A[48] & temp_B[48] ;
  assign x__h14982 = temp_A[48] ^ temp_B[48] ;
  assign x__h16394 = temp_A[1] ^ INV_temp_B_02_85_PLUS_1___d486[1] ;
  assign x__h16523 = temp_A[2] ^ INV_temp_B_02_85_PLUS_1___d486[2] ;
  assign x__h16582 = temp_A[1] & INV_temp_B_02_85_PLUS_1___d486[1] ;
  assign x__h16715 = temp_A[3] ^ INV_temp_B_02_85_PLUS_1___d486[3] ;
  assign x__h16774 = temp_A[2] & INV_temp_B_02_85_PLUS_1___d486[2] ;
  assign x__h16907 = temp_A[4] ^ INV_temp_B_02_85_PLUS_1___d486[4] ;
  assign x__h16966 = temp_A[3] & INV_temp_B_02_85_PLUS_1___d486[3] ;
  assign x__h17099 = temp_A[5] ^ INV_temp_B_02_85_PLUS_1___d486[5] ;
  assign x__h17158 = temp_A[4] & INV_temp_B_02_85_PLUS_1___d486[4] ;
  assign x__h17291 = temp_A[6] ^ INV_temp_B_02_85_PLUS_1___d486[6] ;
  assign x__h17350 = temp_A[5] & INV_temp_B_02_85_PLUS_1___d486[5] ;
  assign x__h17483 = temp_A[7] ^ INV_temp_B_02_85_PLUS_1___d486[7] ;
  assign x__h17542 = temp_A[6] & INV_temp_B_02_85_PLUS_1___d486[6] ;
  assign x__h17675 = temp_A[8] ^ INV_temp_B_02_85_PLUS_1___d486[8] ;
  assign x__h17734 = temp_A[7] & INV_temp_B_02_85_PLUS_1___d486[7] ;
  assign x__h17867 = temp_A[9] ^ INV_temp_B_02_85_PLUS_1___d486[9] ;
  assign x__h17926 = temp_A[8] & INV_temp_B_02_85_PLUS_1___d486[8] ;
  assign x__h18059 = temp_A[10] ^ INV_temp_B_02_85_PLUS_1___d486[10] ;
  assign x__h18118 = temp_A[9] & INV_temp_B_02_85_PLUS_1___d486[9] ;
  assign x__h18251 = temp_A[11] ^ INV_temp_B_02_85_PLUS_1___d486[11] ;
  assign x__h18310 = temp_A[10] & INV_temp_B_02_85_PLUS_1___d486[10] ;
  assign x__h18443 = temp_A[12] ^ INV_temp_B_02_85_PLUS_1___d486[12] ;
  assign x__h18502 = temp_A[11] & INV_temp_B_02_85_PLUS_1___d486[11] ;
  assign x__h18635 = temp_A[13] ^ INV_temp_B_02_85_PLUS_1___d486[13] ;
  assign x__h18694 = temp_A[12] & INV_temp_B_02_85_PLUS_1___d486[12] ;
  assign x__h18827 = temp_A[14] ^ INV_temp_B_02_85_PLUS_1___d486[14] ;
  assign x__h18886 = temp_A[13] & INV_temp_B_02_85_PLUS_1___d486[13] ;
  assign x__h19019 = temp_A[15] ^ INV_temp_B_02_85_PLUS_1___d486[15] ;
  assign x__h19078 = temp_A[14] & INV_temp_B_02_85_PLUS_1___d486[14] ;
  assign x__h19211 = temp_A[16] ^ INV_temp_B_02_85_PLUS_1___d486[16] ;
  assign x__h19270 = temp_A[15] & INV_temp_B_02_85_PLUS_1___d486[15] ;
  assign x__h19403 = temp_A[17] ^ INV_temp_B_02_85_PLUS_1___d486[17] ;
  assign x__h19462 = temp_A[16] & INV_temp_B_02_85_PLUS_1___d486[16] ;
  assign x__h19595 = temp_A[18] ^ INV_temp_B_02_85_PLUS_1___d486[18] ;
  assign x__h19654 = temp_A[17] & INV_temp_B_02_85_PLUS_1___d486[17] ;
  assign x__h19787 = temp_A[19] ^ INV_temp_B_02_85_PLUS_1___d486[19] ;
  assign x__h19846 = temp_A[18] & INV_temp_B_02_85_PLUS_1___d486[18] ;
  assign x__h19979 = temp_A[20] ^ INV_temp_B_02_85_PLUS_1___d486[20] ;
  assign x__h20038 = temp_A[19] & INV_temp_B_02_85_PLUS_1___d486[19] ;
  assign x__h20171 = temp_A[21] ^ INV_temp_B_02_85_PLUS_1___d486[21] ;
  assign x__h20230 = temp_A[20] & INV_temp_B_02_85_PLUS_1___d486[20] ;
  assign x__h20363 = temp_A[22] ^ INV_temp_B_02_85_PLUS_1___d486[22] ;
  assign x__h20422 = temp_A[21] & INV_temp_B_02_85_PLUS_1___d486[21] ;
  assign x__h20555 = temp_A[23] ^ INV_temp_B_02_85_PLUS_1___d486[23] ;
  assign x__h20614 = temp_A[22] & INV_temp_B_02_85_PLUS_1___d486[22] ;
  assign x__h20747 = temp_A[24] ^ INV_temp_B_02_85_PLUS_1___d486[24] ;
  assign x__h20806 = temp_A[23] & INV_temp_B_02_85_PLUS_1___d486[23] ;
  assign x__h20939 = temp_A[25] ^ INV_temp_B_02_85_PLUS_1___d486[25] ;
  assign x__h20998 = temp_A[24] & INV_temp_B_02_85_PLUS_1___d486[24] ;
  assign x__h21131 = temp_A[26] ^ INV_temp_B_02_85_PLUS_1___d486[26] ;
  assign x__h21190 = temp_A[25] & INV_temp_B_02_85_PLUS_1___d486[25] ;
  assign x__h21323 = temp_A[27] ^ INV_temp_B_02_85_PLUS_1___d486[27] ;
  assign x__h21382 = temp_A[26] & INV_temp_B_02_85_PLUS_1___d486[26] ;
  assign x__h21515 = temp_A[28] ^ INV_temp_B_02_85_PLUS_1___d486[28] ;
  assign x__h21574 = temp_A[27] & INV_temp_B_02_85_PLUS_1___d486[27] ;
  assign x__h21707 = temp_A[29] ^ INV_temp_B_02_85_PLUS_1___d486[29] ;
  assign x__h21766 = temp_A[28] & INV_temp_B_02_85_PLUS_1___d486[28] ;
  assign x__h21899 = temp_A[30] ^ INV_temp_B_02_85_PLUS_1___d486[30] ;
  assign x__h21958 = temp_A[29] & INV_temp_B_02_85_PLUS_1___d486[29] ;
  assign x__h22091 = temp_A[31] ^ INV_temp_B_02_85_PLUS_1___d486[31] ;
  assign x__h22150 = temp_A[30] & INV_temp_B_02_85_PLUS_1___d486[30] ;
  assign x__h22283 = temp_A[32] ^ INV_temp_B_02_85_PLUS_1___d486[32] ;
  assign x__h22342 = temp_A[31] & INV_temp_B_02_85_PLUS_1___d486[31] ;
  assign x__h22475 = temp_A[33] ^ INV_temp_B_02_85_PLUS_1___d486[33] ;
  assign x__h22534 = temp_A[32] & INV_temp_B_02_85_PLUS_1___d486[32] ;
  assign x__h22667 = temp_A[34] ^ INV_temp_B_02_85_PLUS_1___d486[34] ;
  assign x__h22726 = temp_A[33] & INV_temp_B_02_85_PLUS_1___d486[33] ;
  assign x__h22859 = temp_A[35] ^ INV_temp_B_02_85_PLUS_1___d486[35] ;
  assign x__h22918 = temp_A[34] & INV_temp_B_02_85_PLUS_1___d486[34] ;
  assign x__h23051 = temp_A[36] ^ INV_temp_B_02_85_PLUS_1___d486[36] ;
  assign x__h23110 = temp_A[35] & INV_temp_B_02_85_PLUS_1___d486[35] ;
  assign x__h23243 = temp_A[37] ^ INV_temp_B_02_85_PLUS_1___d486[37] ;
  assign x__h23302 = temp_A[36] & INV_temp_B_02_85_PLUS_1___d486[36] ;
  assign x__h23435 = temp_A[38] ^ INV_temp_B_02_85_PLUS_1___d486[38] ;
  assign x__h23494 = temp_A[37] & INV_temp_B_02_85_PLUS_1___d486[37] ;
  assign x__h23627 = temp_A[39] ^ INV_temp_B_02_85_PLUS_1___d486[39] ;
  assign x__h23686 = temp_A[38] & INV_temp_B_02_85_PLUS_1___d486[38] ;
  assign x__h23819 = temp_A[40] ^ INV_temp_B_02_85_PLUS_1___d486[40] ;
  assign x__h23878 = temp_A[39] & INV_temp_B_02_85_PLUS_1___d486[39] ;
  assign x__h24011 = temp_A[41] ^ INV_temp_B_02_85_PLUS_1___d486[41] ;
  assign x__h24070 = temp_A[40] & INV_temp_B_02_85_PLUS_1___d486[40] ;
  assign x__h24203 = temp_A[42] ^ INV_temp_B_02_85_PLUS_1___d486[42] ;
  assign x__h24262 = temp_A[41] & INV_temp_B_02_85_PLUS_1___d486[41] ;
  assign x__h24395 = temp_A[43] ^ INV_temp_B_02_85_PLUS_1___d486[43] ;
  assign x__h24454 = temp_A[42] & INV_temp_B_02_85_PLUS_1___d486[42] ;
  assign x__h24587 = temp_A[44] ^ INV_temp_B_02_85_PLUS_1___d486[44] ;
  assign x__h24646 = temp_A[43] & INV_temp_B_02_85_PLUS_1___d486[43] ;
  assign x__h24779 = temp_A[45] ^ INV_temp_B_02_85_PLUS_1___d486[45] ;
  assign x__h24838 = temp_A[44] & INV_temp_B_02_85_PLUS_1___d486[44] ;
  assign x__h24971 = temp_A[46] ^ INV_temp_B_02_85_PLUS_1___d486[46] ;
  assign x__h25030 = temp_A[45] & INV_temp_B_02_85_PLUS_1___d486[45] ;
  assign x__h25163 = temp_A[47] ^ INV_temp_B_02_85_PLUS_1___d486[47] ;
  assign x__h25222 = temp_A[46] & INV_temp_B_02_85_PLUS_1___d486[46] ;
  assign x__h25355 = temp_A[48] ^ INV_temp_B_02_85_PLUS_1___d486[48] ;
  assign x__h25414 = temp_A[47] & INV_temp_B_02_85_PLUS_1___d486[47] ;
  assign x__h25547 = temp_A[49] ^ INV_temp_B_02_85_PLUS_1___d486[49] ;
  assign x__h25606 = temp_A[48] & INV_temp_B_02_85_PLUS_1___d486[48] ;
  assign x__h26138 = ~fp_a[24] ;
  assign x__h26265 = ~fp_a[25] ;
  assign x__h26453 = ~fp_a[26] ;
  assign x__h26641 = ~fp_a[27] ;
  assign x__h26829 = ~fp_a[28] ;
  assign x__h27017 = ~fp_a[29] ;
  assign x__h27205 = ~fp_a[30] ;
  assign x__h2909 = fp_a[24] ^ y__h2912 ;
  assign x__h3036 = fp_a[25] ^ y__h3039 ;
  assign x__h3093 = fp_a[24] & y__h2912 ;
  assign x__h3222 = fp_a[26] ^ y__h3225 ;
  assign x__h3279 = fp_a[25] & y__h3039 ;
  assign x__h33489 =
	     { temp_sum[49] ^ y__h33121,
	       temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984,
	       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005 } ;
  assign x__h33512 =
	     { temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984,
	       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1021 } ;
  assign x__h3408 = fp_a[27] ^ y__h3411 ;
  assign x__h3465 = fp_a[26] & y__h3225 ;
  assign x__h3594 = fp_a[28] ^ y__h3597 ;
  assign x__h3651 = fp_a[27] & y__h3411 ;
  assign x__h3780 = fp_a[29] ^ y__h3783 ;
  assign x__h3837 = fp_a[28] & y__h3597 ;
  assign x__h38837 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h38840 :
	       _theResult___snd_fst__h41839 ;
  assign x__h3966 = fp_a[30] ^ y__h3969 ;
  assign x__h4023 = fp_a[29] & y__h3783 ;
  assign x__h40604 = fp_a[24] ^ fp_a[23] ;
  assign x__h40730 = fp_a[25] ^ y__h39234 ;
  assign x__h40916 = fp_a[26] ^ y__h39420 ;
  assign x__h41102 = fp_a[27] ^ y__h39606 ;
  assign x__h41288 = fp_a[28] ^ y__h39792 ;
  assign x__h41474 = fp_a[29] ^ y__h39978 ;
  assign x__h54972 =
	     { temp_sum[46] ^ y__h54604,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176,
	       temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177,
	       temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178 } ;
  assign x__h54995 =
	     { temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1194 } ;
  assign x__h5911 = temp_A[1] & temp_B[1] ;
  assign x__h5958 = temp_A[1] ^ temp_B[1] ;
  assign x__h60251 =
	     { temp_sum[48] ^ y__h59883,
	       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056 } ;
  assign x__h60274 =
	     { temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1072 } ;
  assign x__h60320 =
	     temp_sum[48] ?
	       _theResult___snd_fst__h41839 :
	       _theResult___snd_fst__h60323 ;
  assign x__h6103 = temp_A[2] & temp_B[2] ;
  assign x__h6150 = temp_A[2] ^ temp_B[2] ;
  assign x__h6295 = temp_A[3] & temp_B[3] ;
  assign x__h6342 = temp_A[3] ^ temp_B[3] ;
  assign x__h6487 = temp_A[4] & temp_B[4] ;
  assign x__h6534 = temp_A[4] ^ temp_B[4] ;
  assign x__h6679 = temp_A[5] & temp_B[5] ;
  assign x__h6726 = temp_A[5] ^ temp_B[5] ;
  assign x__h6871 = temp_A[6] & temp_B[6] ;
  assign x__h6918 = temp_A[6] ^ temp_B[6] ;
  assign x__h7063 = temp_A[7] & temp_B[7] ;
  assign x__h7110 = temp_A[7] ^ temp_B[7] ;
  assign x__h7255 = temp_A[8] & temp_B[8] ;
  assign x__h7302 = temp_A[8] ^ temp_B[8] ;
  assign x__h7447 = temp_A[9] & temp_B[9] ;
  assign x__h7494 = temp_A[9] ^ temp_B[9] ;
  assign x__h7639 = temp_A[10] & temp_B[10] ;
  assign x__h7686 = temp_A[10] ^ temp_B[10] ;
  assign x__h7831 = temp_A[11] & temp_B[11] ;
  assign x__h7878 = temp_A[11] ^ temp_B[11] ;
  assign x__h8023 = temp_A[12] & temp_B[12] ;
  assign x__h8070 = temp_A[12] ^ temp_B[12] ;
  assign x__h8215 = temp_A[13] & temp_B[13] ;
  assign x__h8262 = temp_A[13] ^ temp_B[13] ;
  assign x__h8407 = temp_A[14] & temp_B[14] ;
  assign x__h8454 = temp_A[14] ^ temp_B[14] ;
  assign x__h8599 = temp_A[15] & temp_B[15] ;
  assign x__h8646 = temp_A[15] ^ temp_B[15] ;
  assign x__h8791 = temp_A[16] & temp_B[16] ;
  assign x__h8838 = temp_A[16] ^ temp_B[16] ;
  assign x__h8983 = temp_A[17] & temp_B[17] ;
  assign x__h9030 = temp_A[17] ^ temp_B[17] ;
  assign x__h9175 = temp_A[18] & temp_B[18] ;
  assign x__h9222 = temp_A[18] ^ temp_B[18] ;
  assign x__h9367 = temp_A[19] & temp_B[19] ;
  assign x__h9414 = temp_A[19] ^ temp_B[19] ;
  assign x__h9559 = temp_A[20] & temp_B[20] ;
  assign x__h9606 = temp_A[20] ^ temp_B[20] ;
  assign x__h9751 = temp_A[21] & temp_B[21] ;
  assign x__h9798 = temp_A[21] ^ temp_B[21] ;
  assign x__h9943 = temp_A[22] & temp_B[22] ;
  assign x__h9990 = temp_A[22] ^ temp_B[22] ;
  assign x_exponent__h25873 =
	     { x__h27205 ^ y__h27206,
	       x__h27017 ^ y__h27018,
	       INV_fp_a_BIT_28_6_18_XOR_fp_a_BIT_27_0_OR_INV__ETC___d847 } ;
  assign y__h10077 = x__h10135 | y__h10136 ;
  assign y__h10136 = x__h10182 & y__h9885 ;
  assign y__h10269 = x__h10327 | y__h10328 ;
  assign y__h10328 = x__h10374 & y__h10077 ;
  assign y__h10461 = x__h10519 | y__h10520 ;
  assign y__h10520 = x__h10566 & y__h10269 ;
  assign y__h10653 = x__h10711 | y__h10712 ;
  assign y__h10712 = x__h10758 & y__h10461 ;
  assign y__h10845 = x__h10903 | y__h10904 ;
  assign y__h10904 = x__h10950 & y__h10653 ;
  assign y__h11037 = x__h11095 | y__h11096 ;
  assign y__h11096 = x__h11142 & y__h10845 ;
  assign y__h11229 = x__h11287 | y__h11288 ;
  assign y__h11288 = x__h11334 & y__h11037 ;
  assign y__h11421 = x__h11479 | y__h11480 ;
  assign y__h11480 = x__h11526 & y__h11229 ;
  assign y__h11613 = x__h11671 | y__h11672 ;
  assign y__h11672 = x__h11718 & y__h11421 ;
  assign y__h11805 = x__h11863 | y__h11864 ;
  assign y__h11864 = x__h11910 & y__h11613 ;
  assign y__h11997 = x__h12055 | y__h12056 ;
  assign y__h12056 = x__h12102 & y__h11805 ;
  assign y__h12189 = x__h12247 | y__h12248 ;
  assign y__h12248 = x__h12294 & y__h11997 ;
  assign y__h12381 = x__h12439 | y__h12440 ;
  assign y__h12440 = x__h12486 & y__h12189 ;
  assign y__h12573 = x__h12631 | y__h12632 ;
  assign y__h12632 = x__h12678 & y__h12381 ;
  assign y__h12765 = x__h12823 | y__h12824 ;
  assign y__h12824 = x__h12870 & y__h12573 ;
  assign y__h12957 = x__h13015 | y__h13016 ;
  assign y__h13016 = x__h13062 & y__h12765 ;
  assign y__h13149 = x__h13207 | y__h13208 ;
  assign y__h13208 = x__h13254 & y__h12957 ;
  assign y__h13341 = x__h13399 | y__h13400 ;
  assign y__h13400 = x__h13446 & y__h13149 ;
  assign y__h13533 = x__h13591 | y__h13592 ;
  assign y__h13592 = x__h13638 & y__h13341 ;
  assign y__h13725 = x__h13783 | y__h13784 ;
  assign y__h13784 = x__h13830 & y__h13533 ;
  assign y__h13917 = x__h13975 | y__h13976 ;
  assign y__h13976 = x__h14022 & y__h13725 ;
  assign y__h14109 = x__h14167 | y__h14168 ;
  assign y__h14168 = x__h14214 & y__h13917 ;
  assign y__h14301 = x__h14359 | y__h14360 ;
  assign y__h14360 = x__h14406 & y__h14109 ;
  assign y__h14493 = x__h14551 | y__h14552 ;
  assign y__h14552 = x__h14598 & y__h14301 ;
  assign y__h14685 = x__h14743 | y__h14744 ;
  assign y__h14744 = x__h14790 & y__h14493 ;
  assign y__h14877 = x__h14935 | y__h14936 ;
  assign y__h14936 = x__h14982 & y__h14685 ;
  assign y__h16395 = temp_A[0] & INV_temp_B_02_85_PLUS_1___d486[0] ;
  assign y__h16524 = x__h16582 | y__h16583 ;
  assign y__h16583 = x__h16394 & y__h16395 ;
  assign y__h16716 = x__h16774 | y__h16775 ;
  assign y__h16775 = x__h16523 & y__h16524 ;
  assign y__h16908 = x__h16966 | y__h16967 ;
  assign y__h16967 = x__h16715 & y__h16716 ;
  assign y__h17100 = x__h17158 | y__h17159 ;
  assign y__h17159 = x__h16907 & y__h16908 ;
  assign y__h17292 = x__h17350 | y__h17351 ;
  assign y__h17351 = x__h17099 & y__h17100 ;
  assign y__h17484 = x__h17542 | y__h17543 ;
  assign y__h1752 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h17543 = x__h17291 & y__h17292 ;
  assign y__h17676 = x__h17734 | y__h17735 ;
  assign y__h17735 = x__h17483 & y__h17484 ;
  assign y__h17868 = x__h17926 | y__h17927 ;
  assign y__h17927 = x__h17675 & y__h17676 ;
  assign y__h18060 = x__h18118 | y__h18119 ;
  assign y__h18119 = x__h17867 & y__h17868 ;
  assign y__h18252 = x__h18310 | y__h18311 ;
  assign y__h18311 = x__h18059 & y__h18060 ;
  assign y__h18444 = x__h18502 | y__h18503 ;
  assign y__h18503 = x__h18251 & y__h18252 ;
  assign y__h18636 = x__h18694 | y__h18695 ;
  assign y__h18695 = x__h18443 & y__h18444 ;
  assign y__h18828 = x__h18886 | y__h18887 ;
  assign y__h18887 = x__h18635 & y__h18636 ;
  assign y__h19020 = x__h19078 | y__h19079 ;
  assign y__h19079 = x__h18827 & y__h18828 ;
  assign y__h19212 = x__h19270 | y__h19271 ;
  assign y__h19271 = x__h19019 & y__h19020 ;
  assign y__h19404 = x__h19462 | y__h19463 ;
  assign y__h1941 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h1752 ;
  assign y__h19463 = x__h19211 & y__h19212 ;
  assign y__h19596 = x__h19654 | y__h19655 ;
  assign y__h19655 = x__h19403 & y__h19404 ;
  assign y__h19788 = x__h19846 | y__h19847 ;
  assign y__h19847 = x__h19595 & y__h19596 ;
  assign y__h19980 = x__h20038 | y__h20039 ;
  assign y__h20039 = x__h19787 & y__h19788 ;
  assign y__h20172 = x__h20230 | y__h20231 ;
  assign y__h20231 = x__h19979 & y__h19980 ;
  assign y__h20364 = x__h20422 | y__h20423 ;
  assign y__h20423 = x__h20171 & y__h20172 ;
  assign y__h20556 = x__h20614 | y__h20615 ;
  assign y__h20615 = x__h20363 & y__h20364 ;
  assign y__h20748 = x__h20806 | y__h20807 ;
  assign y__h20807 = x__h20555 & y__h20556 ;
  assign y__h20940 = x__h20998 | y__h20999 ;
  assign y__h20999 = x__h20747 & y__h20748 ;
  assign y__h21132 = x__h21190 | y__h21191 ;
  assign y__h21191 = x__h20939 & y__h20940 ;
  assign y__h2130 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h1941 ;
  assign y__h21324 = x__h21382 | y__h21383 ;
  assign y__h21383 = x__h21131 & y__h21132 ;
  assign y__h21516 = x__h21574 | y__h21575 ;
  assign y__h21575 = x__h21323 & y__h21324 ;
  assign y__h21708 = x__h21766 | y__h21767 ;
  assign y__h21767 = x__h21515 & y__h21516 ;
  assign y__h21900 = x__h21958 | y__h21959 ;
  assign y__h21959 = x__h21707 & y__h21708 ;
  assign y__h22092 = x__h22150 | y__h22151 ;
  assign y__h22151 = x__h21899 & y__h21900 ;
  assign y__h22284 = x__h22342 | y__h22343 ;
  assign y__h22343 = x__h22091 & y__h22092 ;
  assign y__h22476 = x__h22534 | y__h22535 ;
  assign y__h22535 = x__h22283 & y__h22284 ;
  assign y__h22668 = x__h22726 | y__h22727 ;
  assign y__h22727 = x__h22475 & y__h22476 ;
  assign y__h22860 = x__h22918 | y__h22919 ;
  assign y__h22919 = x__h22667 & y__h22668 ;
  assign y__h23052 = x__h23110 | y__h23111 ;
  assign y__h23111 = x__h22859 & y__h22860 ;
  assign y__h2319 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h2130 ;
  assign y__h23244 = x__h23302 | y__h23303 ;
  assign y__h23303 = x__h23051 & y__h23052 ;
  assign y__h23436 = x__h23494 | y__h23495 ;
  assign y__h23495 = x__h23243 & y__h23244 ;
  assign y__h23628 = x__h23686 | y__h23687 ;
  assign y__h23687 = x__h23435 & y__h23436 ;
  assign y__h23820 = x__h23878 | y__h23879 ;
  assign y__h23879 = x__h23627 & y__h23628 ;
  assign y__h24012 = x__h24070 | y__h24071 ;
  assign y__h24071 = x__h23819 & y__h23820 ;
  assign y__h24204 = x__h24262 | y__h24263 ;
  assign y__h24263 = x__h24011 & y__h24012 ;
  assign y__h24396 = x__h24454 | y__h24455 ;
  assign y__h24455 = x__h24203 & y__h24204 ;
  assign y__h24588 = x__h24646 | y__h24647 ;
  assign y__h24647 = x__h24395 & y__h24396 ;
  assign y__h24780 = x__h24838 | y__h24839 ;
  assign y__h24839 = x__h24587 & y__h24588 ;
  assign y__h24972 = x__h25030 | y__h25031 ;
  assign y__h25031 = x__h24779 & y__h24780 ;
  assign y__h2508 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h2319 ;
  assign y__h25164 = x__h25222 | y__h25223 ;
  assign y__h25223 = x__h24971 & y__h24972 ;
  assign y__h25356 = x__h25414 | y__h25415 ;
  assign y__h25415 = x__h25163 & y__h25164 ;
  assign y__h25548 = x__h25606 | y__h25607 ;
  assign y__h25607 = x__h25355 & y__h25356 ;
  assign y__h26266 = fp_a[24] | y__h26324 ;
  assign y__h26324 = x__h26138 & fp_a[23] ;
  assign y__h26454 = fp_a[25] | y__h26512 ;
  assign y__h26512 = x__h26265 & y__h26266 ;
  assign y__h26642 = fp_a[26] | y__h26700 ;
  assign y__h26700 = x__h26453 & y__h26454 ;
  assign y__h26830 = fp_a[27] | y__h26888 ;
  assign y__h26888 = x__h26641 & y__h26642 ;
  assign y__h2697 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h2508 ;
  assign y__h27018 = fp_a[28] | y__h27076 ;
  assign y__h27076 = x__h26829 & y__h26830 ;
  assign y__h27206 = fp_a[29] | y__h27264 ;
  assign y__h27264 = x__h27017 & y__h27018 ;
  assign y__h2910 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h2912 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h29215 = temp_sum[27] & temp_sum[26] ;
  assign y__h29401 = temp_sum[28] & y__h29215 ;
  assign y__h29587 = temp_sum[29] & y__h29401 ;
  assign y__h29773 = temp_sum[30] & y__h29587 ;
  assign y__h29959 = temp_sum[31] & y__h29773 ;
  assign y__h30145 = temp_sum[32] & y__h29959 ;
  assign y__h30331 = temp_sum[33] & y__h30145 ;
  assign y__h3037 = x__h3093 | y__h3094 ;
  assign y__h3039 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h1752 ;
  assign y__h30517 = temp_sum[34] & y__h30331 ;
  assign y__h30703 = temp_sum[35] & y__h30517 ;
  assign y__h30889 = temp_sum[36] & y__h30703 ;
  assign y__h3094 = x__h2909 & y__h2910 ;
  assign y__h31075 = temp_sum[37] & y__h30889 ;
  assign y__h31261 = temp_sum[38] & y__h31075 ;
  assign y__h31447 = temp_sum[39] & y__h31261 ;
  assign y__h31633 = temp_sum[40] & y__h31447 ;
  assign y__h31819 = temp_sum[41] & y__h31633 ;
  assign y__h32005 = temp_sum[42] & y__h31819 ;
  assign y__h32191 = temp_sum[43] & y__h32005 ;
  assign y__h3223 = x__h3279 | y__h3280 ;
  assign y__h3225 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h1941 ;
  assign y__h32377 = temp_sum[44] & y__h32191 ;
  assign y__h32563 = temp_sum[45] & y__h32377 ;
  assign y__h32749 = temp_sum[46] & y__h32563 ;
  assign y__h3280 = x__h3036 & y__h3037 ;
  assign y__h32935 = temp_sum[47] & y__h32749 ;
  assign y__h33121 = temp_sum[48] & y__h32935 ;
  assign y__h3409 = x__h3465 | y__h3466 ;
  assign y__h3411 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h2130 ;
  assign y__h3466 = x__h3222 & y__h3223 ;
  assign y__h3595 = x__h3651 | y__h3652 ;
  assign y__h3597 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h2319 ;
  assign y__h3652 = x__h3408 & y__h3409 ;
  assign y__h3781 = x__h3837 | y__h3838 ;
  assign y__h3783 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h2508 ;
  assign y__h3838 = x__h3594 & y__h3595 ;
  assign y__h39234 = fp_a[24] & fp_a[23] ;
  assign y__h39420 = fp_a[25] & y__h39234 ;
  assign y__h39606 = fp_a[26] & y__h39420 ;
  assign y__h3967 = x__h4023 | y__h4024 ;
  assign y__h3969 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h2697 ;
  assign y__h39792 = fp_a[27] & y__h39606 ;
  assign y__h39978 = fp_a[28] & y__h39792 ;
  assign y__h40164 = fp_a[29] & y__h39978 ;
  assign y__h4024 = x__h3780 & y__h3781 ;
  assign y__h40731 = x__h40604 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h40917 = x__h40730 & y__h40731 ;
  assign y__h41103 = x__h40916 & y__h40917 ;
  assign y__h41289 = x__h41102 & y__h41103 ;
  assign y__h41475 = x__h41288 & y__h41289 ;
  assign y__h41661 = x__h41474 & y__h41475 ;
  assign y__h50698 = temp_sum[24] & temp_sum[23] ;
  assign y__h50884 = temp_sum[25] & y__h50698 ;
  assign y__h51070 = temp_sum[26] & y__h50884 ;
  assign y__h51256 = temp_sum[27] & y__h51070 ;
  assign y__h51442 = temp_sum[28] & y__h51256 ;
  assign y__h51628 = temp_sum[29] & y__h51442 ;
  assign y__h51814 = temp_sum[30] & y__h51628 ;
  assign y__h52000 = temp_sum[31] & y__h51814 ;
  assign y__h52186 = temp_sum[32] & y__h52000 ;
  assign y__h52372 = temp_sum[33] & y__h52186 ;
  assign y__h52558 = temp_sum[34] & y__h52372 ;
  assign y__h52744 = temp_sum[35] & y__h52558 ;
  assign y__h52930 = temp_sum[36] & y__h52744 ;
  assign y__h53116 = temp_sum[37] & y__h52930 ;
  assign y__h53302 = temp_sum[38] & y__h53116 ;
  assign y__h53488 = temp_sum[39] & y__h53302 ;
  assign y__h53674 = temp_sum[40] & y__h53488 ;
  assign y__h53860 = temp_sum[41] & y__h53674 ;
  assign y__h54046 = temp_sum[42] & y__h53860 ;
  assign y__h54232 = temp_sum[43] & y__h54046 ;
  assign y__h54418 = temp_sum[44] & y__h54232 ;
  assign y__h54604 = temp_sum[45] & y__h54418 ;
  assign y__h54790 = temp_sum[46] & y__h54604 ;
  assign y__h55977 = temp_sum[26] & temp_sum[25] ;
  assign y__h56163 = temp_sum[27] & y__h55977 ;
  assign y__h56349 = temp_sum[28] & y__h56163 ;
  assign y__h56535 = temp_sum[29] & y__h56349 ;
  assign y__h56721 = temp_sum[30] & y__h56535 ;
  assign y__h56907 = temp_sum[31] & y__h56721 ;
  assign y__h57093 = temp_sum[32] & y__h56907 ;
  assign y__h57279 = temp_sum[33] & y__h57093 ;
  assign y__h57465 = temp_sum[34] & y__h57279 ;
  assign y__h57651 = temp_sum[35] & y__h57465 ;
  assign y__h57837 = temp_sum[36] & y__h57651 ;
  assign y__h58023 = temp_sum[37] & y__h57837 ;
  assign y__h58209 = temp_sum[38] & y__h58023 ;
  assign y__h58395 = temp_sum[39] & y__h58209 ;
  assign y__h5853 = x__h5911 | y__h5912 ;
  assign y__h58581 = temp_sum[40] & y__h58395 ;
  assign y__h58767 = temp_sum[41] & y__h58581 ;
  assign y__h58953 = temp_sum[42] & y__h58767 ;
  assign y__h5912 = x__h5958 & y__h5959 ;
  assign y__h59139 = temp_sum[43] & y__h58953 ;
  assign y__h59325 = temp_sum[44] & y__h59139 ;
  assign y__h59511 = temp_sum[45] & y__h59325 ;
  assign y__h5959 = temp_A[0] & temp_B[0] ;
  assign y__h59697 = temp_sum[46] & y__h59511 ;
  assign y__h59883 = temp_sum[47] & y__h59697 ;
  assign y__h60069 = temp_sum[48] & y__h59883 ;
  assign y__h6045 = x__h6103 | y__h6104 ;
  assign y__h60724 = exp___1__h49735[1] & exp___1__h49735[0] ;
  assign y__h60913 = exp___1__h49735[2] & y__h60724 ;
  assign y__h6104 = x__h6150 & y__h5853 ;
  assign y__h61102 = exp___1__h49735[3] & y__h60913 ;
  assign y__h61291 = exp___1__h49735[4] & y__h61102 ;
  assign y__h61480 = exp___1__h49735[5] & y__h61291 ;
  assign y__h61669 = exp___1__h49735[6] & y__h61480 ;
  assign y__h6237 = x__h6295 | y__h6296 ;
  assign y__h6296 = x__h6342 & y__h6045 ;
  assign y__h6429 = x__h6487 | y__h6488 ;
  assign y__h6488 = x__h6534 & y__h6237 ;
  assign y__h6621 = x__h6679 | y__h6680 ;
  assign y__h6680 = x__h6726 & y__h6429 ;
  assign y__h6813 = x__h6871 | y__h6872 ;
  assign y__h6872 = x__h6918 & y__h6621 ;
  assign y__h7005 = x__h7063 | y__h7064 ;
  assign y__h7064 = x__h7110 & y__h6813 ;
  assign y__h7197 = x__h7255 | y__h7256 ;
  assign y__h7256 = x__h7302 & y__h7005 ;
  assign y__h7389 = x__h7447 | y__h7448 ;
  assign y__h7448 = x__h7494 & y__h7197 ;
  assign y__h7581 = x__h7639 | y__h7640 ;
  assign y__h7640 = x__h7686 & y__h7389 ;
  assign y__h7773 = x__h7831 | y__h7832 ;
  assign y__h7832 = x__h7878 & y__h7581 ;
  assign y__h7965 = x__h8023 | y__h8024 ;
  assign y__h8024 = x__h8070 & y__h7773 ;
  assign y__h8157 = x__h8215 | y__h8216 ;
  assign y__h8216 = x__h8262 & y__h7965 ;
  assign y__h8349 = x__h8407 | y__h8408 ;
  assign y__h8408 = x__h8454 & y__h8157 ;
  assign y__h8541 = x__h8599 | y__h8600 ;
  assign y__h8600 = x__h8646 & y__h8349 ;
  assign y__h8733 = x__h8791 | y__h8792 ;
  assign y__h8792 = x__h8838 & y__h8541 ;
  assign y__h8925 = x__h8983 | y__h8984 ;
  assign y__h8984 = x__h9030 & y__h8733 ;
  assign y__h9117 = x__h9175 | y__h9176 ;
  assign y__h9176 = x__h9222 & y__h8925 ;
  assign y__h9309 = x__h9367 | y__h9368 ;
  assign y__h9368 = x__h9414 & y__h9117 ;
  assign y__h9501 = x__h9559 | y__h9560 ;
  assign y__h9560 = x__h9606 & y__h9309 ;
  assign y__h9693 = x__h9751 | y__h9752 ;
  assign y__h9752 = x__h9798 & y__h9501 ;
  assign y__h9885 = x__h9943 | y__h9944 ;
  assign y__h9944 = x__h9990 & y__h9693 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	adj_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adj_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_add <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (adj_done_EN) adj_done <= `BSV_ASSIGNMENT_DELAY adj_done_D_IN;
	if (adj_sub_EN) adj_sub <= `BSV_ASSIGNMENT_DELAY adj_sub_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (do_add_EN) do_add <= `BSV_ASSIGNMENT_DELAY do_add_D_IN;
	if (do_sub_EN) do_sub <= `BSV_ASSIGNMENT_DELAY do_sub_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    adj_done = 1'h0;
    adj_sub = 1'h0;
    assembled_answer = 1'h0;
    do_add = 1'h0;
    do_sub = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    operands_swapped_if_needed = 1'h0;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

