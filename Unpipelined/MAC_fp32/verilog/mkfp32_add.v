//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Thu Oct 24 00:07:13 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16 reg
// get_B_b                        I    32 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  wire [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  wire [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // remaining internal signals
  wire [7 : 0] IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q3,
	       INV_fp_b_BITS_30_TO_23__q1;
  wire [5 : 0] fp_a_BIT_28_2_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d81;
  wire [3 : 0] fp_a_BIT_26_0_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d80;
  wire [1 : 0] fp_a_BIT_24_8_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d79;
  wire x__h2134,
       x__h2261,
       x__h2318,
       x__h2447,
       x__h2504,
       x__h2633,
       x__h2690,
       x__h2819,
       x__h2876,
       x__h3005,
       x__h3062,
       x__h3191,
       x__h3248,
       y__h1166,
       y__h1355,
       y__h1544,
       y__h1733,
       y__h1922,
       y__h2135,
       y__h2137,
       y__h2262,
       y__h2264,
       y__h2319,
       y__h2448,
       y__h2450,
       y__h2505,
       y__h2634,
       y__h2636,
       y__h2691,
       y__h2820,
       y__h2822,
       y__h2877,
       y__h3006,
       y__h3008,
       y__h3063,
       y__h3192,
       y__h3194,
       y__h3249,
       y__h977;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = 1'd1 ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff =
	     got_A && got_B && !expdiff_calculated ;
  assign WILL_FIRE_RL_calculate_expdiff = CAN_FIRE_RL_calculate_expdiff ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h3191 ^ y__h3192,
	       x__h3005 ^ y__h3006,
	       fp_a_BIT_28_2_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d81 } ;
  assign expdiff_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = 1'd1 ;
  assign expdiff_calculated_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register fp_a
  assign fp_a_D_IN = { get_A_a, 16'b0 } ;
  assign fp_a_EN = EN_get_A ;

  // register fp_b
  assign fp_b_D_IN = get_B_b ;
  assign fp_b_EN = EN_get_B ;

  // register fp_c
  assign fp_c_D_IN = 32'h0 ;
  assign fp_c_EN = 1'b0 ;

  // register got_A
  assign got_A_D_IN = 1'd1 ;
  assign got_A_EN = EN_get_A ;

  // register got_B
  assign got_B_D_IN = 1'd1 ;
  assign got_B_EN = EN_get_B ;

  // remaining internal signals
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q3 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign fp_a_BIT_24_8_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d79 =
	     { x__h2134 ^ y__h2135,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q3[0] } ;
  assign fp_a_BIT_26_0_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d80 =
	     { x__h2447 ^ y__h2448,
	       x__h2261 ^ y__h2262,
	       fp_a_BIT_24_8_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d79 } ;
  assign fp_a_BIT_28_2_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d81 =
	     { x__h2819 ^ y__h2820,
	       x__h2633 ^ y__h2634,
	       fp_a_BIT_26_0_XOR_INV_fp_b_BITS_30_TO_23_0_1_B_ETC___d80 } ;
  assign x__h2134 = fp_a[24] ^ y__h2137 ;
  assign x__h2261 = fp_a[25] ^ y__h2264 ;
  assign x__h2318 = fp_a[24] & y__h2137 ;
  assign x__h2447 = fp_a[26] ^ y__h2450 ;
  assign x__h2504 = fp_a[25] & y__h2264 ;
  assign x__h2633 = fp_a[27] ^ y__h2636 ;
  assign x__h2690 = fp_a[26] & y__h2450 ;
  assign x__h2819 = fp_a[28] ^ y__h2822 ;
  assign x__h2876 = fp_a[27] & y__h2636 ;
  assign x__h3005 = fp_a[29] ^ y__h3008 ;
  assign x__h3062 = fp_a[28] & y__h2822 ;
  assign x__h3191 = fp_a[30] ^ y__h3194 ;
  assign x__h3248 = fp_a[29] & y__h3008 ;
  assign y__h1166 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h977 ;
  assign y__h1355 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h1166 ;
  assign y__h1544 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h1355 ;
  assign y__h1733 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h1544 ;
  assign y__h1922 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h1733 ;
  assign y__h2135 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h2137 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h2262 = x__h2318 | y__h2319 ;
  assign y__h2264 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h977 ;
  assign y__h2319 = x__h2134 & y__h2135 ;
  assign y__h2448 = x__h2504 | y__h2505 ;
  assign y__h2450 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h1166 ;
  assign y__h2505 = x__h2261 & y__h2262 ;
  assign y__h2634 = x__h2690 | y__h2691 ;
  assign y__h2636 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h1355 ;
  assign y__h2691 = x__h2447 & y__h2448 ;
  assign y__h2820 = x__h2876 | y__h2877 ;
  assign y__h2822 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h1544 ;
  assign y__h2877 = x__h2633 & y__h2634 ;
  assign y__h3006 = x__h3062 | y__h3063 ;
  assign y__h3008 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h1733 ;
  assign y__h3063 = x__h2819 & y__h2820 ;
  assign y__h3192 = x__h3248 | y__h3249 ;
  assign y__h3194 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h1922 ;
  assign y__h3249 = x__h3005 & y__h3006 ;
  assign y__h977 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

