//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri Oct 25 01:23:16 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  wire [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  wire [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  wire [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  wire [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_1;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_1;
  wire MUX_fp_a_write_1__SEL_1, MUX_temp_B_write_1__SEL_1;

  // remaining internal signals
  wire [30 : 0] IF_IF_temp_sum_19_BIT_49_20_THEN_IF_NOT_temp_s_ETC__q8;
  wire [24 : 0] IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q7,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [22 : 0] IF_NOT_temp_sum_19_BIT_24_16_17_OR_temp_sum_19_ETC___d350,
		IF_NOT_temp_sum_19_BIT_25_21_22_OR_temp_sum_19_ETC___d299,
		IF_temp_sum_19_BIT_49_20_THEN_IF_NOT_temp_sum__ETC___d351,
		x__h10360,
		x__h10383,
		x__h15639,
		x__h15662;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q4,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q5,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h15636,
	       _theResult___snd_fst__h15711,
	       _theResult___snd_fst__h18710,
	       _theResult___snd_fst__h18718,
	       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d213,
	       x__h15708;
  wire [5 : 0] fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d212;
  wire [4 : 0] temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d339,
	       temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d288;
  wire [3 : 0] fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d211;
  wire [1 : 0] fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93;
  wire fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17,
       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d135,
       fp_a_BIT_31_01_EQ_fp_b_BIT_31_02___d103,
       got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97,
       temp_sum_19_BIT_26_25_XOR_temp_sum_19_BIT_25_21___d323,
       temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_25___d272,
       temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_2_ETC___d322,
       temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d271,
       temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d321,
       temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d270,
       temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d320,
       temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d269,
       temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d319,
       temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d268,
       temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d318,
       temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d267,
       temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d317,
       temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d266,
       temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d316,
       temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d265,
       temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d315,
       temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d264,
       temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d314,
       temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d263,
       temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d313,
       temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d262,
       temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d312,
       temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d261,
       temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d311,
       temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d260,
       temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d310,
       temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d259,
       temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d309,
       temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d258,
       temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d308,
       temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d257,
       temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d307,
       temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d256,
       temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d306,
       temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d255,
       temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d305,
       temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d254,
       temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d304,
       temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d253,
       temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d303,
       temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d252,
       temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d302,
       temp_sum_19_BIT_48_49_XOR_temp_sum_19_BIT_47_5_ETC___d251,
       temp_sum_19_BIT_49_20_AND_temp_sum_19_BIT_48_4_ETC___d193,
       temp_sum_19_BIT_49_20_XOR_temp_sum_19_BIT_48_4_ETC___d245,
       x__h17475,
       x__h17601,
       x__h17787,
       x__h17973,
       x__h18159,
       x__h18345,
       x__h2781,
       x__h2908,
       x__h2965,
       x__h3094,
       x__h3151,
       x__h3280,
       x__h3337,
       x__h3466,
       x__h3523,
       x__h3652,
       x__h3709,
       x__h3838,
       x__h3895,
       y__h11365,
       y__h11551,
       y__h11737,
       y__h11923,
       y__h12109,
       y__h12295,
       y__h12481,
       y__h12667,
       y__h12853,
       y__h13039,
       y__h13225,
       y__h13411,
       y__h13597,
       y__h13783,
       y__h13969,
       y__h14155,
       y__h14341,
       y__h14527,
       y__h14713,
       y__h14899,
       y__h15085,
       y__h15271,
       y__h15457,
       y__h16105,
       y__h1624,
       y__h16291,
       y__h16477,
       y__h16663,
       y__h16849,
       y__h17035,
       y__h17602,
       y__h17788,
       y__h17974,
       y__h1813,
       y__h18160,
       y__h18346,
       y__h18532,
       y__h2002,
       y__h2191,
       y__h2380,
       y__h2569,
       y__h2782,
       y__h2784,
       y__h2909,
       y__h2911,
       y__h2966,
       y__h3095,
       y__h3097,
       y__h3152,
       y__h3281,
       y__h3283,
       y__h3338,
       y__h3467,
       y__h3469,
       y__h3524,
       y__h3653,
       y__h3655,
       y__h3710,
       y__h3839,
       y__h3841,
       y__h3896,
       y__h6086,
       y__h6272,
       y__h6458,
       y__h6644,
       y__h6830,
       y__h7016,
       y__h7202,
       y__h7388,
       y__h7574,
       y__h7760,
       y__h7946,
       y__h8132,
       y__h8318,
       y__h8504,
       y__h8690,
       y__h8876,
       y__h9062,
       y__h9248,
       y__h9434,
       y__h9620,
       y__h9806,
       y__h9992;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = assembled_answer ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     got_A && got_B && !operands_swapped_if_needed ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff =
	     got_A && got_B && operands_swapped_if_needed &&
	     !expdiff_calculated ;
  assign WILL_FIRE_RL_calculate_expdiff = CAN_FIRE_RL_calculate_expdiff ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     !add_prep_done ;
  assign WILL_FIRE_RL_add_prep = CAN_FIRE_RL_add_prep ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     !add_done ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_done &&
	     round_addition_result &&
	     !round_done ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_done &&
	     round_addition_result &&
	     round_done &&
	     !assembled_answer ;
  assign WILL_FIRE_RL_assemble_answer =
	     CAN_FIRE_RL_assemble_answer && !WILL_FIRE_RL_add_prep ;

  // inputs to muxes for submodule ports
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ;
  assign MUX_temp_B_write_1__SEL_1 =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_BIT_31_01_EQ_fp_b_BIT_31_02___d103 ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_1 =
	     { x__h15708,
	       IF_temp_sum_19_BIT_49_20_THEN_IF_NOT_temp_sum__ETC___d351[22:1],
	       IF_IF_temp_sum_19_BIT_49_20_THEN_IF_NOT_temp_s_ETC__q8[0] } ;
  assign MUX_fp_a_write_1__VAL_2 = { get_A_a, 16'b0 } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_1 = temp_A + temp_B ;

  // register add_done
  assign add_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign add_done_EN = WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_add ;

  // register add_prep_done
  assign add_prep_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign add_prep_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  assign add_res_with_adj_exp_D_IN =
	     WILL_FIRE_RL_round_add ?
	       MUX_add_res_with_adj_exp_write_1__VAL_1 :
	       31'd0 ;
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_assemble_answer ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_swap_operands_if_needed ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_swap_operands_if_needed ||
	     WILL_FIRE_RL_assemble_answer ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h3838 ^ y__h3839,
	       x__h3652 ^ y__h3653,
	       fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 } ;
  assign expdiff_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign expdiff_calculated_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  assign fp_a_D_IN =
	     MUX_fp_a_write_1__SEL_1 ? fp_b : MUX_fp_a_write_1__VAL_2 ;
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     EN_get_A ;

  // register fp_b
  assign fp_b_D_IN = MUX_fp_a_write_1__SEL_1 ? fp_a : get_B_b ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     EN_get_B ;

  // register fp_c
  assign fp_c_D_IN = { sign_c, add_res_with_adj_exp } ;
  assign fp_c_EN = WILL_FIRE_RL_assemble_answer ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_A_EN = WILL_FIRE_RL_assemble_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign got_B_EN = WILL_FIRE_RL_assemble_answer || EN_get_B ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign operands_swapped_if_needed_EN =
	     WILL_FIRE_RL_assemble_answer ||
	     WILL_FIRE_RL_swap_operands_if_needed ;

  // register round_addition_result
  assign round_addition_result_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_addition_result_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !WILL_FIRE_RL_assemble_answer ;
  assign round_done_EN =
	     WILL_FIRE_RL_assemble_answer || WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN = 1'b0 ;
  assign round_subtraction_result_EN = 1'b0 ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = MUX_temp_B_write_1__SEL_1 ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register temp_B
  assign temp_B_D_IN =
	     MUX_temp_B_write_1__SEL_1 ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_BIT_31_01_EQ_fp_b_BIT_31_02___d103 ||
	     WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  assign temp_sum_D_IN =
	     WILL_FIRE_RL_add ? MUX_temp_sum_write_1__VAL_1 : 50'd0 ;
  assign temp_sum_EN = WILL_FIRE_RL_add || WILL_FIRE_RL_assemble_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_19_BIT_49_20_THEN_IF_NOT_temp_s_ETC__q8 =
	     IF_temp_sum_19_BIT_49_20_THEN_IF_NOT_temp_sum__ETC___d351[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q4 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q7 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_NOT_temp_sum_19_BIT_24_16_17_OR_temp_sum_19_ETC___d350 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_19_BIT_49_20_XOR_temp_sum_19_BIT_48_4_ETC___d245 ?
		  x__h15639 :
		  x__h15662) ;
  assign IF_NOT_temp_sum_19_BIT_25_21_22_OR_temp_sum_19_ETC___d299 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_19_BIT_49_20_AND_temp_sum_19_BIT_48_4_ETC___d193 ?
		  x__h10360 :
		  x__h10383) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q5 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_sum_19_BIT_49_20_THEN_IF_NOT_temp_sum__ETC___d351 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_19_BIT_25_21_22_OR_temp_sum_19_ETC___d299 :
	       IF_NOT_temp_sum_19_BIT_24_16_17_OR_temp_sum_19_ETC___d350 ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign _theResult___snd__h15636 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d135,
	       x__h18345,
	       x__h18159,
	       x__h17973,
	       x__h17787,
	       x__h17601,
	       x__h17475,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd_fst__h15711 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h15636 :
	       (temp_sum_19_BIT_49_20_AND_temp_sum_19_BIT_48_4_ETC___d193 ?
		  fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d213 :
		  _theResult___snd__h15636) ;
  assign _theResult___snd_fst__h18710 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h18718 ;
  assign _theResult___snd_fst__h18718 =
	     temp_sum_19_BIT_49_20_XOR_temp_sum_19_BIT_48_4_ETC___d245 ?
	       _theResult___snd__h15636 :
	       fp_a[30:23] ;
  assign fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 =
	     fp_a[30:23] < fp_b[30:23] ||
	     fp_a[30:23] == fp_b[30:23] && fp_a[22:0] < fp_b[22:0] ;
  assign fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 =
	     { x__h2781 ^ y__h2782,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q5[0] } ;
  assign fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 =
	     { x__h3094 ^ y__h3095,
	       x__h2908 ^ y__h2909,
	       fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 } ;
  assign fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d211 =
	     { x__h17787 ^ y__h17788,
	       x__h17601 ^ y__h17602,
	       x__h17475 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q4[0] } ;
  assign fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 =
	     { x__h3466 ^ y__h3467,
	       x__h3280 ^ y__h3281,
	       fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 } ;
  assign fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d212 =
	     { x__h18159 ^ y__h18160,
	       x__h17973 ^ y__h17974,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d211 } ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d135 =
	     fp_a[30] ^ y__h17035 ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d213 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d135 ^
	       y__h18532,
	       x__h18345 ^ y__h18346,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d212 } ;
  assign fp_a_BIT_31_01_EQ_fp_b_BIT_31_02___d103 = fp_a[31] == fp_b[31] ;
  assign got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 =
	     got_A && got_B && operands_swapped_if_needed &&
	     expdiff_calculated ;
  assign temp_sum_19_BIT_26_25_XOR_temp_sum_19_BIT_25_21___d323 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_25___d272 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_2_ETC___d322 =
	     temp_sum[27] ^ y__h11365 ;
  assign temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d271 =
	     temp_sum[28] ^ y__h6086 ;
  assign temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d321 =
	     temp_sum[28] ^ y__h11551 ;
  assign temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d270 =
	     temp_sum[29] ^ y__h6272 ;
  assign temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d320 =
	     temp_sum[29] ^ y__h11737 ;
  assign temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d339 =
	     { temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d320,
	       temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d321,
	       temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_2_ETC___d322,
	       temp_sum_19_BIT_26_25_XOR_temp_sum_19_BIT_25_21___d323,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q7[0] } ;
  assign temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d269 =
	     temp_sum[30] ^ y__h6458 ;
  assign temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d288 =
	     { temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d269,
	       temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d270,
	       temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d271,
	       temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_25___d272,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d319 =
	     temp_sum[30] ^ y__h11923 ;
  assign temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d268 =
	     temp_sum[31] ^ y__h6644 ;
  assign temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d318 =
	     temp_sum[31] ^ y__h12109 ;
  assign temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d267 =
	     temp_sum[32] ^ y__h6830 ;
  assign temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d317 =
	     temp_sum[32] ^ y__h12295 ;
  assign temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d266 =
	     temp_sum[33] ^ y__h7016 ;
  assign temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d316 =
	     temp_sum[33] ^ y__h12481 ;
  assign temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d265 =
	     temp_sum[34] ^ y__h7202 ;
  assign temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d315 =
	     temp_sum[34] ^ y__h12667 ;
  assign temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d264 =
	     temp_sum[35] ^ y__h7388 ;
  assign temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d314 =
	     temp_sum[35] ^ y__h12853 ;
  assign temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d263 =
	     temp_sum[36] ^ y__h7574 ;
  assign temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d313 =
	     temp_sum[36] ^ y__h13039 ;
  assign temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d262 =
	     temp_sum[37] ^ y__h7760 ;
  assign temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d312 =
	     temp_sum[37] ^ y__h13225 ;
  assign temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d261 =
	     temp_sum[38] ^ y__h7946 ;
  assign temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d311 =
	     temp_sum[38] ^ y__h13411 ;
  assign temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d260 =
	     temp_sum[39] ^ y__h8132 ;
  assign temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d310 =
	     temp_sum[39] ^ y__h13597 ;
  assign temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d259 =
	     temp_sum[40] ^ y__h8318 ;
  assign temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d309 =
	     temp_sum[40] ^ y__h13783 ;
  assign temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d258 =
	     temp_sum[41] ^ y__h8504 ;
  assign temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d308 =
	     temp_sum[41] ^ y__h13969 ;
  assign temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d257 =
	     temp_sum[42] ^ y__h8690 ;
  assign temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d307 =
	     temp_sum[42] ^ y__h14155 ;
  assign temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d256 =
	     temp_sum[43] ^ y__h8876 ;
  assign temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d306 =
	     temp_sum[43] ^ y__h14341 ;
  assign temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d255 =
	     temp_sum[44] ^ y__h9062 ;
  assign temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d305 =
	     temp_sum[44] ^ y__h14527 ;
  assign temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d254 =
	     temp_sum[45] ^ y__h9248 ;
  assign temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d304 =
	     temp_sum[45] ^ y__h14713 ;
  assign temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d253 =
	     temp_sum[46] ^ y__h9434 ;
  assign temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d303 =
	     temp_sum[46] ^ y__h14899 ;
  assign temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d252 =
	     temp_sum[47] ^ y__h9620 ;
  assign temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d302 =
	     temp_sum[47] ^ y__h15085 ;
  assign temp_sum_19_BIT_48_49_XOR_temp_sum_19_BIT_47_5_ETC___d251 =
	     temp_sum[48] ^ y__h9806 ;
  assign temp_sum_19_BIT_49_20_AND_temp_sum_19_BIT_48_4_ETC___d193 =
	     temp_sum[49] & y__h9992 ;
  assign temp_sum_19_BIT_49_20_XOR_temp_sum_19_BIT_48_4_ETC___d245 =
	     temp_sum[49] ^ y__h15457 ;
  assign x__h10360 =
	     { temp_sum[49] ^ y__h9992,
	       temp_sum_19_BIT_48_49_XOR_temp_sum_19_BIT_47_5_ETC___d251,
	       temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d252,
	       temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d253,
	       temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d254,
	       temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d255,
	       temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d256,
	       temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d257,
	       temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d258,
	       temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d259,
	       temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d260,
	       temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d261,
	       temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d262,
	       temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d263,
	       temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d264,
	       temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d265,
	       temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d266,
	       temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d267,
	       temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d268,
	       temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d269,
	       temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d270,
	       temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d271,
	       temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_25___d272 } ;
  assign x__h10383 =
	     { temp_sum_19_BIT_48_49_XOR_temp_sum_19_BIT_47_5_ETC___d251,
	       temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d252,
	       temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d253,
	       temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d254,
	       temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d255,
	       temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d256,
	       temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d257,
	       temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d258,
	       temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d259,
	       temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d260,
	       temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d261,
	       temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d262,
	       temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d263,
	       temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d264,
	       temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d265,
	       temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d266,
	       temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d267,
	       temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d268,
	       temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d288 } ;
  assign x__h15639 =
	     { temp_sum[48] ^ y__h15271,
	       temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d302,
	       temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d303,
	       temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d304,
	       temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d305,
	       temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d306,
	       temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d307,
	       temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d308,
	       temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d309,
	       temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d310,
	       temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d311,
	       temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d312,
	       temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d313,
	       temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d314,
	       temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d315,
	       temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d316,
	       temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d317,
	       temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d318,
	       temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d319,
	       temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d320,
	       temp_sum_19_BIT_28_69_XOR_temp_sum_19_BIT_27_7_ETC___d321,
	       temp_sum_19_BIT_27_70_XOR_temp_sum_19_BIT_26_2_ETC___d322,
	       temp_sum_19_BIT_26_25_XOR_temp_sum_19_BIT_25_21___d323 } ;
  assign x__h15662 =
	     { temp_sum_19_BIT_47_50_XOR_temp_sum_19_BIT_46_5_ETC___d302,
	       temp_sum_19_BIT_46_51_XOR_temp_sum_19_BIT_45_5_ETC___d303,
	       temp_sum_19_BIT_45_52_XOR_temp_sum_19_BIT_44_5_ETC___d304,
	       temp_sum_19_BIT_44_53_XOR_temp_sum_19_BIT_43_5_ETC___d305,
	       temp_sum_19_BIT_43_54_XOR_temp_sum_19_BIT_42_5_ETC___d306,
	       temp_sum_19_BIT_42_55_XOR_temp_sum_19_BIT_41_5_ETC___d307,
	       temp_sum_19_BIT_41_56_XOR_temp_sum_19_BIT_40_5_ETC___d308,
	       temp_sum_19_BIT_40_57_XOR_temp_sum_19_BIT_39_5_ETC___d309,
	       temp_sum_19_BIT_39_58_XOR_temp_sum_19_BIT_38_5_ETC___d310,
	       temp_sum_19_BIT_38_59_XOR_temp_sum_19_BIT_37_6_ETC___d311,
	       temp_sum_19_BIT_37_60_XOR_temp_sum_19_BIT_36_6_ETC___d312,
	       temp_sum_19_BIT_36_61_XOR_temp_sum_19_BIT_35_6_ETC___d313,
	       temp_sum_19_BIT_35_62_XOR_temp_sum_19_BIT_34_6_ETC___d314,
	       temp_sum_19_BIT_34_63_XOR_temp_sum_19_BIT_33_6_ETC___d315,
	       temp_sum_19_BIT_33_64_XOR_temp_sum_19_BIT_32_6_ETC___d316,
	       temp_sum_19_BIT_32_65_XOR_temp_sum_19_BIT_31_6_ETC___d317,
	       temp_sum_19_BIT_31_66_XOR_temp_sum_19_BIT_30_6_ETC___d318,
	       temp_sum_19_BIT_30_67_XOR_temp_sum_19_BIT_29_6_ETC___d319,
	       temp_sum_19_BIT_29_68_XOR_temp_sum_19_BIT_28_6_ETC___d339 } ;
  assign x__h15708 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h15711 :
	       _theResult___snd_fst__h18710 ;
  assign x__h17475 = fp_a[24] ^ fp_a[23] ;
  assign x__h17601 = fp_a[25] ^ y__h16105 ;
  assign x__h17787 = fp_a[26] ^ y__h16291 ;
  assign x__h17973 = fp_a[27] ^ y__h16477 ;
  assign x__h18159 = fp_a[28] ^ y__h16663 ;
  assign x__h18345 = fp_a[29] ^ y__h16849 ;
  assign x__h2781 = fp_a[24] ^ y__h2784 ;
  assign x__h2908 = fp_a[25] ^ y__h2911 ;
  assign x__h2965 = fp_a[24] & y__h2784 ;
  assign x__h3094 = fp_a[26] ^ y__h3097 ;
  assign x__h3151 = fp_a[25] & y__h2911 ;
  assign x__h3280 = fp_a[27] ^ y__h3283 ;
  assign x__h3337 = fp_a[26] & y__h3097 ;
  assign x__h3466 = fp_a[28] ^ y__h3469 ;
  assign x__h3523 = fp_a[27] & y__h3283 ;
  assign x__h3652 = fp_a[29] ^ y__h3655 ;
  assign x__h3709 = fp_a[28] & y__h3469 ;
  assign x__h3838 = fp_a[30] ^ y__h3841 ;
  assign x__h3895 = fp_a[29] & y__h3655 ;
  assign y__h11365 = temp_sum[26] & temp_sum[25] ;
  assign y__h11551 = temp_sum[27] & y__h11365 ;
  assign y__h11737 = temp_sum[28] & y__h11551 ;
  assign y__h11923 = temp_sum[29] & y__h11737 ;
  assign y__h12109 = temp_sum[30] & y__h11923 ;
  assign y__h12295 = temp_sum[31] & y__h12109 ;
  assign y__h12481 = temp_sum[32] & y__h12295 ;
  assign y__h12667 = temp_sum[33] & y__h12481 ;
  assign y__h12853 = temp_sum[34] & y__h12667 ;
  assign y__h13039 = temp_sum[35] & y__h12853 ;
  assign y__h13225 = temp_sum[36] & y__h13039 ;
  assign y__h13411 = temp_sum[37] & y__h13225 ;
  assign y__h13597 = temp_sum[38] & y__h13411 ;
  assign y__h13783 = temp_sum[39] & y__h13597 ;
  assign y__h13969 = temp_sum[40] & y__h13783 ;
  assign y__h14155 = temp_sum[41] & y__h13969 ;
  assign y__h14341 = temp_sum[42] & y__h14155 ;
  assign y__h14527 = temp_sum[43] & y__h14341 ;
  assign y__h14713 = temp_sum[44] & y__h14527 ;
  assign y__h14899 = temp_sum[45] & y__h14713 ;
  assign y__h15085 = temp_sum[46] & y__h14899 ;
  assign y__h15271 = temp_sum[47] & y__h15085 ;
  assign y__h15457 = temp_sum[48] & y__h15271 ;
  assign y__h16105 = fp_a[24] & fp_a[23] ;
  assign y__h1624 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h16291 = fp_a[25] & y__h16105 ;
  assign y__h16477 = fp_a[26] & y__h16291 ;
  assign y__h16663 = fp_a[27] & y__h16477 ;
  assign y__h16849 = fp_a[28] & y__h16663 ;
  assign y__h17035 = fp_a[29] & y__h16849 ;
  assign y__h17602 = x__h17475 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h17788 = x__h17601 & y__h17602 ;
  assign y__h17974 = x__h17787 & y__h17788 ;
  assign y__h1813 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h1624 ;
  assign y__h18160 = x__h17973 & y__h17974 ;
  assign y__h18346 = x__h18159 & y__h18160 ;
  assign y__h18532 = x__h18345 & y__h18346 ;
  assign y__h2002 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h1813 ;
  assign y__h2191 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h2002 ;
  assign y__h2380 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h2191 ;
  assign y__h2569 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h2380 ;
  assign y__h2782 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h2784 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h2909 = x__h2965 | y__h2966 ;
  assign y__h2911 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h1624 ;
  assign y__h2966 = x__h2781 & y__h2782 ;
  assign y__h3095 = x__h3151 | y__h3152 ;
  assign y__h3097 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h1813 ;
  assign y__h3152 = x__h2908 & y__h2909 ;
  assign y__h3281 = x__h3337 | y__h3338 ;
  assign y__h3283 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h2002 ;
  assign y__h3338 = x__h3094 & y__h3095 ;
  assign y__h3467 = x__h3523 | y__h3524 ;
  assign y__h3469 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h2191 ;
  assign y__h3524 = x__h3280 & y__h3281 ;
  assign y__h3653 = x__h3709 | y__h3710 ;
  assign y__h3655 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h2380 ;
  assign y__h3710 = x__h3466 & y__h3467 ;
  assign y__h3839 = x__h3895 | y__h3896 ;
  assign y__h3841 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h2569 ;
  assign y__h3896 = x__h3652 & y__h3653 ;
  assign y__h6086 = temp_sum[27] & temp_sum[26] ;
  assign y__h6272 = temp_sum[28] & y__h6086 ;
  assign y__h6458 = temp_sum[29] & y__h6272 ;
  assign y__h6644 = temp_sum[30] & y__h6458 ;
  assign y__h6830 = temp_sum[31] & y__h6644 ;
  assign y__h7016 = temp_sum[32] & y__h6830 ;
  assign y__h7202 = temp_sum[33] & y__h7016 ;
  assign y__h7388 = temp_sum[34] & y__h7202 ;
  assign y__h7574 = temp_sum[35] & y__h7388 ;
  assign y__h7760 = temp_sum[36] & y__h7574 ;
  assign y__h7946 = temp_sum[37] & y__h7760 ;
  assign y__h8132 = temp_sum[38] & y__h7946 ;
  assign y__h8318 = temp_sum[39] & y__h8132 ;
  assign y__h8504 = temp_sum[40] & y__h8318 ;
  assign y__h8690 = temp_sum[41] & y__h8504 ;
  assign y__h8876 = temp_sum[42] & y__h8690 ;
  assign y__h9062 = temp_sum[43] & y__h8876 ;
  assign y__h9248 = temp_sum[44] & y__h9062 ;
  assign y__h9434 = temp_sum[45] & y__h9248 ;
  assign y__h9620 = temp_sum[46] & y__h9434 ;
  assign y__h9806 = temp_sum[47] & y__h9620 ;
  assign y__h9992 = temp_sum[48] & y__h9806 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    assembled_answer = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    operands_swapped_if_needed = 1'h0;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

