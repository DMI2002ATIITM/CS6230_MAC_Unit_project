//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Oct 13 23:00:12 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// RDY_get_S1_or_S2               O     1
// output_MAC                     O    32 reg
// RDY_output_MAC                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32 reg
// get_S1_or_S2_s1_or_s2          I     1 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_get_S1_or_S2                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC_int32(CLK,
		   RST_N,

		   get_A_a,
		   EN_get_A,
		   RDY_get_A,

		   get_B_b,
		   EN_get_B,
		   RDY_get_B,

		   get_C_c,
		   EN_get_C,
		   RDY_get_C,

		   get_S1_or_S2_s1_or_s2,
		   EN_get_S1_or_S2,
		   RDY_get_S1_or_S2,

		   output_MAC,
		   RDY_output_MAC);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // action method get_S1_or_S2
  input  get_S1_or_S2_s1_or_s2;
  input  EN_get_S1_or_S2;
  output RDY_get_S1_or_S2;

  // value method output_MAC
  output [31 : 0] output_MAC;
  output RDY_output_MAC;

  // signals for module outputs
  wire [31 : 0] output_MAC;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_S1_or_S2, RDY_output_MAC;

  // register add_completed
  reg add_completed;
  wire add_completed_D_IN, add_completed_EN;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count_D_IN;
  wire count_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_s1_or_s2
  reg got_s1_or_s2;
  wire got_s1_or_s2_D_IN, got_s1_or_s2_EN;

  // register mac_completed
  reg mac_completed;
  wire mac_completed_D_IN, mac_completed_EN;

  // register mul_completed
  reg mul_completed;
  wire mul_completed_D_IN, mul_completed_EN;

  // register partial_store
  reg [15 : 0] partial_store;
  wire [15 : 0] partial_store_D_IN;
  wire partial_store_EN;

  // register reset_completed
  reg reset_completed;
  wire reset_completed_D_IN, reset_completed_EN;

  // register rg_A
  reg [15 : 0] rg_A;
  wire [15 : 0] rg_A_D_IN;
  wire rg_A_EN;

  // register rg_B
  reg [15 : 0] rg_B;
  wire [15 : 0] rg_B_D_IN;
  wire rg_B_EN;

  // register rg_C
  reg [31 : 0] rg_C;
  wire [31 : 0] rg_C_D_IN;
  wire rg_C_EN;

  // register rg_MAC
  reg [31 : 0] rg_MAC;
  wire [31 : 0] rg_MAC_D_IN;
  wire rg_MAC_EN;

  // register rg_S1_or_S2
  reg rg_S1_or_S2;
  wire rg_S1_or_S2_D_IN, rg_S1_or_S2_EN;

  // register rg_temp
  reg [31 : 0] rg_temp;
  wire [31 : 0] rg_temp_D_IN;
  wire rg_temp_EN;

  // register start
  reg start;
  wire start_D_IN, start_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_mul_done,
       CAN_FIRE_RL_reset,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_RL_windup,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_get_S1_or_S2,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_mul_done,
       WILL_FIRE_RL_reset,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_RL_windup,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_get_S1_or_S2;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_partial_store_write_1__VAL_1,
		MUX_rg_A_write_1__VAL_2,
		MUX_rg_B_write_1__VAL_2;
  wire [4 : 0] MUX_count_write_1__VAL_2;
  wire MUX_partial_store_write_1__SEL_1;

  // remaining internal signals
  wire [31 : 0] IF_rg_temp_BIT_0_XOR_rg_C_BIT_0_THEN_1_ELSE_0__q5;
  wire [29 : 0] rg_temp_86_BIT_29_95_XOR_rg_C_88_BIT_29_96_98__ETC___d522;
  wire [27 : 0] rg_temp_86_BIT_27_03_XOR_rg_C_88_BIT_27_04_06__ETC___d521;
  wire [25 : 0] rg_temp_86_BIT_25_11_XOR_rg_C_88_BIT_25_12_14__ETC___d520;
  wire [23 : 0] rg_temp_86_BIT_23_19_XOR_rg_C_88_BIT_23_20_22__ETC___d519;
  wire [21 : 0] rg_temp_86_BIT_21_27_XOR_rg_C_88_BIT_21_28_30__ETC___d518;
  wire [19 : 0] rg_temp_86_BIT_19_35_XOR_rg_C_88_BIT_19_36_38__ETC___d517;
  wire [17 : 0] rg_temp_86_BIT_17_43_XOR_rg_C_88_BIT_17_44_46__ETC___d516;
  wire [15 : 0] IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2,
		IF_partial_store_BIT_0_XOR_IF_INV_INV_rg_A_BIT_ETC__q3,
		IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q4,
		INV_rg_A__q1,
		rg_temp_86_BIT_15_51_XOR_rg_C_88_BIT_15_52_54__ETC___d515,
		x__h7192,
		x__h723;
  wire [13 : 0] partial_store_7_BIT_13_7_XOR_INV_rg_A_9_0_BIT__ETC___d166,
		partial_store_7_BIT_13_7_XOR_rg_A_9_BIT_13_73__ETC___d266,
		rg_temp_86_BIT_13_59_XOR_rg_C_88_BIT_13_60_62__ETC___d514;
  wire [11 : 0] partial_store_7_BIT_11_5_XOR_INV_rg_A_9_0_BIT__ETC___d165,
		partial_store_7_BIT_11_5_XOR_rg_A_9_BIT_11_79__ETC___d265,
		rg_temp_86_BIT_11_67_XOR_rg_C_88_BIT_11_68_70__ETC___d513;
  wire [9 : 0] partial_store_7_BIT_9_3_XOR_INV_rg_A_9_0_BIT_9_ETC___d164,
	       partial_store_7_BIT_9_3_XOR_rg_A_9_BIT_9_85_87_ETC___d264,
	       rg_temp_86_BIT_9_75_XOR_rg_C_88_BIT_9_76_78_XO_ETC___d512;
  wire [7 : 0] partial_store_7_BIT_7_1_XOR_INV_rg_A_9_0_BIT_7_ETC___d163,
	       partial_store_7_BIT_7_1_XOR_rg_A_9_BIT_7_91_93_ETC___d263,
	       rg_temp_86_BIT_7_83_XOR_rg_C_88_BIT_7_84_86_XO_ETC___d511;
  wire [5 : 0] partial_store_7_BIT_5_9_XOR_INV_rg_A_9_0_BIT_5_ETC___d162,
	       partial_store_7_BIT_5_9_XOR_rg_A_9_BIT_5_97_99_ETC___d262,
	       rg_temp_86_BIT_5_91_XOR_rg_C_88_BIT_5_92_94_XO_ETC___d510;
  wire [3 : 0] partial_store_7_BIT_3_7_XOR_INV_rg_A_9_0_BIT_3_ETC___d161,
	       partial_store_7_BIT_3_7_XOR_rg_A_9_BIT_3_03_05_ETC___d261,
	       rg_temp_86_BIT_3_99_XOR_rg_C_88_BIT_3_00_02_XO_ETC___d509;
  wire [1 : 0] partial_store_7_BIT_1_05_XOR_INV_rg_A_9_0_BIT__ETC___d160,
	       partial_store_7_BIT_1_05_XOR_rg_A_9_BIT_1_09_1_ETC___d260,
	       rg_temp_86_BIT_1_07_XOR_rg_C_88_BIT_1_08_10_XO_ETC___d508;
  wire x__h10008,
       x__h10153,
       x__h10200,
       x__h10286,
       x__h10345,
       x__h10392,
       x__h11806,
       x__h11853,
       x__h11998,
       x__h12045,
       x__h12190,
       x__h12237,
       x__h12382,
       x__h12429,
       x__h12574,
       x__h12621,
       x__h12766,
       x__h12813,
       x__h12958,
       x__h13005,
       x__h13150,
       x__h13197,
       x__h13342,
       x__h13389,
       x__h13534,
       x__h13581,
       x__h13726,
       x__h13773,
       x__h13918,
       x__h13965,
       x__h14110,
       x__h14157,
       x__h14302,
       x__h14349,
       x__h14494,
       x__h14541,
       x__h14686,
       x__h14733,
       x__h14878,
       x__h14925,
       x__h15070,
       x__h15117,
       x__h15262,
       x__h15309,
       x__h15454,
       x__h15501,
       x__h15646,
       x__h15693,
       x__h15838,
       x__h15885,
       x__h16030,
       x__h16077,
       x__h16222,
       x__h16269,
       x__h16414,
       x__h16461,
       x__h16606,
       x__h16653,
       x__h16798,
       x__h16845,
       x__h16990,
       x__h17037,
       x__h17182,
       x__h17229,
       x__h17315,
       x__h17374,
       x__h17421,
       x__h4411,
       x__h4539,
       x__h4597,
       x__h4728,
       x__h4786,
       x__h4917,
       x__h4975,
       x__h5106,
       x__h5164,
       x__h5295,
       x__h5353,
       x__h5484,
       x__h5542,
       x__h5673,
       x__h5731,
       x__h5862,
       x__h5920,
       x__h6051,
       x__h6109,
       x__h6240,
       x__h6298,
       x__h6429,
       x__h6487,
       x__h6618,
       x__h6676,
       x__h6807,
       x__h6865,
       x__h6996,
       x__h7054,
       x__h7849,
       x__h7896,
       x__h8041,
       x__h8088,
       x__h8233,
       x__h8280,
       x__h8425,
       x__h8472,
       x__h8617,
       x__h8664,
       x__h8809,
       x__h8856,
       x__h9001,
       x__h9048,
       x__h9193,
       x__h9240,
       x__h9385,
       x__h9432,
       x__h9577,
       x__h9624,
       x__h9769,
       x__h9816,
       x__h9961,
       y__h10095,
       y__h10154,
       y__h10287,
       y__h10346,
       y__h11748,
       y__h11807,
       y__h11854,
       y__h11940,
       y__h11999,
       y__h12132,
       y__h12191,
       y__h12324,
       y__h12383,
       y__h12516,
       y__h12575,
       y__h12708,
       y__h12767,
       y__h12900,
       y__h12959,
       y__h13092,
       y__h13151,
       y__h13284,
       y__h13343,
       y__h13476,
       y__h13535,
       y__h13668,
       y__h13727,
       y__h13860,
       y__h13919,
       y__h14052,
       y__h14111,
       y__h14244,
       y__h14303,
       y__h14436,
       y__h14495,
       y__h14628,
       y__h14687,
       y__h14820,
       y__h14879,
       y__h15012,
       y__h15071,
       y__h15204,
       y__h15263,
       y__h15396,
       y__h15455,
       y__h15588,
       y__h15647,
       y__h15780,
       y__h15839,
       y__h15972,
       y__h16031,
       y__h16164,
       y__h16223,
       y__h16356,
       y__h16415,
       y__h16548,
       y__h16607,
       y__h16740,
       y__h16799,
       y__h16932,
       y__h16991,
       y__h17124,
       y__h17183,
       y__h17316,
       y__h17375,
       y__h1742,
       y__h1931,
       y__h2120,
       y__h2309,
       y__h2498,
       y__h2687,
       y__h2876,
       y__h3065,
       y__h3254,
       y__h3443,
       y__h3632,
       y__h3821,
       y__h4010,
       y__h4199,
       y__h4412,
       y__h4414,
       y__h4540,
       y__h4542,
       y__h4598,
       y__h4729,
       y__h4731,
       y__h4787,
       y__h4918,
       y__h4920,
       y__h4976,
       y__h5107,
       y__h5109,
       y__h5165,
       y__h5296,
       y__h5298,
       y__h5354,
       y__h5485,
       y__h5487,
       y__h5543,
       y__h5674,
       y__h5676,
       y__h5732,
       y__h5863,
       y__h5865,
       y__h5921,
       y__h6052,
       y__h6054,
       y__h6110,
       y__h6241,
       y__h6243,
       y__h6299,
       y__h6430,
       y__h6432,
       y__h6488,
       y__h6619,
       y__h6621,
       y__h6677,
       y__h6808,
       y__h6810,
       y__h6866,
       y__h6997,
       y__h6999,
       y__h7055,
       y__h7791,
       y__h7850,
       y__h7897,
       y__h7983,
       y__h8042,
       y__h8175,
       y__h8234,
       y__h8367,
       y__h8426,
       y__h8559,
       y__h8618,
       y__h8751,
       y__h8810,
       y__h8943,
       y__h9002,
       y__h9135,
       y__h9194,
       y__h9327,
       y__h9386,
       y__h9519,
       y__h9578,
       y__h9711,
       y__h9770,
       y__h9903,
       y__h9962;

  // action method get_A
  assign RDY_get_A =
	     !got_A && !mul_completed && !add_completed && !mac_completed ;
  assign CAN_FIRE_get_A =
	     !got_A && !mul_completed && !add_completed && !mac_completed ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B =
	     !got_B && !mul_completed && !add_completed && !mac_completed ;
  assign CAN_FIRE_get_B =
	     !got_B && !mul_completed && !add_completed && !mac_completed ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C =
	     !got_C && !mul_completed && !add_completed && !mac_completed ;
  assign CAN_FIRE_get_C =
	     !got_C && !mul_completed && !add_completed && !mac_completed ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // action method get_S1_or_S2
  assign RDY_get_S1_or_S2 =
	     !got_s1_or_s2 && !mul_completed && !add_completed &&
	     !mac_completed ;
  assign CAN_FIRE_get_S1_or_S2 =
	     !got_s1_or_s2 && !mul_completed && !add_completed &&
	     !mac_completed ;
  assign WILL_FIRE_get_S1_or_S2 = EN_get_S1_or_S2 ;

  // value method output_MAC
  assign output_MAC = rg_MAC ;
  assign RDY_output_MAC = mac_completed ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     got_A && got_B && got_C && got_s1_or_s2 && count != 5'd0 &&
	     reset_completed ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_mul_done
  assign CAN_FIRE_RL_mul_done =
	     count == 5'd0 && !mul_completed && !add_completed &&
	     !mac_completed ;
  assign WILL_FIRE_RL_mul_done = CAN_FIRE_RL_mul_done ;

  // rule RL_add
  assign CAN_FIRE_RL_add = mul_completed && !add_completed && !mac_completed ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_windup
  assign CAN_FIRE_RL_windup = add_completed && !mac_completed ;
  assign WILL_FIRE_RL_windup = CAN_FIRE_RL_windup ;

  // rule RL_reset
  assign CAN_FIRE_RL_reset = mac_completed ;
  assign WILL_FIRE_RL_reset = mac_completed ;

  // inputs to muxes for submodule ports
  assign MUX_partial_store_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_multiply && rg_B[0] ;
  assign MUX_count_write_1__VAL_2 = count - 5'd1 ;
  assign MUX_partial_store_write_1__VAL_1 =
	     (count == 5'd1) ? x__h723 : x__h7192 ;
  assign MUX_rg_A_write_1__VAL_2 = { rg_A[14:0], 1'd0 } ;
  assign MUX_rg_B_write_1__VAL_2 = { 1'd0, rg_B[15:1] } ;

  // register add_completed
  assign add_completed_D_IN = !WILL_FIRE_RL_windup ;
  assign add_completed_EN = WILL_FIRE_RL_windup || WILL_FIRE_RL_add ;

  // register count
  assign count_D_IN = WILL_FIRE_RL_windup ? 5'd9 : MUX_count_write_1__VAL_2 ;
  assign count_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_windup ;

  // register got_A
  assign got_A_D_IN = !mac_completed ;
  assign got_A_EN = mac_completed || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !mac_completed ;
  assign got_B_EN = mac_completed || EN_get_B ;

  // register got_C
  assign got_C_D_IN = !mac_completed ;
  assign got_C_EN = mac_completed || EN_get_C ;

  // register got_s1_or_s2
  assign got_s1_or_s2_D_IN = !mac_completed ;
  assign got_s1_or_s2_EN = mac_completed || EN_get_S1_or_S2 ;

  // register mac_completed
  assign mac_completed_D_IN = !mac_completed ;
  assign mac_completed_EN = mac_completed || WILL_FIRE_RL_windup ;

  // register mul_completed
  assign mul_completed_D_IN = !WILL_FIRE_RL_add ;
  assign mul_completed_EN = WILL_FIRE_RL_add || WILL_FIRE_RL_mul_done ;

  // register partial_store
  assign partial_store_D_IN =
	     MUX_partial_store_write_1__SEL_1 ?
	       MUX_partial_store_write_1__VAL_1 :
	       16'd0 ;
  assign partial_store_EN =
	     WILL_FIRE_RL_rl_multiply && rg_B[0] || WILL_FIRE_RL_mul_done ;

  // register reset_completed
  assign reset_completed_D_IN = !WILL_FIRE_RL_mul_done ;
  assign reset_completed_EN = WILL_FIRE_RL_mul_done || mac_completed ;

  // register rg_A
  assign rg_A_D_IN = EN_get_A ? get_A_a : MUX_rg_A_write_1__VAL_2 ;
  assign rg_A_EN = EN_get_A || WILL_FIRE_RL_rl_multiply ;

  // register rg_B
  assign rg_B_D_IN = EN_get_B ? get_B_b : MUX_rg_B_write_1__VAL_2 ;
  assign rg_B_EN = EN_get_B || WILL_FIRE_RL_rl_multiply ;

  // register rg_C
  assign rg_C_D_IN = get_C_c ;
  assign rg_C_EN = EN_get_C ;

  // register rg_MAC
  assign rg_MAC_D_IN =
	     { x__h17315 ^ y__h17316,
	       x__h17421 ^ y__h17124,
	       rg_temp_86_BIT_29_95_XOR_rg_C_88_BIT_29_96_98__ETC___d522 } ;
  assign rg_MAC_EN = CAN_FIRE_RL_add ;

  // register rg_S1_or_S2
  assign rg_S1_or_S2_D_IN = get_S1_or_S2_s1_or_s2 ;
  assign rg_S1_or_S2_EN = EN_get_S1_or_S2 ;

  // register rg_temp
  assign rg_temp_D_IN = { {16{partial_store[15]}}, partial_store } ;
  assign rg_temp_EN = CAN_FIRE_RL_mul_done ;

  // register start
  assign start_D_IN = 1'b0 ;
  assign start_EN = 1'b0 ;

  // remaining internal signals
  assign IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_rg_A__q1[0]) ? 16'd1 : 16'd0 ;
  assign IF_partial_store_BIT_0_XOR_IF_INV_INV_rg_A_BIT_ETC__q3 =
	     (partial_store[0] ^ IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       16'd1 :
	       16'd0 ;
  assign IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q4 =
	     (partial_store[0] ^ rg_A[0]) ? 16'd1 : 16'd0 ;
  assign IF_rg_temp_BIT_0_XOR_rg_C_BIT_0_THEN_1_ELSE_0__q5 =
	     (rg_temp[0] ^ rg_C[0]) ? 32'd1 : 32'd0 ;
  assign INV_rg_A__q1 = ~rg_A ;
  assign partial_store_7_BIT_11_5_XOR_INV_rg_A_9_0_BIT__ETC___d165 =
	     { x__h6240 ^ y__h6241,
	       x__h6051 ^ y__h6052,
	       partial_store_7_BIT_9_3_XOR_INV_rg_A_9_0_BIT_9_ETC___d164 } ;
  assign partial_store_7_BIT_11_5_XOR_rg_A_9_BIT_11_79__ETC___d265 =
	     { x__h9816 ^ y__h9519,
	       x__h9624 ^ y__h9327,
	       partial_store_7_BIT_9_3_XOR_rg_A_9_BIT_9_85_87_ETC___d264 } ;
  assign partial_store_7_BIT_13_7_XOR_INV_rg_A_9_0_BIT__ETC___d166 =
	     { x__h6618 ^ y__h6619,
	       x__h6429 ^ y__h6430,
	       partial_store_7_BIT_11_5_XOR_INV_rg_A_9_0_BIT__ETC___d165 } ;
  assign partial_store_7_BIT_13_7_XOR_rg_A_9_BIT_13_73__ETC___d266 =
	     { x__h10200 ^ y__h9903,
	       x__h10008 ^ y__h9711,
	       partial_store_7_BIT_11_5_XOR_rg_A_9_BIT_11_79__ETC___d265 } ;
  assign partial_store_7_BIT_1_05_XOR_INV_rg_A_9_0_BIT__ETC___d160 =
	     { x__h4411 ^ y__h4412,
	       IF_partial_store_BIT_0_XOR_IF_INV_INV_rg_A_BIT_ETC__q3[0] } ;
  assign partial_store_7_BIT_1_05_XOR_rg_A_9_BIT_1_09_1_ETC___d260 =
	     { x__h7896 ^ y__h7897,
	       IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q4[0] } ;
  assign partial_store_7_BIT_3_7_XOR_INV_rg_A_9_0_BIT_3_ETC___d161 =
	     { x__h4728 ^ y__h4729,
	       x__h4539 ^ y__h4540,
	       partial_store_7_BIT_1_05_XOR_INV_rg_A_9_0_BIT__ETC___d160 } ;
  assign partial_store_7_BIT_3_7_XOR_rg_A_9_BIT_3_03_05_ETC___d261 =
	     { x__h8280 ^ y__h7983,
	       x__h8088 ^ y__h7791,
	       partial_store_7_BIT_1_05_XOR_rg_A_9_BIT_1_09_1_ETC___d260 } ;
  assign partial_store_7_BIT_5_9_XOR_INV_rg_A_9_0_BIT_5_ETC___d162 =
	     { x__h5106 ^ y__h5107,
	       x__h4917 ^ y__h4918,
	       partial_store_7_BIT_3_7_XOR_INV_rg_A_9_0_BIT_3_ETC___d161 } ;
  assign partial_store_7_BIT_5_9_XOR_rg_A_9_BIT_5_97_99_ETC___d262 =
	     { x__h8664 ^ y__h8367,
	       x__h8472 ^ y__h8175,
	       partial_store_7_BIT_3_7_XOR_rg_A_9_BIT_3_03_05_ETC___d261 } ;
  assign partial_store_7_BIT_7_1_XOR_INV_rg_A_9_0_BIT_7_ETC___d163 =
	     { x__h5484 ^ y__h5485,
	       x__h5295 ^ y__h5296,
	       partial_store_7_BIT_5_9_XOR_INV_rg_A_9_0_BIT_5_ETC___d162 } ;
  assign partial_store_7_BIT_7_1_XOR_rg_A_9_BIT_7_91_93_ETC___d263 =
	     { x__h9048 ^ y__h8751,
	       x__h8856 ^ y__h8559,
	       partial_store_7_BIT_5_9_XOR_rg_A_9_BIT_5_97_99_ETC___d262 } ;
  assign partial_store_7_BIT_9_3_XOR_INV_rg_A_9_0_BIT_9_ETC___d164 =
	     { x__h5862 ^ y__h5863,
	       x__h5673 ^ y__h5674,
	       partial_store_7_BIT_7_1_XOR_INV_rg_A_9_0_BIT_7_ETC___d163 } ;
  assign partial_store_7_BIT_9_3_XOR_rg_A_9_BIT_9_85_87_ETC___d264 =
	     { x__h9432 ^ y__h9135,
	       x__h9240 ^ y__h8943,
	       partial_store_7_BIT_7_1_XOR_rg_A_9_BIT_7_91_93_ETC___d263 } ;
  assign rg_temp_86_BIT_11_67_XOR_rg_C_88_BIT_11_68_70__ETC___d513 =
	     { x__h13773 ^ y__h13476,
	       x__h13581 ^ y__h13284,
	       rg_temp_86_BIT_9_75_XOR_rg_C_88_BIT_9_76_78_XO_ETC___d512 } ;
  assign rg_temp_86_BIT_13_59_XOR_rg_C_88_BIT_13_60_62__ETC___d514 =
	     { x__h14157 ^ y__h13860,
	       x__h13965 ^ y__h13668,
	       rg_temp_86_BIT_11_67_XOR_rg_C_88_BIT_11_68_70__ETC___d513 } ;
  assign rg_temp_86_BIT_15_51_XOR_rg_C_88_BIT_15_52_54__ETC___d515 =
	     { x__h14541 ^ y__h14244,
	       x__h14349 ^ y__h14052,
	       rg_temp_86_BIT_13_59_XOR_rg_C_88_BIT_13_60_62__ETC___d514 } ;
  assign rg_temp_86_BIT_17_43_XOR_rg_C_88_BIT_17_44_46__ETC___d516 =
	     { x__h14925 ^ y__h14628,
	       x__h14733 ^ y__h14436,
	       rg_temp_86_BIT_15_51_XOR_rg_C_88_BIT_15_52_54__ETC___d515 } ;
  assign rg_temp_86_BIT_19_35_XOR_rg_C_88_BIT_19_36_38__ETC___d517 =
	     { x__h15309 ^ y__h15012,
	       x__h15117 ^ y__h14820,
	       rg_temp_86_BIT_17_43_XOR_rg_C_88_BIT_17_44_46__ETC___d516 } ;
  assign rg_temp_86_BIT_1_07_XOR_rg_C_88_BIT_1_08_10_XO_ETC___d508 =
	     { x__h11853 ^ y__h11854,
	       IF_rg_temp_BIT_0_XOR_rg_C_BIT_0_THEN_1_ELSE_0__q5[0] } ;
  assign rg_temp_86_BIT_21_27_XOR_rg_C_88_BIT_21_28_30__ETC___d518 =
	     { x__h15693 ^ y__h15396,
	       x__h15501 ^ y__h15204,
	       rg_temp_86_BIT_19_35_XOR_rg_C_88_BIT_19_36_38__ETC___d517 } ;
  assign rg_temp_86_BIT_23_19_XOR_rg_C_88_BIT_23_20_22__ETC___d519 =
	     { x__h16077 ^ y__h15780,
	       x__h15885 ^ y__h15588,
	       rg_temp_86_BIT_21_27_XOR_rg_C_88_BIT_21_28_30__ETC___d518 } ;
  assign rg_temp_86_BIT_25_11_XOR_rg_C_88_BIT_25_12_14__ETC___d520 =
	     { x__h16461 ^ y__h16164,
	       x__h16269 ^ y__h15972,
	       rg_temp_86_BIT_23_19_XOR_rg_C_88_BIT_23_20_22__ETC___d519 } ;
  assign rg_temp_86_BIT_27_03_XOR_rg_C_88_BIT_27_04_06__ETC___d521 =
	     { x__h16845 ^ y__h16548,
	       x__h16653 ^ y__h16356,
	       rg_temp_86_BIT_25_11_XOR_rg_C_88_BIT_25_12_14__ETC___d520 } ;
  assign rg_temp_86_BIT_29_95_XOR_rg_C_88_BIT_29_96_98__ETC___d522 =
	     { x__h17229 ^ y__h16932,
	       x__h17037 ^ y__h16740,
	       rg_temp_86_BIT_27_03_XOR_rg_C_88_BIT_27_04_06__ETC___d521 } ;
  assign rg_temp_86_BIT_3_99_XOR_rg_C_88_BIT_3_00_02_XO_ETC___d509 =
	     { x__h12237 ^ y__h11940,
	       x__h12045 ^ y__h11748,
	       rg_temp_86_BIT_1_07_XOR_rg_C_88_BIT_1_08_10_XO_ETC___d508 } ;
  assign rg_temp_86_BIT_5_91_XOR_rg_C_88_BIT_5_92_94_XO_ETC___d510 =
	     { x__h12621 ^ y__h12324,
	       x__h12429 ^ y__h12132,
	       rg_temp_86_BIT_3_99_XOR_rg_C_88_BIT_3_00_02_XO_ETC___d509 } ;
  assign rg_temp_86_BIT_7_83_XOR_rg_C_88_BIT_7_84_86_XO_ETC___d511 =
	     { x__h13005 ^ y__h12708,
	       x__h12813 ^ y__h12516,
	       rg_temp_86_BIT_5_91_XOR_rg_C_88_BIT_5_92_94_XO_ETC___d510 } ;
  assign rg_temp_86_BIT_9_75_XOR_rg_C_88_BIT_9_76_78_XO_ETC___d512 =
	     { x__h13389 ^ y__h13092,
	       x__h13197 ^ y__h12900,
	       rg_temp_86_BIT_7_83_XOR_rg_C_88_BIT_7_84_86_XO_ETC___d511 } ;
  assign x__h10008 = partial_store[12] ^ rg_A[12] ;
  assign x__h10153 = partial_store[13] & rg_A[13] ;
  assign x__h10200 = partial_store[13] ^ rg_A[13] ;
  assign x__h10286 = partial_store[15] ^ rg_A[15] ;
  assign x__h10345 = partial_store[14] & rg_A[14] ;
  assign x__h10392 = partial_store[14] ^ rg_A[14] ;
  assign x__h11806 = rg_temp[1] & rg_C[1] ;
  assign x__h11853 = rg_temp[1] ^ rg_C[1] ;
  assign x__h11998 = rg_temp[2] & rg_C[2] ;
  assign x__h12045 = rg_temp[2] ^ rg_C[2] ;
  assign x__h12190 = rg_temp[3] & rg_C[3] ;
  assign x__h12237 = rg_temp[3] ^ rg_C[3] ;
  assign x__h12382 = rg_temp[4] & rg_C[4] ;
  assign x__h12429 = rg_temp[4] ^ rg_C[4] ;
  assign x__h12574 = rg_temp[5] & rg_C[5] ;
  assign x__h12621 = rg_temp[5] ^ rg_C[5] ;
  assign x__h12766 = rg_temp[6] & rg_C[6] ;
  assign x__h12813 = rg_temp[6] ^ rg_C[6] ;
  assign x__h12958 = rg_temp[7] & rg_C[7] ;
  assign x__h13005 = rg_temp[7] ^ rg_C[7] ;
  assign x__h13150 = rg_temp[8] & rg_C[8] ;
  assign x__h13197 = rg_temp[8] ^ rg_C[8] ;
  assign x__h13342 = rg_temp[9] & rg_C[9] ;
  assign x__h13389 = rg_temp[9] ^ rg_C[9] ;
  assign x__h13534 = rg_temp[10] & rg_C[10] ;
  assign x__h13581 = rg_temp[10] ^ rg_C[10] ;
  assign x__h13726 = rg_temp[11] & rg_C[11] ;
  assign x__h13773 = rg_temp[11] ^ rg_C[11] ;
  assign x__h13918 = rg_temp[12] & rg_C[12] ;
  assign x__h13965 = rg_temp[12] ^ rg_C[12] ;
  assign x__h14110 = rg_temp[13] & rg_C[13] ;
  assign x__h14157 = rg_temp[13] ^ rg_C[13] ;
  assign x__h14302 = rg_temp[14] & rg_C[14] ;
  assign x__h14349 = rg_temp[14] ^ rg_C[14] ;
  assign x__h14494 = rg_temp[15] & rg_C[15] ;
  assign x__h14541 = rg_temp[15] ^ rg_C[15] ;
  assign x__h14686 = rg_temp[16] & rg_C[16] ;
  assign x__h14733 = rg_temp[16] ^ rg_C[16] ;
  assign x__h14878 = rg_temp[17] & rg_C[17] ;
  assign x__h14925 = rg_temp[17] ^ rg_C[17] ;
  assign x__h15070 = rg_temp[18] & rg_C[18] ;
  assign x__h15117 = rg_temp[18] ^ rg_C[18] ;
  assign x__h15262 = rg_temp[19] & rg_C[19] ;
  assign x__h15309 = rg_temp[19] ^ rg_C[19] ;
  assign x__h15454 = rg_temp[20] & rg_C[20] ;
  assign x__h15501 = rg_temp[20] ^ rg_C[20] ;
  assign x__h15646 = rg_temp[21] & rg_C[21] ;
  assign x__h15693 = rg_temp[21] ^ rg_C[21] ;
  assign x__h15838 = rg_temp[22] & rg_C[22] ;
  assign x__h15885 = rg_temp[22] ^ rg_C[22] ;
  assign x__h16030 = rg_temp[23] & rg_C[23] ;
  assign x__h16077 = rg_temp[23] ^ rg_C[23] ;
  assign x__h16222 = rg_temp[24] & rg_C[24] ;
  assign x__h16269 = rg_temp[24] ^ rg_C[24] ;
  assign x__h16414 = rg_temp[25] & rg_C[25] ;
  assign x__h16461 = rg_temp[25] ^ rg_C[25] ;
  assign x__h16606 = rg_temp[26] & rg_C[26] ;
  assign x__h16653 = rg_temp[26] ^ rg_C[26] ;
  assign x__h16798 = rg_temp[27] & rg_C[27] ;
  assign x__h16845 = rg_temp[27] ^ rg_C[27] ;
  assign x__h16990 = rg_temp[28] & rg_C[28] ;
  assign x__h17037 = rg_temp[28] ^ rg_C[28] ;
  assign x__h17182 = rg_temp[29] & rg_C[29] ;
  assign x__h17229 = rg_temp[29] ^ rg_C[29] ;
  assign x__h17315 = rg_temp[31] ^ rg_C[31] ;
  assign x__h17374 = rg_temp[30] & rg_C[30] ;
  assign x__h17421 = rg_temp[30] ^ rg_C[30] ;
  assign x__h4411 = partial_store[1] ^ y__h4414 ;
  assign x__h4539 = partial_store[2] ^ y__h4542 ;
  assign x__h4597 = partial_store[1] & y__h4414 ;
  assign x__h4728 = partial_store[3] ^ y__h4731 ;
  assign x__h4786 = partial_store[2] & y__h4542 ;
  assign x__h4917 = partial_store[4] ^ y__h4920 ;
  assign x__h4975 = partial_store[3] & y__h4731 ;
  assign x__h5106 = partial_store[5] ^ y__h5109 ;
  assign x__h5164 = partial_store[4] & y__h4920 ;
  assign x__h5295 = partial_store[6] ^ y__h5298 ;
  assign x__h5353 = partial_store[5] & y__h5109 ;
  assign x__h5484 = partial_store[7] ^ y__h5487 ;
  assign x__h5542 = partial_store[6] & y__h5298 ;
  assign x__h5673 = partial_store[8] ^ y__h5676 ;
  assign x__h5731 = partial_store[7] & y__h5487 ;
  assign x__h5862 = partial_store[9] ^ y__h5865 ;
  assign x__h5920 = partial_store[8] & y__h5676 ;
  assign x__h6051 = partial_store[10] ^ y__h6054 ;
  assign x__h6109 = partial_store[9] & y__h5865 ;
  assign x__h6240 = partial_store[11] ^ y__h6243 ;
  assign x__h6298 = partial_store[10] & y__h6054 ;
  assign x__h6429 = partial_store[12] ^ y__h6432 ;
  assign x__h6487 = partial_store[11] & y__h6243 ;
  assign x__h6618 = partial_store[13] ^ y__h6621 ;
  assign x__h6676 = partial_store[12] & y__h6432 ;
  assign x__h6807 = partial_store[14] ^ y__h6810 ;
  assign x__h6865 = partial_store[13] & y__h6621 ;
  assign x__h6996 = partial_store[15] ^ y__h6999 ;
  assign x__h7054 = partial_store[14] & y__h6810 ;
  assign x__h7192 =
	     { x__h10286 ^ y__h10287,
	       x__h10392 ^ y__h10095,
	       partial_store_7_BIT_13_7_XOR_rg_A_9_BIT_13_73__ETC___d266 } ;
  assign x__h723 =
	     { x__h6996 ^ y__h6997,
	       x__h6807 ^ y__h6808,
	       partial_store_7_BIT_13_7_XOR_INV_rg_A_9_0_BIT__ETC___d166 } ;
  assign x__h7849 = partial_store[1] & rg_A[1] ;
  assign x__h7896 = partial_store[1] ^ rg_A[1] ;
  assign x__h8041 = partial_store[2] & rg_A[2] ;
  assign x__h8088 = partial_store[2] ^ rg_A[2] ;
  assign x__h8233 = partial_store[3] & rg_A[3] ;
  assign x__h8280 = partial_store[3] ^ rg_A[3] ;
  assign x__h8425 = partial_store[4] & rg_A[4] ;
  assign x__h8472 = partial_store[4] ^ rg_A[4] ;
  assign x__h8617 = partial_store[5] & rg_A[5] ;
  assign x__h8664 = partial_store[5] ^ rg_A[5] ;
  assign x__h8809 = partial_store[6] & rg_A[6] ;
  assign x__h8856 = partial_store[6] ^ rg_A[6] ;
  assign x__h9001 = partial_store[7] & rg_A[7] ;
  assign x__h9048 = partial_store[7] ^ rg_A[7] ;
  assign x__h9193 = partial_store[8] & rg_A[8] ;
  assign x__h9240 = partial_store[8] ^ rg_A[8] ;
  assign x__h9385 = partial_store[9] & rg_A[9] ;
  assign x__h9432 = partial_store[9] ^ rg_A[9] ;
  assign x__h9577 = partial_store[10] & rg_A[10] ;
  assign x__h9624 = partial_store[10] ^ rg_A[10] ;
  assign x__h9769 = partial_store[11] & rg_A[11] ;
  assign x__h9816 = partial_store[11] ^ rg_A[11] ;
  assign x__h9961 = partial_store[12] & rg_A[12] ;
  assign y__h10095 = x__h10153 | y__h10154 ;
  assign y__h10154 = x__h10200 & y__h9903 ;
  assign y__h10287 = x__h10345 | y__h10346 ;
  assign y__h10346 = x__h10392 & y__h10095 ;
  assign y__h11748 = x__h11806 | y__h11807 ;
  assign y__h11807 = x__h11853 & y__h11854 ;
  assign y__h11854 = rg_temp[0] & rg_C[0] ;
  assign y__h11940 = x__h11998 | y__h11999 ;
  assign y__h11999 = x__h12045 & y__h11748 ;
  assign y__h12132 = x__h12190 | y__h12191 ;
  assign y__h12191 = x__h12237 & y__h11940 ;
  assign y__h12324 = x__h12382 | y__h12383 ;
  assign y__h12383 = x__h12429 & y__h12132 ;
  assign y__h12516 = x__h12574 | y__h12575 ;
  assign y__h12575 = x__h12621 & y__h12324 ;
  assign y__h12708 = x__h12766 | y__h12767 ;
  assign y__h12767 = x__h12813 & y__h12516 ;
  assign y__h12900 = x__h12958 | y__h12959 ;
  assign y__h12959 = x__h13005 & y__h12708 ;
  assign y__h13092 = x__h13150 | y__h13151 ;
  assign y__h13151 = x__h13197 & y__h12900 ;
  assign y__h13284 = x__h13342 | y__h13343 ;
  assign y__h13343 = x__h13389 & y__h13092 ;
  assign y__h13476 = x__h13534 | y__h13535 ;
  assign y__h13535 = x__h13581 & y__h13284 ;
  assign y__h13668 = x__h13726 | y__h13727 ;
  assign y__h13727 = x__h13773 & y__h13476 ;
  assign y__h13860 = x__h13918 | y__h13919 ;
  assign y__h13919 = x__h13965 & y__h13668 ;
  assign y__h14052 = x__h14110 | y__h14111 ;
  assign y__h14111 = x__h14157 & y__h13860 ;
  assign y__h14244 = x__h14302 | y__h14303 ;
  assign y__h14303 = x__h14349 & y__h14052 ;
  assign y__h14436 = x__h14494 | y__h14495 ;
  assign y__h14495 = x__h14541 & y__h14244 ;
  assign y__h14628 = x__h14686 | y__h14687 ;
  assign y__h14687 = x__h14733 & y__h14436 ;
  assign y__h14820 = x__h14878 | y__h14879 ;
  assign y__h14879 = x__h14925 & y__h14628 ;
  assign y__h15012 = x__h15070 | y__h15071 ;
  assign y__h15071 = x__h15117 & y__h14820 ;
  assign y__h15204 = x__h15262 | y__h15263 ;
  assign y__h15263 = x__h15309 & y__h15012 ;
  assign y__h15396 = x__h15454 | y__h15455 ;
  assign y__h15455 = x__h15501 & y__h15204 ;
  assign y__h15588 = x__h15646 | y__h15647 ;
  assign y__h15647 = x__h15693 & y__h15396 ;
  assign y__h15780 = x__h15838 | y__h15839 ;
  assign y__h15839 = x__h15885 & y__h15588 ;
  assign y__h15972 = x__h16030 | y__h16031 ;
  assign y__h16031 = x__h16077 & y__h15780 ;
  assign y__h16164 = x__h16222 | y__h16223 ;
  assign y__h16223 = x__h16269 & y__h15972 ;
  assign y__h16356 = x__h16414 | y__h16415 ;
  assign y__h16415 = x__h16461 & y__h16164 ;
  assign y__h16548 = x__h16606 | y__h16607 ;
  assign y__h16607 = x__h16653 & y__h16356 ;
  assign y__h16740 = x__h16798 | y__h16799 ;
  assign y__h16799 = x__h16845 & y__h16548 ;
  assign y__h16932 = x__h16990 | y__h16991 ;
  assign y__h16991 = x__h17037 & y__h16740 ;
  assign y__h17124 = x__h17182 | y__h17183 ;
  assign y__h17183 = x__h17229 & y__h16932 ;
  assign y__h17316 = x__h17374 | y__h17375 ;
  assign y__h17375 = x__h17421 & y__h17124 ;
  assign y__h1742 = INV_rg_A__q1[1] & INV_rg_A__q1[0] ;
  assign y__h1931 = INV_rg_A__q1[2] & y__h1742 ;
  assign y__h2120 = INV_rg_A__q1[3] & y__h1931 ;
  assign y__h2309 = INV_rg_A__q1[4] & y__h2120 ;
  assign y__h2498 = INV_rg_A__q1[5] & y__h2309 ;
  assign y__h2687 = INV_rg_A__q1[6] & y__h2498 ;
  assign y__h2876 = INV_rg_A__q1[7] & y__h2687 ;
  assign y__h3065 = INV_rg_A__q1[8] & y__h2876 ;
  assign y__h3254 = INV_rg_A__q1[9] & y__h3065 ;
  assign y__h3443 = INV_rg_A__q1[10] & y__h3254 ;
  assign y__h3632 = INV_rg_A__q1[11] & y__h3443 ;
  assign y__h3821 = INV_rg_A__q1[12] & y__h3632 ;
  assign y__h4010 = INV_rg_A__q1[13] & y__h3821 ;
  assign y__h4199 = INV_rg_A__q1[14] & y__h4010 ;
  assign y__h4412 =
	     partial_store[0] & IF_INV_INV_rg_A_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h4414 = INV_rg_A__q1[1] ^ INV_rg_A__q1[0] ;
  assign y__h4540 = x__h4597 | y__h4598 ;
  assign y__h4542 = INV_rg_A__q1[2] ^ y__h1742 ;
  assign y__h4598 = x__h4411 & y__h4412 ;
  assign y__h4729 = x__h4786 | y__h4787 ;
  assign y__h4731 = INV_rg_A__q1[3] ^ y__h1931 ;
  assign y__h4787 = x__h4539 & y__h4540 ;
  assign y__h4918 = x__h4975 | y__h4976 ;
  assign y__h4920 = INV_rg_A__q1[4] ^ y__h2120 ;
  assign y__h4976 = x__h4728 & y__h4729 ;
  assign y__h5107 = x__h5164 | y__h5165 ;
  assign y__h5109 = INV_rg_A__q1[5] ^ y__h2309 ;
  assign y__h5165 = x__h4917 & y__h4918 ;
  assign y__h5296 = x__h5353 | y__h5354 ;
  assign y__h5298 = INV_rg_A__q1[6] ^ y__h2498 ;
  assign y__h5354 = x__h5106 & y__h5107 ;
  assign y__h5485 = x__h5542 | y__h5543 ;
  assign y__h5487 = INV_rg_A__q1[7] ^ y__h2687 ;
  assign y__h5543 = x__h5295 & y__h5296 ;
  assign y__h5674 = x__h5731 | y__h5732 ;
  assign y__h5676 = INV_rg_A__q1[8] ^ y__h2876 ;
  assign y__h5732 = x__h5484 & y__h5485 ;
  assign y__h5863 = x__h5920 | y__h5921 ;
  assign y__h5865 = INV_rg_A__q1[9] ^ y__h3065 ;
  assign y__h5921 = x__h5673 & y__h5674 ;
  assign y__h6052 = x__h6109 | y__h6110 ;
  assign y__h6054 = INV_rg_A__q1[10] ^ y__h3254 ;
  assign y__h6110 = x__h5862 & y__h5863 ;
  assign y__h6241 = x__h6298 | y__h6299 ;
  assign y__h6243 = INV_rg_A__q1[11] ^ y__h3443 ;
  assign y__h6299 = x__h6051 & y__h6052 ;
  assign y__h6430 = x__h6487 | y__h6488 ;
  assign y__h6432 = INV_rg_A__q1[12] ^ y__h3632 ;
  assign y__h6488 = x__h6240 & y__h6241 ;
  assign y__h6619 = x__h6676 | y__h6677 ;
  assign y__h6621 = INV_rg_A__q1[13] ^ y__h3821 ;
  assign y__h6677 = x__h6429 & y__h6430 ;
  assign y__h6808 = x__h6865 | y__h6866 ;
  assign y__h6810 = INV_rg_A__q1[14] ^ y__h4010 ;
  assign y__h6866 = x__h6618 & y__h6619 ;
  assign y__h6997 = x__h7054 | y__h7055 ;
  assign y__h6999 = INV_rg_A__q1[15] ^ y__h4199 ;
  assign y__h7055 = x__h6807 & y__h6808 ;
  assign y__h7791 = x__h7849 | y__h7850 ;
  assign y__h7850 = x__h7896 & y__h7897 ;
  assign y__h7897 = partial_store[0] & rg_A[0] ;
  assign y__h7983 = x__h8041 | y__h8042 ;
  assign y__h8042 = x__h8088 & y__h7791 ;
  assign y__h8175 = x__h8233 | y__h8234 ;
  assign y__h8234 = x__h8280 & y__h7983 ;
  assign y__h8367 = x__h8425 | y__h8426 ;
  assign y__h8426 = x__h8472 & y__h8175 ;
  assign y__h8559 = x__h8617 | y__h8618 ;
  assign y__h8618 = x__h8664 & y__h8367 ;
  assign y__h8751 = x__h8809 | y__h8810 ;
  assign y__h8810 = x__h8856 & y__h8559 ;
  assign y__h8943 = x__h9001 | y__h9002 ;
  assign y__h9002 = x__h9048 & y__h8751 ;
  assign y__h9135 = x__h9193 | y__h9194 ;
  assign y__h9194 = x__h9240 & y__h8943 ;
  assign y__h9327 = x__h9385 | y__h9386 ;
  assign y__h9386 = x__h9432 & y__h9135 ;
  assign y__h9519 = x__h9577 | y__h9578 ;
  assign y__h9578 = x__h9624 & y__h9327 ;
  assign y__h9711 = x__h9769 | y__h9770 ;
  assign y__h9770 = x__h9816 & y__h9519 ;
  assign y__h9903 = x__h9961 | y__h9962 ;
  assign y__h9962 = x__h10008 & y__h9711 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	count <= `BSV_ASSIGNMENT_DELAY 5'd9;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_store <= `BSV_ASSIGNMENT_DELAY 16'd0;
	reset_completed <= `BSV_ASSIGNMENT_DELAY 1'd1;
	rg_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_MAC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_temp <= `BSV_ASSIGNMENT_DELAY 32'd0;
	start <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (add_completed_EN)
	  add_completed <= `BSV_ASSIGNMENT_DELAY add_completed_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_s1_or_s2_EN)
	  got_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY got_s1_or_s2_D_IN;
	if (mac_completed_EN)
	  mac_completed <= `BSV_ASSIGNMENT_DELAY mac_completed_D_IN;
	if (mul_completed_EN)
	  mul_completed <= `BSV_ASSIGNMENT_DELAY mul_completed_D_IN;
	if (partial_store_EN)
	  partial_store <= `BSV_ASSIGNMENT_DELAY partial_store_D_IN;
	if (reset_completed_EN)
	  reset_completed <= `BSV_ASSIGNMENT_DELAY reset_completed_D_IN;
	if (rg_A_EN) rg_A <= `BSV_ASSIGNMENT_DELAY rg_A_D_IN;
	if (rg_B_EN) rg_B <= `BSV_ASSIGNMENT_DELAY rg_B_D_IN;
	if (rg_C_EN) rg_C <= `BSV_ASSIGNMENT_DELAY rg_C_D_IN;
	if (rg_MAC_EN) rg_MAC <= `BSV_ASSIGNMENT_DELAY rg_MAC_D_IN;
	if (rg_S1_or_S2_EN)
	  rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY rg_S1_or_S2_D_IN;
	if (rg_temp_EN) rg_temp <= `BSV_ASSIGNMENT_DELAY rg_temp_D_IN;
	if (start_EN) start <= `BSV_ASSIGNMENT_DELAY start_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_completed = 1'h0;
    count = 5'h0A;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_s1_or_s2 = 1'h0;
    mac_completed = 1'h0;
    mul_completed = 1'h0;
    partial_store = 16'hAAAA;
    reset_completed = 1'h0;
    rg_A = 16'hAAAA;
    rg_B = 16'hAAAA;
    rg_C = 32'hAAAAAAAA;
    rg_MAC = 32'hAAAAAAAA;
    rg_S1_or_S2 = 1'h0;
    rg_temp = 32'hAAAAAAAA;
    start = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC_int32

