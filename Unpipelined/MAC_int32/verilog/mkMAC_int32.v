//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri Oct 11 23:54:26 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1 const
// RDY_get_B                      O     1 const
// RDY_get_C                      O     1 const
// RDY_get_S1_or_S2               O     1 const
// output_MAC                     O    32 reg
// RDY_output_MAC                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16 reg
// get_B_b                        I    16 reg
// get_C_c                        I    32 reg
// get_S1_or_S2_s1_or_s2          I     1 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_get_S1_or_S2                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC_int32(CLK,
		   RST_N,

		   get_A_a,
		   EN_get_A,
		   RDY_get_A,

		   get_B_b,
		   EN_get_B,
		   RDY_get_B,

		   get_C_c,
		   EN_get_C,
		   RDY_get_C,

		   get_S1_or_S2_s1_or_s2,
		   EN_get_S1_or_S2,
		   RDY_get_S1_or_S2,

		   output_MAC,
		   RDY_output_MAC);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // action method get_S1_or_S2
  input  get_S1_or_S2_s1_or_s2;
  input  EN_get_S1_or_S2;
  output RDY_get_S1_or_S2;

  // value method output_MAC
  output [31 : 0] output_MAC;
  output RDY_output_MAC;

  // signals for module outputs
  wire [31 : 0] output_MAC;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_S1_or_S2, RDY_output_MAC;

  // register rg_A
  reg [15 : 0] rg_A;
  wire [15 : 0] rg_A_D_IN;
  wire rg_A_EN;

  // register rg_B
  reg [15 : 0] rg_B;
  wire [15 : 0] rg_B_D_IN;
  wire rg_B_EN;

  // register rg_C
  reg [31 : 0] rg_C;
  wire [31 : 0] rg_C_D_IN;
  wire rg_C_EN;

  // register rg_MAC
  reg [31 : 0] rg_MAC;
  wire [31 : 0] rg_MAC_D_IN;
  wire rg_MAC_EN;

  // register rg_S1_or_S2
  reg rg_S1_or_S2;
  wire rg_S1_or_S2_D_IN, rg_S1_or_S2_EN;

  // rule scheduling signals
  wire CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_get_S1_or_S2,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_get_S1_or_S2;

  // action method get_A
  assign RDY_get_A = 1'd1 ;
  assign CAN_FIRE_get_A = 1'd1 ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = 1'd1 ;
  assign CAN_FIRE_get_B = 1'd1 ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = 1'd1 ;
  assign CAN_FIRE_get_C = 1'd1 ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // action method get_S1_or_S2
  assign RDY_get_S1_or_S2 = 1'd1 ;
  assign CAN_FIRE_get_S1_or_S2 = 1'd1 ;
  assign WILL_FIRE_get_S1_or_S2 = EN_get_S1_or_S2 ;

  // value method output_MAC
  assign output_MAC = rg_MAC ;
  assign RDY_output_MAC = 1'd1 ;

  // register rg_A
  assign rg_A_D_IN = get_A_a ;
  assign rg_A_EN = EN_get_A ;

  // register rg_B
  assign rg_B_D_IN = get_B_b ;
  assign rg_B_EN = EN_get_B ;

  // register rg_C
  assign rg_C_D_IN = get_C_c ;
  assign rg_C_EN = EN_get_C ;

  // register rg_MAC
  assign rg_MAC_D_IN = 32'h0 ;
  assign rg_MAC_EN = 1'b0 ;

  // register rg_S1_or_S2
  assign rg_S1_or_S2_D_IN = get_S1_or_S2_s1_or_s2 ;
  assign rg_S1_or_S2_EN = EN_get_S1_or_S2 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_MAC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_A_EN) rg_A <= `BSV_ASSIGNMENT_DELAY rg_A_D_IN;
	if (rg_B_EN) rg_B <= `BSV_ASSIGNMENT_DELAY rg_B_D_IN;
	if (rg_C_EN) rg_C <= `BSV_ASSIGNMENT_DELAY rg_C_D_IN;
	if (rg_MAC_EN) rg_MAC <= `BSV_ASSIGNMENT_DELAY rg_MAC_D_IN;
	if (rg_S1_or_S2_EN)
	  rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY rg_S1_or_S2_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_A = 16'hAAAA;
    rg_B = 16'hAAAA;
    rg_C = 32'hAAAAAAAA;
    rg_MAC = 32'hAAAAAAAA;
    rg_S1_or_S2 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC_int32

