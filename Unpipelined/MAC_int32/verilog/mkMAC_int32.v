//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Oct 13 15:53:35 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// RDY_get_C                      O     1
// RDY_get_S1_or_S2               O     1
// output_MAC                     O    32 reg
// RDY_output_MAC                 O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    16
// get_C_c                        I    32 reg
// get_S1_or_S2_s1_or_s2          I     1 reg
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_get_C                       I     1
// EN_get_S1_or_S2                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMAC_int32(CLK,
		   RST_N,

		   get_A_a,
		   EN_get_A,
		   RDY_get_A,

		   get_B_b,
		   EN_get_B,
		   RDY_get_B,

		   get_C_c,
		   EN_get_C,
		   RDY_get_C,

		   get_S1_or_S2_s1_or_s2,
		   EN_get_S1_or_S2,
		   RDY_get_S1_or_S2,

		   output_MAC,
		   RDY_output_MAC);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [15 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // action method get_C
  input  [31 : 0] get_C_c;
  input  EN_get_C;
  output RDY_get_C;

  // action method get_S1_or_S2
  input  get_S1_or_S2_s1_or_s2;
  input  EN_get_S1_or_S2;
  output RDY_get_S1_or_S2;

  // value method output_MAC
  output [31 : 0] output_MAC;
  output RDY_output_MAC;

  // signals for module outputs
  wire [31 : 0] output_MAC;
  wire RDY_get_A, RDY_get_B, RDY_get_C, RDY_get_S1_or_S2, RDY_output_MAC;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count_D_IN;
  wire count_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register got_C
  reg got_C;
  wire got_C_D_IN, got_C_EN;

  // register got_s1_or_s2
  reg got_s1_or_s2;
  wire got_s1_or_s2_D_IN, got_s1_or_s2_EN;

  // register mac_completed
  reg mac_completed;
  wire mac_completed_D_IN, mac_completed_EN;

  // register mul_completed
  reg mul_completed;
  wire mul_completed_D_IN, mul_completed_EN;

  // register partial_store
  reg [15 : 0] partial_store;
  wire [15 : 0] partial_store_D_IN;
  wire partial_store_EN;

  // register rg_A
  reg [15 : 0] rg_A;
  wire [15 : 0] rg_A_D_IN;
  wire rg_A_EN;

  // register rg_B
  reg [15 : 0] rg_B;
  wire [15 : 0] rg_B_D_IN;
  wire rg_B_EN;

  // register rg_C
  reg [31 : 0] rg_C;
  wire [31 : 0] rg_C_D_IN;
  wire rg_C_EN;

  // register rg_MAC
  reg [31 : 0] rg_MAC;
  wire [31 : 0] rg_MAC_D_IN;
  wire rg_MAC_EN;

  // register rg_S1_or_S2
  reg rg_S1_or_S2;
  wire rg_S1_or_S2_D_IN, rg_S1_or_S2_EN;

  // register rg_temp
  reg [31 : 0] rg_temp;
  wire [31 : 0] rg_temp_D_IN;
  wire rg_temp_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_mul_done,
       CAN_FIRE_RL_reset,
       CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_get_C,
       CAN_FIRE_get_S1_or_S2,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_mul_done,
       WILL_FIRE_RL_reset,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_get_C,
       WILL_FIRE_get_S1_or_S2;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_partial_store_write_1__VAL_1,
		MUX_rg_A_write_1__VAL_2,
		MUX_rg_B_write_1__VAL_2;
  wire [4 : 0] MUX_count_write_1__VAL_1;
  wire MUX_partial_store_write_1__SEL_1;

  // remaining internal signals
  wire [31 : 0] IF_rg_temp_BIT_0_XOR_rg_C_BIT_0_THEN_1_ELSE_0__q2;
  wire [29 : 0] rg_temp_39_BIT_29_48_XOR_rg_C_41_BIT_29_49_51__ETC___d375;
  wire [27 : 0] rg_temp_39_BIT_27_56_XOR_rg_C_41_BIT_27_57_59__ETC___d374;
  wire [25 : 0] rg_temp_39_BIT_25_64_XOR_rg_C_41_BIT_25_65_67__ETC___d373;
  wire [23 : 0] rg_temp_39_BIT_23_72_XOR_rg_C_41_BIT_23_73_75__ETC___d372;
  wire [21 : 0] rg_temp_39_BIT_21_80_XOR_rg_C_41_BIT_21_81_83__ETC___d371;
  wire [19 : 0] rg_temp_39_BIT_19_88_XOR_rg_C_41_BIT_19_89_91__ETC___d370;
  wire [17 : 0] rg_temp_39_BIT_17_96_XOR_rg_C_41_BIT_17_97_99__ETC___d369;
  wire [15 : 0] IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q1,
		rg_temp_39_BIT_15_04_XOR_rg_C_41_BIT_15_05_07__ETC___d368;
  wire [13 : 0] partial_store_4_BIT_13_3_XOR_rg_A_6_BIT_13_4_6_ETC___d130,
		rg_temp_39_BIT_13_12_XOR_rg_C_41_BIT_13_13_15__ETC___d367;
  wire [11 : 0] partial_store_4_BIT_11_1_XOR_rg_A_6_BIT_11_2_4_ETC___d129,
		rg_temp_39_BIT_11_20_XOR_rg_C_41_BIT_11_21_23__ETC___d366;
  wire [9 : 0] partial_store_4_BIT_9_9_XOR_rg_A_6_BIT_9_0_2_X_ETC___d128,
	       rg_temp_39_BIT_9_28_XOR_rg_C_41_BIT_9_29_31_XO_ETC___d365;
  wire [7 : 0] partial_store_4_BIT_7_7_XOR_rg_A_6_BIT_7_8_0_X_ETC___d127,
	       rg_temp_39_BIT_7_36_XOR_rg_C_41_BIT_7_37_39_XO_ETC___d364;
  wire [5 : 0] partial_store_4_BIT_5_5_XOR_rg_A_6_BIT_5_6_8_X_ETC___d126,
	       rg_temp_39_BIT_5_44_XOR_rg_C_41_BIT_5_45_47_XO_ETC___d363;
  wire [3 : 0] partial_store_4_BIT_3_3_XOR_rg_A_6_BIT_3_4_6_X_ETC___d125,
	       rg_temp_39_BIT_3_52_XOR_rg_C_41_BIT_3_53_55_XO_ETC___d362;
  wire [1 : 0] partial_store_4_BIT_1_1_XOR_rg_A_6_BIT_1_2_4_X_ETC___d124,
	       rg_temp_39_BIT_1_60_XOR_rg_C_41_BIT_1_61_63_XO_ETC___d361;
  wire x__h10000,
       x__h10145,
       x__h10192,
       x__h10337,
       x__h10384,
       x__h10529,
       x__h10576,
       x__h10662,
       x__h10721,
       x__h10768,
       x__h1245,
       x__h1292,
       x__h1437,
       x__h1484,
       x__h1629,
       x__h1676,
       x__h1821,
       x__h1868,
       x__h2013,
       x__h2060,
       x__h2205,
       x__h2252,
       x__h2397,
       x__h2444,
       x__h2589,
       x__h2636,
       x__h2781,
       x__h2828,
       x__h2973,
       x__h3020,
       x__h3165,
       x__h3212,
       x__h3357,
       x__h3404,
       x__h3549,
       x__h3596,
       x__h3682,
       x__h3741,
       x__h3788,
       x__h5153,
       x__h5200,
       x__h5345,
       x__h5392,
       x__h5537,
       x__h5584,
       x__h5729,
       x__h5776,
       x__h5921,
       x__h5968,
       x__h6113,
       x__h6160,
       x__h6305,
       x__h6352,
       x__h6497,
       x__h6544,
       x__h6689,
       x__h6736,
       x__h6881,
       x__h6928,
       x__h7073,
       x__h7120,
       x__h7265,
       x__h7312,
       x__h7457,
       x__h7504,
       x__h7649,
       x__h7696,
       x__h7841,
       x__h7888,
       x__h8033,
       x__h8080,
       x__h8225,
       x__h8272,
       x__h8417,
       x__h8464,
       x__h8609,
       x__h8656,
       x__h8801,
       x__h8848,
       x__h8993,
       x__h9040,
       x__h9185,
       x__h9232,
       x__h9377,
       x__h9424,
       x__h9569,
       x__h9616,
       x__h9761,
       x__h9808,
       x__h9953,
       y__h10087,
       y__h10146,
       y__h10279,
       y__h10338,
       y__h10471,
       y__h10530,
       y__h10663,
       y__h10722,
       y__h1187,
       y__h1246,
       y__h1293,
       y__h1379,
       y__h1438,
       y__h1571,
       y__h1630,
       y__h1763,
       y__h1822,
       y__h1955,
       y__h2014,
       y__h2147,
       y__h2206,
       y__h2339,
       y__h2398,
       y__h2531,
       y__h2590,
       y__h2723,
       y__h2782,
       y__h2915,
       y__h2974,
       y__h3107,
       y__h3166,
       y__h3299,
       y__h3358,
       y__h3491,
       y__h3550,
       y__h3683,
       y__h3742,
       y__h5095,
       y__h5154,
       y__h5201,
       y__h5287,
       y__h5346,
       y__h5479,
       y__h5538,
       y__h5671,
       y__h5730,
       y__h5863,
       y__h5922,
       y__h6055,
       y__h6114,
       y__h6247,
       y__h6306,
       y__h6439,
       y__h6498,
       y__h6631,
       y__h6690,
       y__h6823,
       y__h6882,
       y__h7015,
       y__h7074,
       y__h7207,
       y__h7266,
       y__h7399,
       y__h7458,
       y__h7591,
       y__h7650,
       y__h7783,
       y__h7842,
       y__h7975,
       y__h8034,
       y__h8167,
       y__h8226,
       y__h8359,
       y__h8418,
       y__h8551,
       y__h8610,
       y__h8743,
       y__h8802,
       y__h8935,
       y__h8994,
       y__h9127,
       y__h9186,
       y__h9319,
       y__h9378,
       y__h9511,
       y__h9570,
       y__h9703,
       y__h9762,
       y__h9895,
       y__h9954;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // action method get_C
  assign RDY_get_C = !got_C ;
  assign CAN_FIRE_get_C = !got_C ;
  assign WILL_FIRE_get_C = EN_get_C ;

  // action method get_S1_or_S2
  assign RDY_get_S1_or_S2 = !got_s1_or_s2 ;
  assign CAN_FIRE_get_S1_or_S2 = !got_s1_or_s2 ;
  assign WILL_FIRE_get_S1_or_S2 = EN_get_S1_or_S2 ;

  // value method output_MAC
  assign output_MAC = rg_MAC ;
  assign RDY_output_MAC = mac_completed ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply =
	     got_A && got_B && got_C && got_s1_or_s2 && count != 5'd0 ;
  assign WILL_FIRE_RL_rl_multiply = CAN_FIRE_RL_rl_multiply ;

  // rule RL_reset
  assign CAN_FIRE_RL_reset = mac_completed ;
  assign WILL_FIRE_RL_reset = mac_completed && !EN_get_C ;

  // rule RL_add
  assign CAN_FIRE_RL_add = mul_completed ;
  assign WILL_FIRE_RL_add = mul_completed && !EN_get_C ;

  // rule RL_mul_done
  assign CAN_FIRE_RL_mul_done = count == 5'd0 ;
  assign WILL_FIRE_RL_mul_done = CAN_FIRE_RL_mul_done ;

  // inputs to muxes for submodule ports
  assign MUX_partial_store_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_multiply && rg_B[0] ;
  assign MUX_count_write_1__VAL_1 = count - 5'd1 ;
  assign MUX_partial_store_write_1__VAL_1 =
	     { x__h3682 ^ y__h3683,
	       x__h3788 ^ y__h3491,
	       partial_store_4_BIT_13_3_XOR_rg_A_6_BIT_13_4_6_ETC___d130 } ;
  assign MUX_rg_A_write_1__VAL_2 = { rg_A[14:0], 1'd0 } ;
  assign MUX_rg_B_write_1__VAL_2 = { 1'd0, rg_B[15:1] } ;

  // register count
  assign count_D_IN =
	     WILL_FIRE_RL_rl_multiply ? MUX_count_write_1__VAL_1 : 5'd16 ;
  assign count_EN = WILL_FIRE_RL_rl_multiply || WILL_FIRE_RL_mul_done ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_reset ;
  assign got_A_EN = WILL_FIRE_RL_reset || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_reset ;
  assign got_B_EN = WILL_FIRE_RL_reset || EN_get_B ;

  // register got_C
  assign got_C_D_IN = !WILL_FIRE_RL_reset ;
  assign got_C_EN = WILL_FIRE_RL_reset || EN_get_C ;

  // register got_s1_or_s2
  assign got_s1_or_s2_D_IN = !WILL_FIRE_RL_reset ;
  assign got_s1_or_s2_EN = WILL_FIRE_RL_reset || EN_get_S1_or_S2 ;

  // register mac_completed
  assign mac_completed_D_IN = WILL_FIRE_RL_add ;
  assign mac_completed_EN = WILL_FIRE_RL_reset || WILL_FIRE_RL_add ;

  // register mul_completed
  assign mul_completed_D_IN = WILL_FIRE_RL_mul_done ;
  assign mul_completed_EN = WILL_FIRE_RL_add || WILL_FIRE_RL_mul_done ;

  // register partial_store
  assign partial_store_D_IN =
	     MUX_partial_store_write_1__SEL_1 ?
	       MUX_partial_store_write_1__VAL_1 :
	       16'd0 ;
  assign partial_store_EN =
	     WILL_FIRE_RL_rl_multiply && rg_B[0] || WILL_FIRE_RL_mul_done ;

  // register rg_A
  assign rg_A_D_IN = EN_get_A ? get_A_a : MUX_rg_A_write_1__VAL_2 ;
  assign rg_A_EN = EN_get_A || WILL_FIRE_RL_rl_multiply ;

  // register rg_B
  assign rg_B_D_IN = EN_get_B ? get_B_b : MUX_rg_B_write_1__VAL_2 ;
  assign rg_B_EN = EN_get_B || WILL_FIRE_RL_rl_multiply ;

  // register rg_C
  assign rg_C_D_IN = get_C_c ;
  assign rg_C_EN = EN_get_C ;

  // register rg_MAC
  assign rg_MAC_D_IN =
	     { x__h10662 ^ y__h10663,
	       x__h10768 ^ y__h10471,
	       rg_temp_39_BIT_29_48_XOR_rg_C_41_BIT_29_49_51__ETC___d375 } ;
  assign rg_MAC_EN = WILL_FIRE_RL_add ;

  // register rg_S1_or_S2
  assign rg_S1_or_S2_D_IN = get_S1_or_S2_s1_or_s2 ;
  assign rg_S1_or_S2_EN = EN_get_S1_or_S2 ;

  // register rg_temp
  assign rg_temp_D_IN = { {16{partial_store[15]}}, partial_store } ;
  assign rg_temp_EN = CAN_FIRE_RL_mul_done ;

  // remaining internal signals
  assign IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q1 =
	     (partial_store[0] ^ rg_A[0]) ? 16'd1 : 16'd0 ;
  assign IF_rg_temp_BIT_0_XOR_rg_C_BIT_0_THEN_1_ELSE_0__q2 =
	     (rg_temp[0] ^ rg_C[0]) ? 32'd1 : 32'd0 ;
  assign partial_store_4_BIT_11_1_XOR_rg_A_6_BIT_11_2_4_ETC___d129 =
	     { x__h3212 ^ y__h2915,
	       x__h3020 ^ y__h2723,
	       partial_store_4_BIT_9_9_XOR_rg_A_6_BIT_9_0_2_X_ETC___d128 } ;
  assign partial_store_4_BIT_13_3_XOR_rg_A_6_BIT_13_4_6_ETC___d130 =
	     { x__h3596 ^ y__h3299,
	       x__h3404 ^ y__h3107,
	       partial_store_4_BIT_11_1_XOR_rg_A_6_BIT_11_2_4_ETC___d129 } ;
  assign partial_store_4_BIT_1_1_XOR_rg_A_6_BIT_1_2_4_X_ETC___d124 =
	     { x__h1292 ^ y__h1293,
	       IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q1[0] } ;
  assign partial_store_4_BIT_3_3_XOR_rg_A_6_BIT_3_4_6_X_ETC___d125 =
	     { x__h1676 ^ y__h1379,
	       x__h1484 ^ y__h1187,
	       partial_store_4_BIT_1_1_XOR_rg_A_6_BIT_1_2_4_X_ETC___d124 } ;
  assign partial_store_4_BIT_5_5_XOR_rg_A_6_BIT_5_6_8_X_ETC___d126 =
	     { x__h2060 ^ y__h1763,
	       x__h1868 ^ y__h1571,
	       partial_store_4_BIT_3_3_XOR_rg_A_6_BIT_3_4_6_X_ETC___d125 } ;
  assign partial_store_4_BIT_7_7_XOR_rg_A_6_BIT_7_8_0_X_ETC___d127 =
	     { x__h2444 ^ y__h2147,
	       x__h2252 ^ y__h1955,
	       partial_store_4_BIT_5_5_XOR_rg_A_6_BIT_5_6_8_X_ETC___d126 } ;
  assign partial_store_4_BIT_9_9_XOR_rg_A_6_BIT_9_0_2_X_ETC___d128 =
	     { x__h2828 ^ y__h2531,
	       x__h2636 ^ y__h2339,
	       partial_store_4_BIT_7_7_XOR_rg_A_6_BIT_7_8_0_X_ETC___d127 } ;
  assign rg_temp_39_BIT_11_20_XOR_rg_C_41_BIT_11_21_23__ETC___d366 =
	     { x__h7120 ^ y__h6823,
	       x__h6928 ^ y__h6631,
	       rg_temp_39_BIT_9_28_XOR_rg_C_41_BIT_9_29_31_XO_ETC___d365 } ;
  assign rg_temp_39_BIT_13_12_XOR_rg_C_41_BIT_13_13_15__ETC___d367 =
	     { x__h7504 ^ y__h7207,
	       x__h7312 ^ y__h7015,
	       rg_temp_39_BIT_11_20_XOR_rg_C_41_BIT_11_21_23__ETC___d366 } ;
  assign rg_temp_39_BIT_15_04_XOR_rg_C_41_BIT_15_05_07__ETC___d368 =
	     { x__h7888 ^ y__h7591,
	       x__h7696 ^ y__h7399,
	       rg_temp_39_BIT_13_12_XOR_rg_C_41_BIT_13_13_15__ETC___d367 } ;
  assign rg_temp_39_BIT_17_96_XOR_rg_C_41_BIT_17_97_99__ETC___d369 =
	     { x__h8272 ^ y__h7975,
	       x__h8080 ^ y__h7783,
	       rg_temp_39_BIT_15_04_XOR_rg_C_41_BIT_15_05_07__ETC___d368 } ;
  assign rg_temp_39_BIT_19_88_XOR_rg_C_41_BIT_19_89_91__ETC___d370 =
	     { x__h8656 ^ y__h8359,
	       x__h8464 ^ y__h8167,
	       rg_temp_39_BIT_17_96_XOR_rg_C_41_BIT_17_97_99__ETC___d369 } ;
  assign rg_temp_39_BIT_1_60_XOR_rg_C_41_BIT_1_61_63_XO_ETC___d361 =
	     { x__h5200 ^ y__h5201,
	       IF_rg_temp_BIT_0_XOR_rg_C_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign rg_temp_39_BIT_21_80_XOR_rg_C_41_BIT_21_81_83__ETC___d371 =
	     { x__h9040 ^ y__h8743,
	       x__h8848 ^ y__h8551,
	       rg_temp_39_BIT_19_88_XOR_rg_C_41_BIT_19_89_91__ETC___d370 } ;
  assign rg_temp_39_BIT_23_72_XOR_rg_C_41_BIT_23_73_75__ETC___d372 =
	     { x__h9424 ^ y__h9127,
	       x__h9232 ^ y__h8935,
	       rg_temp_39_BIT_21_80_XOR_rg_C_41_BIT_21_81_83__ETC___d371 } ;
  assign rg_temp_39_BIT_25_64_XOR_rg_C_41_BIT_25_65_67__ETC___d373 =
	     { x__h9808 ^ y__h9511,
	       x__h9616 ^ y__h9319,
	       rg_temp_39_BIT_23_72_XOR_rg_C_41_BIT_23_73_75__ETC___d372 } ;
  assign rg_temp_39_BIT_27_56_XOR_rg_C_41_BIT_27_57_59__ETC___d374 =
	     { x__h10192 ^ y__h9895,
	       x__h10000 ^ y__h9703,
	       rg_temp_39_BIT_25_64_XOR_rg_C_41_BIT_25_65_67__ETC___d373 } ;
  assign rg_temp_39_BIT_29_48_XOR_rg_C_41_BIT_29_49_51__ETC___d375 =
	     { x__h10576 ^ y__h10279,
	       x__h10384 ^ y__h10087,
	       rg_temp_39_BIT_27_56_XOR_rg_C_41_BIT_27_57_59__ETC___d374 } ;
  assign rg_temp_39_BIT_3_52_XOR_rg_C_41_BIT_3_53_55_XO_ETC___d362 =
	     { x__h5584 ^ y__h5287,
	       x__h5392 ^ y__h5095,
	       rg_temp_39_BIT_1_60_XOR_rg_C_41_BIT_1_61_63_XO_ETC___d361 } ;
  assign rg_temp_39_BIT_5_44_XOR_rg_C_41_BIT_5_45_47_XO_ETC___d363 =
	     { x__h5968 ^ y__h5671,
	       x__h5776 ^ y__h5479,
	       rg_temp_39_BIT_3_52_XOR_rg_C_41_BIT_3_53_55_XO_ETC___d362 } ;
  assign rg_temp_39_BIT_7_36_XOR_rg_C_41_BIT_7_37_39_XO_ETC___d364 =
	     { x__h6352 ^ y__h6055,
	       x__h6160 ^ y__h5863,
	       rg_temp_39_BIT_5_44_XOR_rg_C_41_BIT_5_45_47_XO_ETC___d363 } ;
  assign rg_temp_39_BIT_9_28_XOR_rg_C_41_BIT_9_29_31_XO_ETC___d365 =
	     { x__h6736 ^ y__h6439,
	       x__h6544 ^ y__h6247,
	       rg_temp_39_BIT_7_36_XOR_rg_C_41_BIT_7_37_39_XO_ETC___d364 } ;
  assign x__h10000 = rg_temp[26] ^ rg_C[26] ;
  assign x__h10145 = rg_temp[27] & rg_C[27] ;
  assign x__h10192 = rg_temp[27] ^ rg_C[27] ;
  assign x__h10337 = rg_temp[28] & rg_C[28] ;
  assign x__h10384 = rg_temp[28] ^ rg_C[28] ;
  assign x__h10529 = rg_temp[29] & rg_C[29] ;
  assign x__h10576 = rg_temp[29] ^ rg_C[29] ;
  assign x__h10662 = rg_temp[31] ^ rg_C[31] ;
  assign x__h10721 = rg_temp[30] & rg_C[30] ;
  assign x__h10768 = rg_temp[30] ^ rg_C[30] ;
  assign x__h1245 = partial_store[1] & rg_A[1] ;
  assign x__h1292 = partial_store[1] ^ rg_A[1] ;
  assign x__h1437 = partial_store[2] & rg_A[2] ;
  assign x__h1484 = partial_store[2] ^ rg_A[2] ;
  assign x__h1629 = partial_store[3] & rg_A[3] ;
  assign x__h1676 = partial_store[3] ^ rg_A[3] ;
  assign x__h1821 = partial_store[4] & rg_A[4] ;
  assign x__h1868 = partial_store[4] ^ rg_A[4] ;
  assign x__h2013 = partial_store[5] & rg_A[5] ;
  assign x__h2060 = partial_store[5] ^ rg_A[5] ;
  assign x__h2205 = partial_store[6] & rg_A[6] ;
  assign x__h2252 = partial_store[6] ^ rg_A[6] ;
  assign x__h2397 = partial_store[7] & rg_A[7] ;
  assign x__h2444 = partial_store[7] ^ rg_A[7] ;
  assign x__h2589 = partial_store[8] & rg_A[8] ;
  assign x__h2636 = partial_store[8] ^ rg_A[8] ;
  assign x__h2781 = partial_store[9] & rg_A[9] ;
  assign x__h2828 = partial_store[9] ^ rg_A[9] ;
  assign x__h2973 = partial_store[10] & rg_A[10] ;
  assign x__h3020 = partial_store[10] ^ rg_A[10] ;
  assign x__h3165 = partial_store[11] & rg_A[11] ;
  assign x__h3212 = partial_store[11] ^ rg_A[11] ;
  assign x__h3357 = partial_store[12] & rg_A[12] ;
  assign x__h3404 = partial_store[12] ^ rg_A[12] ;
  assign x__h3549 = partial_store[13] & rg_A[13] ;
  assign x__h3596 = partial_store[13] ^ rg_A[13] ;
  assign x__h3682 = partial_store[15] ^ rg_A[15] ;
  assign x__h3741 = partial_store[14] & rg_A[14] ;
  assign x__h3788 = partial_store[14] ^ rg_A[14] ;
  assign x__h5153 = rg_temp[1] & rg_C[1] ;
  assign x__h5200 = rg_temp[1] ^ rg_C[1] ;
  assign x__h5345 = rg_temp[2] & rg_C[2] ;
  assign x__h5392 = rg_temp[2] ^ rg_C[2] ;
  assign x__h5537 = rg_temp[3] & rg_C[3] ;
  assign x__h5584 = rg_temp[3] ^ rg_C[3] ;
  assign x__h5729 = rg_temp[4] & rg_C[4] ;
  assign x__h5776 = rg_temp[4] ^ rg_C[4] ;
  assign x__h5921 = rg_temp[5] & rg_C[5] ;
  assign x__h5968 = rg_temp[5] ^ rg_C[5] ;
  assign x__h6113 = rg_temp[6] & rg_C[6] ;
  assign x__h6160 = rg_temp[6] ^ rg_C[6] ;
  assign x__h6305 = rg_temp[7] & rg_C[7] ;
  assign x__h6352 = rg_temp[7] ^ rg_C[7] ;
  assign x__h6497 = rg_temp[8] & rg_C[8] ;
  assign x__h6544 = rg_temp[8] ^ rg_C[8] ;
  assign x__h6689 = rg_temp[9] & rg_C[9] ;
  assign x__h6736 = rg_temp[9] ^ rg_C[9] ;
  assign x__h6881 = rg_temp[10] & rg_C[10] ;
  assign x__h6928 = rg_temp[10] ^ rg_C[10] ;
  assign x__h7073 = rg_temp[11] & rg_C[11] ;
  assign x__h7120 = rg_temp[11] ^ rg_C[11] ;
  assign x__h7265 = rg_temp[12] & rg_C[12] ;
  assign x__h7312 = rg_temp[12] ^ rg_C[12] ;
  assign x__h7457 = rg_temp[13] & rg_C[13] ;
  assign x__h7504 = rg_temp[13] ^ rg_C[13] ;
  assign x__h7649 = rg_temp[14] & rg_C[14] ;
  assign x__h7696 = rg_temp[14] ^ rg_C[14] ;
  assign x__h7841 = rg_temp[15] & rg_C[15] ;
  assign x__h7888 = rg_temp[15] ^ rg_C[15] ;
  assign x__h8033 = rg_temp[16] & rg_C[16] ;
  assign x__h8080 = rg_temp[16] ^ rg_C[16] ;
  assign x__h8225 = rg_temp[17] & rg_C[17] ;
  assign x__h8272 = rg_temp[17] ^ rg_C[17] ;
  assign x__h8417 = rg_temp[18] & rg_C[18] ;
  assign x__h8464 = rg_temp[18] ^ rg_C[18] ;
  assign x__h8609 = rg_temp[19] & rg_C[19] ;
  assign x__h8656 = rg_temp[19] ^ rg_C[19] ;
  assign x__h8801 = rg_temp[20] & rg_C[20] ;
  assign x__h8848 = rg_temp[20] ^ rg_C[20] ;
  assign x__h8993 = rg_temp[21] & rg_C[21] ;
  assign x__h9040 = rg_temp[21] ^ rg_C[21] ;
  assign x__h9185 = rg_temp[22] & rg_C[22] ;
  assign x__h9232 = rg_temp[22] ^ rg_C[22] ;
  assign x__h9377 = rg_temp[23] & rg_C[23] ;
  assign x__h9424 = rg_temp[23] ^ rg_C[23] ;
  assign x__h9569 = rg_temp[24] & rg_C[24] ;
  assign x__h9616 = rg_temp[24] ^ rg_C[24] ;
  assign x__h9761 = rg_temp[25] & rg_C[25] ;
  assign x__h9808 = rg_temp[25] ^ rg_C[25] ;
  assign x__h9953 = rg_temp[26] & rg_C[26] ;
  assign y__h10087 = x__h10145 | y__h10146 ;
  assign y__h10146 = x__h10192 & y__h9895 ;
  assign y__h10279 = x__h10337 | y__h10338 ;
  assign y__h10338 = x__h10384 & y__h10087 ;
  assign y__h10471 = x__h10529 | y__h10530 ;
  assign y__h10530 = x__h10576 & y__h10279 ;
  assign y__h10663 = x__h10721 | y__h10722 ;
  assign y__h10722 = x__h10768 & y__h10471 ;
  assign y__h1187 = x__h1245 | y__h1246 ;
  assign y__h1246 = x__h1292 & y__h1293 ;
  assign y__h1293 = partial_store[0] & rg_A[0] ;
  assign y__h1379 = x__h1437 | y__h1438 ;
  assign y__h1438 = x__h1484 & y__h1187 ;
  assign y__h1571 = x__h1629 | y__h1630 ;
  assign y__h1630 = x__h1676 & y__h1379 ;
  assign y__h1763 = x__h1821 | y__h1822 ;
  assign y__h1822 = x__h1868 & y__h1571 ;
  assign y__h1955 = x__h2013 | y__h2014 ;
  assign y__h2014 = x__h2060 & y__h1763 ;
  assign y__h2147 = x__h2205 | y__h2206 ;
  assign y__h2206 = x__h2252 & y__h1955 ;
  assign y__h2339 = x__h2397 | y__h2398 ;
  assign y__h2398 = x__h2444 & y__h2147 ;
  assign y__h2531 = x__h2589 | y__h2590 ;
  assign y__h2590 = x__h2636 & y__h2339 ;
  assign y__h2723 = x__h2781 | y__h2782 ;
  assign y__h2782 = x__h2828 & y__h2531 ;
  assign y__h2915 = x__h2973 | y__h2974 ;
  assign y__h2974 = x__h3020 & y__h2723 ;
  assign y__h3107 = x__h3165 | y__h3166 ;
  assign y__h3166 = x__h3212 & y__h2915 ;
  assign y__h3299 = x__h3357 | y__h3358 ;
  assign y__h3358 = x__h3404 & y__h3107 ;
  assign y__h3491 = x__h3549 | y__h3550 ;
  assign y__h3550 = x__h3596 & y__h3299 ;
  assign y__h3683 = x__h3741 | y__h3742 ;
  assign y__h3742 = x__h3788 & y__h3491 ;
  assign y__h5095 = x__h5153 | y__h5154 ;
  assign y__h5154 = x__h5200 & y__h5201 ;
  assign y__h5201 = rg_temp[0] & rg_C[0] ;
  assign y__h5287 = x__h5345 | y__h5346 ;
  assign y__h5346 = x__h5392 & y__h5095 ;
  assign y__h5479 = x__h5537 | y__h5538 ;
  assign y__h5538 = x__h5584 & y__h5287 ;
  assign y__h5671 = x__h5729 | y__h5730 ;
  assign y__h5730 = x__h5776 & y__h5479 ;
  assign y__h5863 = x__h5921 | y__h5922 ;
  assign y__h5922 = x__h5968 & y__h5671 ;
  assign y__h6055 = x__h6113 | y__h6114 ;
  assign y__h6114 = x__h6160 & y__h5863 ;
  assign y__h6247 = x__h6305 | y__h6306 ;
  assign y__h6306 = x__h6352 & y__h6055 ;
  assign y__h6439 = x__h6497 | y__h6498 ;
  assign y__h6498 = x__h6544 & y__h6247 ;
  assign y__h6631 = x__h6689 | y__h6690 ;
  assign y__h6690 = x__h6736 & y__h6439 ;
  assign y__h6823 = x__h6881 | y__h6882 ;
  assign y__h6882 = x__h6928 & y__h6631 ;
  assign y__h7015 = x__h7073 | y__h7074 ;
  assign y__h7074 = x__h7120 & y__h6823 ;
  assign y__h7207 = x__h7265 | y__h7266 ;
  assign y__h7266 = x__h7312 & y__h7015 ;
  assign y__h7399 = x__h7457 | y__h7458 ;
  assign y__h7458 = x__h7504 & y__h7207 ;
  assign y__h7591 = x__h7649 | y__h7650 ;
  assign y__h7650 = x__h7696 & y__h7399 ;
  assign y__h7783 = x__h7841 | y__h7842 ;
  assign y__h7842 = x__h7888 & y__h7591 ;
  assign y__h7975 = x__h8033 | y__h8034 ;
  assign y__h8034 = x__h8080 & y__h7783 ;
  assign y__h8167 = x__h8225 | y__h8226 ;
  assign y__h8226 = x__h8272 & y__h7975 ;
  assign y__h8359 = x__h8417 | y__h8418 ;
  assign y__h8418 = x__h8464 & y__h8167 ;
  assign y__h8551 = x__h8609 | y__h8610 ;
  assign y__h8610 = x__h8656 & y__h8359 ;
  assign y__h8743 = x__h8801 | y__h8802 ;
  assign y__h8802 = x__h8848 & y__h8551 ;
  assign y__h8935 = x__h8993 | y__h8994 ;
  assign y__h8994 = x__h9040 & y__h8743 ;
  assign y__h9127 = x__h9185 | y__h9186 ;
  assign y__h9186 = x__h9232 & y__h8935 ;
  assign y__h9319 = x__h9377 | y__h9378 ;
  assign y__h9378 = x__h9424 & y__h9127 ;
  assign y__h9511 = x__h9569 | y__h9570 ;
  assign y__h9570 = x__h9616 & y__h9319 ;
  assign y__h9703 = x__h9761 | y__h9762 ;
  assign y__h9762 = x__h9808 & y__h9511 ;
  assign y__h9895 = x__h9953 | y__h9954 ;
  assign y__h9954 = x__h10000 & y__h9703 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 5'd16;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_C <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mac_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul_completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_store <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_C <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_MAC <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_temp <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (got_C_EN) got_C <= `BSV_ASSIGNMENT_DELAY got_C_D_IN;
	if (got_s1_or_s2_EN)
	  got_s1_or_s2 <= `BSV_ASSIGNMENT_DELAY got_s1_or_s2_D_IN;
	if (mac_completed_EN)
	  mac_completed <= `BSV_ASSIGNMENT_DELAY mac_completed_D_IN;
	if (mul_completed_EN)
	  mul_completed <= `BSV_ASSIGNMENT_DELAY mul_completed_D_IN;
	if (partial_store_EN)
	  partial_store <= `BSV_ASSIGNMENT_DELAY partial_store_D_IN;
	if (rg_A_EN) rg_A <= `BSV_ASSIGNMENT_DELAY rg_A_D_IN;
	if (rg_B_EN) rg_B <= `BSV_ASSIGNMENT_DELAY rg_B_D_IN;
	if (rg_C_EN) rg_C <= `BSV_ASSIGNMENT_DELAY rg_C_D_IN;
	if (rg_MAC_EN) rg_MAC <= `BSV_ASSIGNMENT_DELAY rg_MAC_D_IN;
	if (rg_S1_or_S2_EN)
	  rg_S1_or_S2 <= `BSV_ASSIGNMENT_DELAY rg_S1_or_S2_D_IN;
	if (rg_temp_EN) rg_temp <= `BSV_ASSIGNMENT_DELAY rg_temp_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 5'h0A;
    got_A = 1'h0;
    got_B = 1'h0;
    got_C = 1'h0;
    got_s1_or_s2 = 1'h0;
    mac_completed = 1'h0;
    mul_completed = 1'h0;
    partial_store = 16'hAAAA;
    rg_A = 16'hAAAA;
    rg_B = 16'hAAAA;
    rg_C = 32'hAAAAAAAA;
    rg_MAC = 32'hAAAAAAAA;
    rg_S1_or_S2 = 1'h0;
    rg_temp = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMAC_int32

