//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Oct 13 10:52:37 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// output_Mul                     O    16 reg
// RDY_output_Mul                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I     8
// get_B_b                        I     8
// EN_get_A                       I     1
// EN_get_B                       I     1
// EN_output_Mul                  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSigned_8bitMul_woAddop(CLK,
				RST_N,

				get_A_a,
				EN_get_A,
				RDY_get_A,

				get_B_b,
				EN_get_B,
				RDY_get_B,

				EN_output_Mul,
				output_Mul,
				RDY_output_Mul);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [7 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [7 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // actionvalue method output_Mul
  input  EN_output_Mul;
  output [15 : 0] output_Mul;
  output RDY_output_Mul;

  // signals for module outputs
  wire [15 : 0] output_Mul;
  wire RDY_get_A, RDY_get_B, RDY_output_Mul;

  // register completed
  reg completed;
  wire completed_D_IN, completed_EN;

  // register count
  reg [4 : 0] count;
  wire [4 : 0] count_D_IN;
  wire count_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register partial_store
  reg [15 : 0] partial_store;
  wire [15 : 0] partial_store_D_IN;
  wire partial_store_EN;

  // register rg_A
  reg [15 : 0] rg_A;
  wire [15 : 0] rg_A_D_IN;
  wire rg_A_EN;

  // register rg_AB
  reg [15 : 0] rg_AB;
  wire [15 : 0] rg_AB_D_IN;
  wire rg_AB_EN;

  // register rg_B
  reg [15 : 0] rg_B;
  wire [15 : 0] rg_B_D_IN;
  wire rg_B_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_multiply,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       CAN_FIRE_output_Mul,
       WILL_FIRE_RL_rl_multiply,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B,
       WILL_FIRE_output_Mul;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_partial_store_write_1__VAL_2,
		MUX_rg_A_write_1__VAL_1,
		MUX_rg_A_write_1__VAL_2,
		MUX_rg_B_write_1__VAL_1,
		MUX_rg_B_write_1__VAL_2;
  wire [4 : 0] MUX_count_write_1__VAL_2;
  wire MUX_completed_write_1__SEL_1, MUX_count_write_1__SEL_1;

  // remaining internal signals
  wire [15 : 0] IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q1;
  wire [13 : 0] partial_store_0_BIT_13_9_XOR_rg_A_2_BIT_13_0_2_ETC___d126;
  wire [11 : 0] partial_store_0_BIT_11_7_XOR_rg_A_2_BIT_11_8_0_ETC___d125;
  wire [9 : 0] partial_store_0_BIT_9_5_XOR_rg_A_2_BIT_9_6_8_X_ETC___d124;
  wire [7 : 0] partial_store_0_BIT_7_3_XOR_rg_A_2_BIT_7_4_6_X_ETC___d123;
  wire [5 : 0] partial_store_0_BIT_5_1_XOR_rg_A_2_BIT_5_2_4_X_ETC___d122;
  wire [3 : 0] partial_store_0_BIT_3_9_XOR_rg_A_2_BIT_3_0_2_X_ETC___d121;
  wire [1 : 0] partial_store_0_BIT_1_7_XOR_rg_A_2_BIT_1_8_0_X_ETC___d120;
  wire x__h1039,
       x__h1086,
       x__h1231,
       x__h1278,
       x__h1423,
       x__h1470,
       x__h1615,
       x__h1662,
       x__h1807,
       x__h1854,
       x__h1999,
       x__h2046,
       x__h2191,
       x__h2238,
       x__h2383,
       x__h2430,
       x__h2575,
       x__h2622,
       x__h2767,
       x__h2814,
       x__h2959,
       x__h3006,
       x__h3151,
       x__h3198,
       x__h3343,
       x__h3390,
       x__h3476,
       x__h3535,
       x__h3582,
       y__h1040,
       y__h1087,
       y__h1173,
       y__h1232,
       y__h1365,
       y__h1424,
       y__h1557,
       y__h1616,
       y__h1749,
       y__h1808,
       y__h1941,
       y__h2000,
       y__h2133,
       y__h2192,
       y__h2325,
       y__h2384,
       y__h2517,
       y__h2576,
       y__h2709,
       y__h2768,
       y__h2901,
       y__h2960,
       y__h3093,
       y__h3152,
       y__h3285,
       y__h3344,
       y__h3477,
       y__h3536,
       y__h981;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // actionvalue method output_Mul
  assign output_Mul = rg_AB ;
  assign RDY_output_Mul = 1'd1 ;
  assign CAN_FIRE_output_Mul = 1'd1 ;
  assign WILL_FIRE_output_Mul = EN_output_Mul ;

  // rule RL_rl_multiply
  assign CAN_FIRE_RL_rl_multiply = got_A && got_B && count != 5'd0 ;
  assign WILL_FIRE_RL_rl_multiply =
	     CAN_FIRE_RL_rl_multiply && !EN_output_Mul ;

  // inputs to muxes for submodule ports
  assign MUX_completed_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_multiply && count == 5'd1 ;
  assign MUX_count_write_1__SEL_1 = EN_output_Mul && completed ;
  assign MUX_count_write_1__VAL_2 = count - 5'd1 ;
  assign MUX_partial_store_write_1__VAL_2 =
	     { x__h3476 ^ y__h3477,
	       x__h3582 ^ y__h3285,
	       partial_store_0_BIT_13_9_XOR_rg_A_2_BIT_13_0_2_ETC___d126 } ;
  assign MUX_rg_A_write_1__VAL_1 = { rg_A[14:0], 1'd0 } ;
  assign MUX_rg_A_write_1__VAL_2 = { {8{get_A_a[7]}}, get_A_a } ;
  assign MUX_rg_B_write_1__VAL_1 = { 1'd0, rg_B[15:1] } ;
  assign MUX_rg_B_write_1__VAL_2 = { {8{get_B_b[7]}}, get_B_b } ;

  // register completed
  assign completed_D_IN = MUX_completed_write_1__SEL_1 ;
  assign completed_EN =
	     WILL_FIRE_RL_rl_multiply && count == 5'd1 || EN_get_A ;

  // register count
  assign count_D_IN =
	     MUX_count_write_1__SEL_1 ? 5'd16 : MUX_count_write_1__VAL_2 ;
  assign count_EN = EN_output_Mul && completed || WILL_FIRE_RL_rl_multiply ;

  // register got_A
  assign got_A_D_IN = !MUX_count_write_1__SEL_1 ;
  assign got_A_EN = EN_output_Mul && completed || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !MUX_count_write_1__SEL_1 ;
  assign got_B_EN = EN_output_Mul && completed || EN_get_B ;

  // register partial_store
  assign partial_store_D_IN =
	     MUX_count_write_1__SEL_1 ?
	       16'd0 :
	       MUX_partial_store_write_1__VAL_2 ;
  assign partial_store_EN =
	     EN_output_Mul && completed ||
	     WILL_FIRE_RL_rl_multiply && rg_B[0] ;

  // register rg_A
  assign rg_A_D_IN =
	     WILL_FIRE_RL_rl_multiply ?
	       MUX_rg_A_write_1__VAL_1 :
	       MUX_rg_A_write_1__VAL_2 ;
  assign rg_A_EN = WILL_FIRE_RL_rl_multiply || EN_get_A ;

  // register rg_AB
  assign rg_AB_D_IN = partial_store ;
  assign rg_AB_EN = MUX_count_write_1__SEL_1 ;

  // register rg_B
  assign rg_B_D_IN =
	     WILL_FIRE_RL_rl_multiply ?
	       MUX_rg_B_write_1__VAL_1 :
	       MUX_rg_B_write_1__VAL_2 ;
  assign rg_B_EN = WILL_FIRE_RL_rl_multiply || EN_get_B ;

  // remaining internal signals
  assign IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q1 =
	     (partial_store[0] ^ rg_A[0]) ? 16'd1 : 16'd0 ;
  assign partial_store_0_BIT_11_7_XOR_rg_A_2_BIT_11_8_0_ETC___d125 =
	     { x__h3006 ^ y__h2709,
	       x__h2814 ^ y__h2517,
	       partial_store_0_BIT_9_5_XOR_rg_A_2_BIT_9_6_8_X_ETC___d124 } ;
  assign partial_store_0_BIT_13_9_XOR_rg_A_2_BIT_13_0_2_ETC___d126 =
	     { x__h3390 ^ y__h3093,
	       x__h3198 ^ y__h2901,
	       partial_store_0_BIT_11_7_XOR_rg_A_2_BIT_11_8_0_ETC___d125 } ;
  assign partial_store_0_BIT_1_7_XOR_rg_A_2_BIT_1_8_0_X_ETC___d120 =
	     { x__h1086 ^ y__h1087,
	       IF_partial_store_BIT_0_XOR_rg_A_BIT_0_THEN_1_E_ETC__q1[0] } ;
  assign partial_store_0_BIT_3_9_XOR_rg_A_2_BIT_3_0_2_X_ETC___d121 =
	     { x__h1470 ^ y__h1173,
	       x__h1278 ^ y__h981,
	       partial_store_0_BIT_1_7_XOR_rg_A_2_BIT_1_8_0_X_ETC___d120 } ;
  assign partial_store_0_BIT_5_1_XOR_rg_A_2_BIT_5_2_4_X_ETC___d122 =
	     { x__h1854 ^ y__h1557,
	       x__h1662 ^ y__h1365,
	       partial_store_0_BIT_3_9_XOR_rg_A_2_BIT_3_0_2_X_ETC___d121 } ;
  assign partial_store_0_BIT_7_3_XOR_rg_A_2_BIT_7_4_6_X_ETC___d123 =
	     { x__h2238 ^ y__h1941,
	       x__h2046 ^ y__h1749,
	       partial_store_0_BIT_5_1_XOR_rg_A_2_BIT_5_2_4_X_ETC___d122 } ;
  assign partial_store_0_BIT_9_5_XOR_rg_A_2_BIT_9_6_8_X_ETC___d124 =
	     { x__h2622 ^ y__h2325,
	       x__h2430 ^ y__h2133,
	       partial_store_0_BIT_7_3_XOR_rg_A_2_BIT_7_4_6_X_ETC___d123 } ;
  assign x__h1039 = partial_store[1] & rg_A[1] ;
  assign x__h1086 = partial_store[1] ^ rg_A[1] ;
  assign x__h1231 = partial_store[2] & rg_A[2] ;
  assign x__h1278 = partial_store[2] ^ rg_A[2] ;
  assign x__h1423 = partial_store[3] & rg_A[3] ;
  assign x__h1470 = partial_store[3] ^ rg_A[3] ;
  assign x__h1615 = partial_store[4] & rg_A[4] ;
  assign x__h1662 = partial_store[4] ^ rg_A[4] ;
  assign x__h1807 = partial_store[5] & rg_A[5] ;
  assign x__h1854 = partial_store[5] ^ rg_A[5] ;
  assign x__h1999 = partial_store[6] & rg_A[6] ;
  assign x__h2046 = partial_store[6] ^ rg_A[6] ;
  assign x__h2191 = partial_store[7] & rg_A[7] ;
  assign x__h2238 = partial_store[7] ^ rg_A[7] ;
  assign x__h2383 = partial_store[8] & rg_A[8] ;
  assign x__h2430 = partial_store[8] ^ rg_A[8] ;
  assign x__h2575 = partial_store[9] & rg_A[9] ;
  assign x__h2622 = partial_store[9] ^ rg_A[9] ;
  assign x__h2767 = partial_store[10] & rg_A[10] ;
  assign x__h2814 = partial_store[10] ^ rg_A[10] ;
  assign x__h2959 = partial_store[11] & rg_A[11] ;
  assign x__h3006 = partial_store[11] ^ rg_A[11] ;
  assign x__h3151 = partial_store[12] & rg_A[12] ;
  assign x__h3198 = partial_store[12] ^ rg_A[12] ;
  assign x__h3343 = partial_store[13] & rg_A[13] ;
  assign x__h3390 = partial_store[13] ^ rg_A[13] ;
  assign x__h3476 = partial_store[15] ^ rg_A[15] ;
  assign x__h3535 = partial_store[14] & rg_A[14] ;
  assign x__h3582 = partial_store[14] ^ rg_A[14] ;
  assign y__h1040 = x__h1086 & y__h1087 ;
  assign y__h1087 = partial_store[0] & rg_A[0] ;
  assign y__h1173 = x__h1231 | y__h1232 ;
  assign y__h1232 = x__h1278 & y__h981 ;
  assign y__h1365 = x__h1423 | y__h1424 ;
  assign y__h1424 = x__h1470 & y__h1173 ;
  assign y__h1557 = x__h1615 | y__h1616 ;
  assign y__h1616 = x__h1662 & y__h1365 ;
  assign y__h1749 = x__h1807 | y__h1808 ;
  assign y__h1808 = x__h1854 & y__h1557 ;
  assign y__h1941 = x__h1999 | y__h2000 ;
  assign y__h2000 = x__h2046 & y__h1749 ;
  assign y__h2133 = x__h2191 | y__h2192 ;
  assign y__h2192 = x__h2238 & y__h1941 ;
  assign y__h2325 = x__h2383 | y__h2384 ;
  assign y__h2384 = x__h2430 & y__h2133 ;
  assign y__h2517 = x__h2575 | y__h2576 ;
  assign y__h2576 = x__h2622 & y__h2325 ;
  assign y__h2709 = x__h2767 | y__h2768 ;
  assign y__h2768 = x__h2814 & y__h2517 ;
  assign y__h2901 = x__h2959 | y__h2960 ;
  assign y__h2960 = x__h3006 & y__h2709 ;
  assign y__h3093 = x__h3151 | y__h3152 ;
  assign y__h3152 = x__h3198 & y__h2901 ;
  assign y__h3285 = x__h3343 | y__h3344 ;
  assign y__h3344 = x__h3390 & y__h3093 ;
  assign y__h3477 = x__h3535 | y__h3536 ;
  assign y__h3536 = x__h3582 & y__h3285 ;
  assign y__h981 = x__h1039 | y__h1040 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        completed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	count <= `BSV_ASSIGNMENT_DELAY 5'd16;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	partial_store <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_A <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_AB <= `BSV_ASSIGNMENT_DELAY 16'd0;
	rg_B <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (completed_EN) completed <= `BSV_ASSIGNMENT_DELAY completed_D_IN;
	if (count_EN) count <= `BSV_ASSIGNMENT_DELAY count_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (partial_store_EN)
	  partial_store <= `BSV_ASSIGNMENT_DELAY partial_store_D_IN;
	if (rg_A_EN) rg_A <= `BSV_ASSIGNMENT_DELAY rg_A_D_IN;
	if (rg_AB_EN) rg_AB <= `BSV_ASSIGNMENT_DELAY rg_AB_D_IN;
	if (rg_B_EN) rg_B <= `BSV_ASSIGNMENT_DELAY rg_B_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    completed = 1'h0;
    count = 5'h0A;
    got_A = 1'h0;
    got_B = 1'h0;
    partial_store = 16'hAAAA;
    rg_A = 16'hAAAA;
    rg_AB = 16'hAAAA;
    rg_B = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSigned_8bitMul_woAddop

