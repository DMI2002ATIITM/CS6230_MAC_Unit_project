//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sat Oct 26 21:29:19 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  reg [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register adj_done
  reg adj_done;
  wire adj_done_D_IN, adj_done_EN;

  // register adj_sub
  reg adj_sub;
  wire adj_sub_D_IN, adj_sub_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register do_add
  reg do_add;
  reg do_add_D_IN;
  wire do_add_EN;

  // register do_sub
  reg do_sub;
  reg do_sub_D_IN;
  wire do_sub_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  reg [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  wire [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  reg [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_adjust_subres,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_deassert_assembled_answer,
       CAN_FIRE_RL_handle_zero_case,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_round_sub,
       CAN_FIRE_RL_sub,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_adjust_subres,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_deassert_assembled_answer,
       WILL_FIRE_RL_handle_zero_case,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_round_sub,
       WILL_FIRE_RL_sub,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_3,
		MUX_temp_sum_write_1__VAL_4;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2,
		MUX_fp_a_write_1__VAL_3,
		MUX_fp_c_write_1__VAL_1;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_2,
		MUX_add_res_with_adj_exp_write_1__VAL_3;
  wire MUX_do_add_write_1__SEL_2,
       MUX_do_sub_write_1__SEL_2,
       MUX_fp_a_write_1__SEL_1,
       MUX_fp_a_write_1__SEL_2;

  // remaining internal signals
  wire [49 : 0] IF_temp_A_BIT_0_XOR_INV_temp_B_18_00_PLUS_1_01_ETC__q11,
		IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10,
		INV_temp_B_18_00_PLUS_1___d501;
  wire [47 : 0] temp_A_25_BIT_47_33_XOR_INV_temp_B_18_00_PLUS__ETC___d821,
		temp_A_25_BIT_47_33_XOR_temp_B_18_BIT_47_34_36_ETC___d495;
  wire [45 : 0] temp_A_25_BIT_45_41_XOR_INV_temp_B_18_00_PLUS__ETC___d820,
		temp_A_25_BIT_45_41_XOR_temp_B_18_BIT_45_42_44_ETC___d494;
  wire [43 : 0] temp_A_25_BIT_43_49_XOR_INV_temp_B_18_00_PLUS__ETC___d819,
		temp_A_25_BIT_43_49_XOR_temp_B_18_BIT_43_50_52_ETC___d493;
  wire [41 : 0] temp_A_25_BIT_41_57_XOR_INV_temp_B_18_00_PLUS__ETC___d818,
		temp_A_25_BIT_41_57_XOR_temp_B_18_BIT_41_58_60_ETC___d492;
  wire [39 : 0] temp_A_25_BIT_39_65_XOR_INV_temp_B_18_00_PLUS__ETC___d817,
		temp_A_25_BIT_39_65_XOR_temp_B_18_BIT_39_66_68_ETC___d491;
  wire [37 : 0] temp_A_25_BIT_37_73_XOR_INV_temp_B_18_00_PLUS__ETC___d816,
		temp_A_25_BIT_37_73_XOR_temp_B_18_BIT_37_74_76_ETC___d490;
  wire [35 : 0] temp_A_25_BIT_35_81_XOR_INV_temp_B_18_00_PLUS__ETC___d815,
		temp_A_25_BIT_35_81_XOR_temp_B_18_BIT_35_82_84_ETC___d489;
  wire [33 : 0] temp_A_25_BIT_33_89_XOR_INV_temp_B_18_00_PLUS__ETC___d814,
		temp_A_25_BIT_33_89_XOR_temp_B_18_BIT_33_90_92_ETC___d488;
  wire [31 : 0] temp_A_25_BIT_31_97_XOR_INV_temp_B_18_00_PLUS__ETC___d813,
		temp_A_25_BIT_31_97_XOR_temp_B_18_BIT_31_98_00_ETC___d487;
  wire [30 : 0] IF_IF_temp_sum_29_BIT_48_30_THEN_IF_NOT_temp_s_ETC__q12,
		IF_IF_temp_sum_29_BIT_49_74_THEN_IF_NOT_temp_s_ETC__q13;
  wire [29 : 0] temp_A_25_BIT_29_05_XOR_INV_temp_B_18_00_PLUS__ETC___d812,
		temp_A_25_BIT_29_05_XOR_temp_B_18_BIT_29_06_08_ETC___d486;
  wire [27 : 0] temp_A_25_BIT_27_13_XOR_INV_temp_B_18_00_PLUS__ETC___d811,
		temp_A_25_BIT_27_13_XOR_temp_B_18_BIT_27_14_16_ETC___d485;
  wire [25 : 0] temp_A_25_BIT_25_21_XOR_INV_temp_B_18_00_PLUS__ETC___d810,
		temp_A_25_BIT_25_21_XOR_temp_B_18_BIT_25_22_24_ETC___d484;
  wire [24 : 0] IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5,
		IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [23 : 0] temp_A_25_BIT_23_29_XOR_INV_temp_B_18_00_PLUS__ETC___d809,
		temp_A_25_BIT_23_29_XOR_temp_B_18_BIT_23_30_32_ETC___d483;
  wire [22 : 0] IF_NOT_temp_sum_29_BIT_23_111_112_OR_temp_sum__ETC___d1223,
		IF_NOT_temp_sum_29_BIT_24_66_67_OR_temp_sum_29_ETC___d1100,
		IF_NOT_temp_sum_29_BIT_25_75_76_OR_temp_sum_29_ETC___d1049,
		IF_temp_sum_29_BIT_48_30_THEN_IF_NOT_temp_sum__ETC___d1224,
		IF_temp_sum_29_BIT_49_74_THEN_IF_NOT_temp_sum__ETC___d1101,
		x__h33678,
		x__h33701,
		x__h55168,
		x__h55191,
		x__h60447,
		x__h60470;
  wire [21 : 0] temp_A_25_BIT_21_37_XOR_INV_temp_B_18_00_PLUS__ETC___d808,
		temp_A_25_BIT_21_37_XOR_temp_B_18_BIT_21_38_40_ETC___d482;
  wire [19 : 0] temp_A_25_BIT_19_45_XOR_INV_temp_B_18_00_PLUS__ETC___d807,
		temp_A_25_BIT_19_45_XOR_temp_B_18_BIT_19_46_48_ETC___d481;
  wire [17 : 0] temp_A_25_BIT_17_53_XOR_INV_temp_B_18_00_PLUS__ETC___d806,
		temp_A_25_BIT_17_53_XOR_temp_B_18_BIT_17_54_56_ETC___d480;
  wire [15 : 0] temp_A_25_BIT_15_61_XOR_INV_temp_B_18_00_PLUS__ETC___d805,
		temp_A_25_BIT_15_61_XOR_temp_B_18_BIT_15_62_64_ETC___d479;
  wire [13 : 0] temp_A_25_BIT_13_69_XOR_INV_temp_B_18_00_PLUS__ETC___d804,
		temp_A_25_BIT_13_69_XOR_temp_B_18_BIT_13_70_72_ETC___d478;
  wire [11 : 0] temp_A_25_BIT_11_77_XOR_INV_temp_B_18_00_PLUS__ETC___d803,
		temp_A_25_BIT_11_77_XOR_temp_B_18_BIT_11_78_80_ETC___d477;
  wire [9 : 0] temp_A_25_BIT_9_85_XOR_INV_temp_B_18_00_PLUS_1_ETC___d802,
	       temp_A_25_BIT_9_85_XOR_temp_B_18_BIT_9_86_88_X_ETC___d476;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_exp___19931_BIT_0_THEN_1_ELSE_0__q7,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h38954,
	       _theResult___snd__h55165,
	       _theResult___snd_fst__h39029,
	       _theResult___snd_fst__h42028,
	       _theResult___snd_fst__h42036,
	       _theResult___snd_fst__h60519,
	       _theResult___snd_fst__h60527,
	       exp___1__h49931,
	       fp_a_0_BIT_30_0_XOR_fp_a_0_BIT_29_8_AND_fp_a_0_ETC___d963,
	       temp_A_25_BIT_7_93_XOR_INV_temp_B_18_00_PLUS_1_ETC___d801,
	       temp_A_25_BIT_7_93_XOR_temp_B_18_BIT_7_94_96_X_ETC___d475,
	       x__h39026,
	       x__h60516,
	       x_exponent__h26055;
  wire [5 : 0] INV_fp_a_0_BIT_28_2_34_XOR_fp_a_0_BIT_27_6_OR__ETC___d863,
	       fp_a_0_BITS_30_TO_23_1_MINUS_0b1_117_BIT_5_144_ETC___d1168,
	       fp_a_0_BIT_28_2_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d111,
	       fp_a_0_BIT_28_2_XOR_fp_a_0_BIT_27_6_AND_fp_a_0_ETC___d962,
	       temp_A_25_BIT_5_01_XOR_INV_temp_B_18_00_PLUS_1_ETC___d800,
	       temp_A_25_BIT_5_01_XOR_temp_B_18_BIT_5_02_04_X_ETC___d474;
  wire [4 : 0] temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1212,
	       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1089,
	       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1038;
  wire [3 : 0] INV_fp_a_0_BIT_26_0_36_XOR_fp_a_0_BIT_25_4_OR__ETC___d862,
	       fp_a_0_BIT_26_0_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d110,
	       fp_a_0_BIT_26_0_XOR_fp_a_0_BIT_25_4_AND_fp_a_0_ETC___d961,
	       temp_A_25_BIT_3_09_XOR_INV_temp_B_18_00_PLUS_1_ETC___d799,
	       temp_A_25_BIT_3_09_XOR_temp_B_18_BIT_3_10_12_X_ETC___d473;
  wire [1 : 0] fp_a_0_BIT_24_8_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d109,
	       temp_A_25_BIT_1_17_XOR_INV_temp_B_18_00_PLUS_1_ETC___d798,
	       temp_A_25_BIT_1_17_XOR_temp_B_18_BIT_1_18_20_X_ETC___d472;
  wire NOT_fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_T_ETC___d32,
       fp_a_0_BITS_22_TO_0_5_EQ_fp_b_2_BITS_22_TO_0_6___d17,
       fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_TO_23_3___d14,
       fp_a_0_BIT_30_0_XOR_fp_a_0_BIT_29_8_AND_fp_a_0_ETC___d889,
       fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21,
       got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113,
       temp_sum_29_BIT_24_66_XOR_temp_sum_29_BIT_23_111___d1196,
       temp_sum_29_BIT_25_75_XOR_temp_sum_29_BIT_24_6_ETC___d1195,
       temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_75___d1073,
       temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_7_ETC___d1194,
       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_79___d1022,
       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1072,
       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1193,
       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1021,
       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1071,
       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1192,
       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1020,
       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1070,
       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1191,
       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1019,
       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1069,
       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1190,
       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1018,
       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1068,
       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1189,
       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1017,
       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1067,
       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1188,
       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1016,
       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1066,
       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1187,
       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1015,
       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1065,
       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1186,
       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1014,
       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1064,
       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1185,
       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1013,
       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1063,
       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1184,
       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1012,
       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1062,
       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1183,
       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1011,
       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1061,
       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1182,
       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1010,
       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1060,
       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1181,
       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1009,
       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1059,
       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1180,
       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1008,
       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1058,
       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1179,
       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1007,
       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1057,
       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1178,
       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1006,
       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1056,
       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1177,
       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1005,
       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1055,
       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1176,
       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1004,
       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1054,
       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1175,
       temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1003,
       temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1053,
       temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1002,
       temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1052,
       temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1141,
       temp_sum_29_BIT_48_30_XOR_temp_sum_29_BIT_47_0_ETC___d1001,
       temp_sum_29_BIT_49_74_AND_temp_sum_29_BIT_48_3_ETC___d943,
       temp_sum_29_BIT_49_74_XOR_temp_sum_29_BIT_48_3_ETC___d995,
       x__h10111,
       x__h10158,
       x__h10303,
       x__h10350,
       x__h10495,
       x__h10542,
       x__h10687,
       x__h10734,
       x__h10879,
       x__h10926,
       x__h11071,
       x__h11118,
       x__h11263,
       x__h11310,
       x__h11455,
       x__h11502,
       x__h11647,
       x__h11694,
       x__h11839,
       x__h11886,
       x__h12031,
       x__h12078,
       x__h12223,
       x__h12270,
       x__h12415,
       x__h12462,
       x__h12607,
       x__h12654,
       x__h12799,
       x__h12846,
       x__h12991,
       x__h13038,
       x__h13183,
       x__h13230,
       x__h13375,
       x__h13422,
       x__h13567,
       x__h13614,
       x__h13759,
       x__h13806,
       x__h13951,
       x__h13998,
       x__h14143,
       x__h14190,
       x__h14335,
       x__h14382,
       x__h14527,
       x__h14574,
       x__h14719,
       x__h14766,
       x__h14911,
       x__h14958,
       x__h15044,
       x__h15103,
       x__h15150,
       x__h16569,
       x__h16698,
       x__h16757,
       x__h16890,
       x__h16949,
       x__h17082,
       x__h17141,
       x__h17274,
       x__h17333,
       x__h17466,
       x__h17525,
       x__h17658,
       x__h17717,
       x__h17850,
       x__h17909,
       x__h18042,
       x__h18101,
       x__h18234,
       x__h18293,
       x__h18426,
       x__h18485,
       x__h18618,
       x__h18677,
       x__h18810,
       x__h18869,
       x__h19002,
       x__h19061,
       x__h19194,
       x__h19253,
       x__h19386,
       x__h19445,
       x__h19578,
       x__h19637,
       x__h19770,
       x__h19829,
       x__h19962,
       x__h20021,
       x__h20154,
       x__h20213,
       x__h20346,
       x__h20405,
       x__h20538,
       x__h20597,
       x__h20730,
       x__h20789,
       x__h20922,
       x__h20981,
       x__h21114,
       x__h21173,
       x__h21306,
       x__h21365,
       x__h21498,
       x__h21557,
       x__h21690,
       x__h21749,
       x__h21882,
       x__h21941,
       x__h22074,
       x__h22133,
       x__h22266,
       x__h22325,
       x__h22458,
       x__h22517,
       x__h22650,
       x__h22709,
       x__h22842,
       x__h22901,
       x__h23034,
       x__h23093,
       x__h23226,
       x__h23285,
       x__h23418,
       x__h23477,
       x__h23610,
       x__h23669,
       x__h23802,
       x__h23861,
       x__h23994,
       x__h24053,
       x__h24186,
       x__h24245,
       x__h24378,
       x__h24437,
       x__h24570,
       x__h24629,
       x__h24762,
       x__h24821,
       x__h24954,
       x__h25013,
       x__h25146,
       x__h25205,
       x__h25338,
       x__h25397,
       x__h25530,
       x__h25589,
       x__h25722,
       x__h25781,
       x__h26320,
       x__h26447,
       x__h26635,
       x__h26823,
       x__h27011,
       x__h27199,
       x__h27387,
       x__h3065,
       x__h3192,
       x__h3249,
       x__h3378,
       x__h3435,
       x__h3564,
       x__h3621,
       x__h3750,
       x__h3807,
       x__h3936,
       x__h3993,
       x__h40793,
       x__h40919,
       x__h41105,
       x__h4122,
       x__h41291,
       x__h41477,
       x__h41663,
       x__h4179,
       x__h6079,
       x__h6126,
       x__h6271,
       x__h6318,
       x__h6463,
       x__h6510,
       x__h6655,
       x__h6702,
       x__h6847,
       x__h6894,
       x__h7039,
       x__h7086,
       x__h7231,
       x__h7278,
       x__h7423,
       x__h7470,
       x__h7615,
       x__h7662,
       x__h7807,
       x__h7854,
       x__h7999,
       x__h8046,
       x__h8191,
       x__h8238,
       x__h8383,
       x__h8430,
       x__h8575,
       x__h8622,
       x__h8767,
       x__h8814,
       x__h8959,
       x__h9006,
       x__h9151,
       x__h9198,
       x__h9343,
       x__h9390,
       x__h9535,
       x__h9582,
       x__h9727,
       x__h9774,
       x__h9919,
       x__h9966,
       y__h10053,
       y__h10112,
       y__h10245,
       y__h10304,
       y__h10437,
       y__h10496,
       y__h10629,
       y__h10688,
       y__h10821,
       y__h10880,
       y__h11013,
       y__h11072,
       y__h11205,
       y__h11264,
       y__h11397,
       y__h11456,
       y__h11589,
       y__h11648,
       y__h11781,
       y__h11840,
       y__h11973,
       y__h12032,
       y__h12165,
       y__h12224,
       y__h12357,
       y__h12416,
       y__h12549,
       y__h12608,
       y__h12741,
       y__h12800,
       y__h12933,
       y__h12992,
       y__h13125,
       y__h13184,
       y__h13317,
       y__h13376,
       y__h13509,
       y__h13568,
       y__h13701,
       y__h13760,
       y__h13893,
       y__h13952,
       y__h14085,
       y__h14144,
       y__h14277,
       y__h14336,
       y__h14469,
       y__h14528,
       y__h14661,
       y__h14720,
       y__h14853,
       y__h14912,
       y__h15045,
       y__h15104,
       y__h16570,
       y__h16699,
       y__h16758,
       y__h16891,
       y__h16950,
       y__h17083,
       y__h17142,
       y__h17275,
       y__h17334,
       y__h17467,
       y__h17526,
       y__h17659,
       y__h17718,
       y__h17851,
       y__h17910,
       y__h18043,
       y__h18102,
       y__h18235,
       y__h18294,
       y__h18427,
       y__h18486,
       y__h18619,
       y__h18678,
       y__h18811,
       y__h18870,
       y__h19003,
       y__h19062,
       y__h1908,
       y__h19195,
       y__h19254,
       y__h19387,
       y__h19446,
       y__h19579,
       y__h19638,
       y__h19771,
       y__h19830,
       y__h19963,
       y__h20022,
       y__h20155,
       y__h20214,
       y__h20347,
       y__h20406,
       y__h20539,
       y__h20598,
       y__h20731,
       y__h20790,
       y__h20923,
       y__h2097,
       y__h20982,
       y__h21115,
       y__h21174,
       y__h21307,
       y__h21366,
       y__h21499,
       y__h21558,
       y__h21691,
       y__h21750,
       y__h21883,
       y__h21942,
       y__h22075,
       y__h22134,
       y__h22267,
       y__h22326,
       y__h22459,
       y__h22518,
       y__h22651,
       y__h22710,
       y__h22843,
       y__h2286,
       y__h22902,
       y__h23035,
       y__h23094,
       y__h23227,
       y__h23286,
       y__h23419,
       y__h23478,
       y__h23611,
       y__h23670,
       y__h23803,
       y__h23862,
       y__h23995,
       y__h24054,
       y__h24187,
       y__h24246,
       y__h24379,
       y__h24438,
       y__h24571,
       y__h24630,
       y__h2475,
       y__h24763,
       y__h24822,
       y__h24955,
       y__h25014,
       y__h25147,
       y__h25206,
       y__h25339,
       y__h25398,
       y__h25531,
       y__h25590,
       y__h25723,
       y__h25782,
       y__h26448,
       y__h26506,
       y__h26636,
       y__h2664,
       y__h26694,
       y__h26824,
       y__h26882,
       y__h27012,
       y__h27070,
       y__h27200,
       y__h27258,
       y__h27388,
       y__h27446,
       y__h2853,
       y__h29404,
       y__h29590,
       y__h29776,
       y__h29962,
       y__h30148,
       y__h30334,
       y__h30520,
       y__h3066,
       y__h3068,
       y__h30706,
       y__h30892,
       y__h31078,
       y__h31264,
       y__h31450,
       y__h31636,
       y__h31822,
       y__h3193,
       y__h3195,
       y__h32008,
       y__h32194,
       y__h32380,
       y__h3250,
       y__h32566,
       y__h32752,
       y__h32938,
       y__h33124,
       y__h33310,
       y__h3379,
       y__h3381,
       y__h3436,
       y__h3565,
       y__h3567,
       y__h3622,
       y__h3751,
       y__h3753,
       y__h3808,
       y__h3937,
       y__h3939,
       y__h39423,
       y__h39609,
       y__h39795,
       y__h3994,
       y__h39981,
       y__h40167,
       y__h40353,
       y__h40920,
       y__h41106,
       y__h4123,
       y__h4125,
       y__h41292,
       y__h41478,
       y__h41664,
       y__h4180,
       y__h41850,
       y__h50894,
       y__h51080,
       y__h51266,
       y__h51452,
       y__h51638,
       y__h51824,
       y__h52010,
       y__h52196,
       y__h52382,
       y__h52568,
       y__h52754,
       y__h52940,
       y__h53126,
       y__h53312,
       y__h53498,
       y__h53684,
       y__h53870,
       y__h54056,
       y__h54242,
       y__h54428,
       y__h54614,
       y__h54800,
       y__h54986,
       y__h56173,
       y__h56359,
       y__h56545,
       y__h56731,
       y__h56917,
       y__h57103,
       y__h57289,
       y__h57475,
       y__h57661,
       y__h57847,
       y__h58033,
       y__h58219,
       y__h58405,
       y__h58591,
       y__h58777,
       y__h58963,
       y__h59149,
       y__h59335,
       y__h59521,
       y__h59707,
       y__h59893,
       y__h60079,
       y__h6021,
       y__h60265,
       y__h6080,
       y__h60920,
       y__h61109,
       y__h6127,
       y__h61298,
       y__h61487,
       y__h61676,
       y__h61865,
       y__h6213,
       y__h6272,
       y__h6405,
       y__h6464,
       y__h6597,
       y__h6656,
       y__h6789,
       y__h6848,
       y__h6981,
       y__h7040,
       y__h7173,
       y__h7232,
       y__h7365,
       y__h7424,
       y__h7557,
       y__h7616,
       y__h7749,
       y__h7808,
       y__h7941,
       y__h8000,
       y__h8133,
       y__h8192,
       y__h8325,
       y__h8384,
       y__h8517,
       y__h8576,
       y__h8709,
       y__h8768,
       y__h8901,
       y__h8960,
       y__h9093,
       y__h9152,
       y__h9285,
       y__h9344,
       y__h9477,
       y__h9536,
       y__h9669,
       y__h9728,
       y__h9861,
       y__h9920;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = assembled_answer ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     got_A && got_B && !operands_swapped_if_needed && !handle_zero ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff =
	     got_A && got_B && operands_swapped_if_needed &&
	     !expdiff_calculated &&
	     !handle_zero ;
  assign WILL_FIRE_RL_calculate_expdiff = CAN_FIRE_RL_calculate_expdiff ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 &&
	     round_addition_result &&
	     !round_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_round_sub
  assign CAN_FIRE_RL_round_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 &&
	     round_subtraction_result &&
	     !round_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_round_sub =
	     CAN_FIRE_RL_round_sub && !WILL_FIRE_RL_round_add ;

  // rule RL_adjust_subres
  assign CAN_FIRE_RL_adjust_subres =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 &&
	     add_prep_done &&
	     adj_sub &&
	     !adj_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_adjust_subres = CAN_FIRE_RL_adjust_subres ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 &&
	     add_prep_done &&
	     do_add &&
	     !handle_zero ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_sub
  assign CAN_FIRE_RL_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 &&
	     add_prep_done &&
	     do_sub &&
	     !handle_zero ;
  assign WILL_FIRE_RL_sub = CAN_FIRE_RL_sub ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 &&
	     round_done &&
	     !assembled_answer &&
	     !handle_zero ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 &&
	     !add_prep_done &&
	     !handle_zero ;
  assign WILL_FIRE_RL_add_prep = CAN_FIRE_RL_add_prep ;

  // rule RL_handle_zero_case
  assign CAN_FIRE_RL_handle_zero_case = handle_zero ;
  assign WILL_FIRE_RL_handle_zero_case = handle_zero ;

  // rule RL_deassert_assembled_answer
  assign CAN_FIRE_RL_deassert_assembled_answer = assembled_answer ;
  assign WILL_FIRE_RL_deassert_assembled_answer =
	     assembled_answer && !handle_zero ;

  // inputs to muxes for submodule ports
  assign MUX_do_add_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21 ;
  assign MUX_do_sub_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21 ;
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_T_ETC___d32 ;
  assign MUX_fp_a_write_1__SEL_2 =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_2 =
	     { x__h60516,
	       IF_temp_sum_29_BIT_48_30_THEN_IF_NOT_temp_sum__ETC___d1224[22:1],
	       IF_IF_temp_sum_29_BIT_48_30_THEN_IF_NOT_temp_s_ETC__q12[0] } ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_3 =
	     { x__h39026,
	       IF_temp_sum_29_BIT_49_74_THEN_IF_NOT_temp_sum__ETC___d1101[22:1],
	       IF_IF_temp_sum_29_BIT_49_74_THEN_IF_NOT_temp_s_ETC__q13[0] } ;
  assign MUX_fp_a_write_1__VAL_2 =
	     { fp_a[31], x_exponent__h26055, fp_a[22:0] } ;
  assign MUX_fp_a_write_1__VAL_3 = { get_A_a, 16'b0 } ;
  assign MUX_fp_c_write_1__VAL_1 = { sign_c, add_res_with_adj_exp } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_2 =
	     { x__h25722 ^ y__h25723,
	       x__h25530 ^ y__h25531,
	       temp_A_25_BIT_47_33_XOR_INV_temp_B_18_00_PLUS__ETC___d821 } ;
  assign MUX_temp_sum_write_1__VAL_3 =
	     { x__h15044 ^ y__h15045,
	       x__h15150 ^ y__h14853,
	       temp_A_25_BIT_47_33_XOR_temp_B_18_BIT_47_34_36_ETC___d495 } ;
  assign MUX_temp_sum_write_1__VAL_4 = { temp_sum[48:0], 1'd0 } ;

  // register add_done
  assign add_done_D_IN = 1'd0 ;
  assign add_done_EN = WILL_FIRE_RL_deassert_assembled_answer ;

  // register add_prep_done
  assign add_prep_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign add_prep_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_round_sub or
	  MUX_add_res_with_adj_exp_write_1__VAL_2 or
	  WILL_FIRE_RL_round_add or MUX_add_res_with_adj_exp_write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: add_res_with_adj_exp_D_IN = 31'd0;
    WILL_FIRE_RL_round_sub:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_2;
    WILL_FIRE_RL_round_add:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_3;
    default: add_res_with_adj_exp_D_IN =
		 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_done
  assign adj_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_done_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_sub
  assign adj_sub_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_sub_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_sub ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || handle_zero ||
	     WILL_FIRE_RL_assemble_answer ;

  // register do_add
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_add_write_1__SEL_2 or WILL_FIRE_RL_add)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_add_D_IN = 1'd0;
    MUX_do_add_write_1__SEL_2: do_add_D_IN = 1'd1;
    WILL_FIRE_RL_add: do_add_D_IN = 1'd0;
    default: do_add_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_add_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21 ||
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_add ;

  // register do_sub
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_sub_write_1__SEL_2 or WILL_FIRE_RL_sub)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_sub_D_IN = 1'd0;
    MUX_do_sub_write_1__SEL_2: do_sub_D_IN = 1'd1;
    WILL_FIRE_RL_sub: do_sub_D_IN = 1'd0;
    default: do_sub_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_sub_EN =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21 ||
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_sub ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h4122 ^ y__h4123,
	       x__h3936 ^ y__h3937,
	       fp_a_0_BIT_28_2_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d111 } ;
  assign expdiff_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign expdiff_calculated_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  always@(MUX_fp_a_write_1__SEL_1 or
	  fp_b or
	  MUX_fp_a_write_1__SEL_2 or
	  MUX_fp_a_write_1__VAL_2 or EN_get_A or MUX_fp_a_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fp_a_write_1__SEL_1: fp_a_D_IN = fp_b;
      MUX_fp_a_write_1__SEL_2: fp_a_D_IN = MUX_fp_a_write_1__VAL_2;
      EN_get_A: fp_a_D_IN = MUX_fp_a_write_1__VAL_3;
      default: fp_a_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_T_ETC___d32 ||
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     EN_get_A ;

  // register fp_b
  assign fp_b_D_IN = MUX_fp_a_write_1__SEL_1 ? fp_a : get_B_b ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_T_ETC___d32 ||
	     EN_get_B ;

  // register fp_c
  assign fp_c_D_IN =
	     WILL_FIRE_RL_assemble_answer ? MUX_fp_c_write_1__VAL_1 : 32'd0 ;
  assign fp_c_EN = WILL_FIRE_RL_assemble_answer || handle_zero ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign got_A_EN = WILL_FIRE_RL_deassert_assembled_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign got_B_EN = WILL_FIRE_RL_deassert_assembled_answer || EN_get_B ;

  // register handle_zero
  assign handle_zero_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer && !handle_zero ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_TO_23_3___d14 &&
	     fp_a_0_BITS_22_TO_0_5_EQ_fp_b_2_BITS_22_TO_0_6___d17 &&
	     !fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21 ||
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     handle_zero ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign operands_swapped_if_needed_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     (!fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_TO_23_3___d14 ||
	      !fp_a_0_BITS_22_TO_0_5_EQ_fp_b_2_BITS_22_TO_0_6___d17 ||
	      fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21) ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register round_addition_result
  assign round_addition_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_addition_result_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_subtraction_result_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = CAN_FIRE_RL_add_prep ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = CAN_FIRE_RL_calculate_expdiff ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_add_prep ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN = WILL_FIRE_RL_add_prep || WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_sub or
	  MUX_temp_sum_write_1__VAL_2 or
	  WILL_FIRE_RL_add or
	  MUX_temp_sum_write_1__VAL_3 or
	  MUX_fp_a_write_1__SEL_2 or MUX_temp_sum_write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: temp_sum_D_IN = 50'd0;
    WILL_FIRE_RL_sub: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_2;
    WILL_FIRE_RL_add: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_3;
    MUX_fp_a_write_1__SEL_2: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_4;
    default: temp_sum_D_IN =
		 50'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign temp_sum_EN =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_add ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_29_BIT_48_30_THEN_IF_NOT_temp_s_ETC__q12 =
	     IF_temp_sum_29_BIT_48_30_THEN_IF_NOT_temp_sum__ETC___d1224[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_IF_temp_sum_29_BIT_49_74_THEN_IF_NOT_temp_s_ETC__q13 =
	     IF_temp_sum_29_BIT_49_74_THEN_IF_NOT_temp_sum__ETC___d1101[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_exp___19931_BIT_0_THEN_1_ELSE_0__q7 =
	     (~exp___1__h49931[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5 =
	     (~temp_sum[23]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_NOT_temp_sum_29_BIT_23_111_112_OR_temp_sum__ETC___d1223 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       temp_sum[46:24] :
	       (temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1141 ?
		  x__h55168 :
		  x__h55191) ;
  assign IF_NOT_temp_sum_29_BIT_24_66_67_OR_temp_sum_29_ETC___d1100 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_29_BIT_49_74_XOR_temp_sum_29_BIT_48_3_ETC___d995 ?
		  x__h60447 :
		  x__h60470) ;
  assign IF_NOT_temp_sum_29_BIT_25_75_76_OR_temp_sum_29_ETC___d1049 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_29_BIT_49_74_AND_temp_sum_29_BIT_48_3_ETC___d943 ?
		  x__h33678 :
		  x__h33701) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_A_BIT_0_XOR_INV_temp_B_18_00_PLUS_1_01_ETC__q11 =
	     (temp_A[0] ^ INV_temp_B_18_00_PLUS_1___d501[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10 =
	     (temp_A[0] ^ temp_B[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_sum_29_BIT_48_30_THEN_IF_NOT_temp_sum__ETC___d1224 =
	     temp_sum[48] ?
	       IF_NOT_temp_sum_29_BIT_24_66_67_OR_temp_sum_29_ETC___d1100 :
	       IF_NOT_temp_sum_29_BIT_23_111_112_OR_temp_sum__ETC___d1223 ;
  assign IF_temp_sum_29_BIT_49_74_THEN_IF_NOT_temp_sum__ETC___d1101 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_29_BIT_25_75_76_OR_temp_sum_29_ETC___d1049 :
	       IF_NOT_temp_sum_29_BIT_24_66_67_OR_temp_sum_29_ETC___d1100 ;
  assign INV_fp_a_0_BIT_26_0_36_XOR_fp_a_0_BIT_25_4_OR__ETC___d862 =
	     { x__h26635 ^ y__h26636,
	       x__h26447 ^ y__h26448,
	       x__h26320 ^ fp_a[23],
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign INV_fp_a_0_BIT_28_2_34_XOR_fp_a_0_BIT_27_6_OR__ETC___d863 =
	     { x__h27011 ^ y__h27012,
	       x__h26823 ^ y__h26824,
	       INV_fp_a_0_BIT_26_0_36_XOR_fp_a_0_BIT_25_4_OR__ETC___d862 } ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign INV_temp_B_18_00_PLUS_1___d501 = ~temp_B + 50'd1 ;
  assign NOT_fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_T_ETC___d32 =
	     (!fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_TO_23_3___d14 ||
	      !fp_a_0_BITS_22_TO_0_5_EQ_fp_b_2_BITS_22_TO_0_6___d17 ||
	      fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21) &&
	     (fp_a[30:23] < fp_b[30:23] ||
	      fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_TO_23_3___d14 &&
	      fp_a[22:0] < fp_b[22:0]) ;
  assign _theResult___snd__h38954 =
	     { fp_a_0_BIT_30_0_XOR_fp_a_0_BIT_29_8_AND_fp_a_0_ETC___d889,
	       x__h41663,
	       x__h41477,
	       x__h41291,
	       x__h41105,
	       x__h40919,
	       x__h40793,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd__h55165 =
	     { exp___1__h49931[7] ^ y__h61865,
	       exp___1__h49931[6] ^ y__h61676,
	       fp_a_0_BITS_30_TO_23_1_MINUS_0b1_117_BIT_5_144_ETC___d1168 } ;
  assign _theResult___snd_fst__h39029 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h38954 :
	       (temp_sum_29_BIT_49_74_AND_temp_sum_29_BIT_48_3_ETC___d943 ?
		  fp_a_0_BIT_30_0_XOR_fp_a_0_BIT_29_8_AND_fp_a_0_ETC___d963 :
		  _theResult___snd__h38954) ;
  assign _theResult___snd_fst__h42028 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h42036 ;
  assign _theResult___snd_fst__h42036 =
	     temp_sum_29_BIT_49_74_XOR_temp_sum_29_BIT_48_3_ETC___d995 ?
	       _theResult___snd__h38954 :
	       fp_a[30:23] ;
  assign _theResult___snd_fst__h60519 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       exp___1__h49931 :
	       _theResult___snd_fst__h60527 ;
  assign _theResult___snd_fst__h60527 =
	     temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1141 ?
	       _theResult___snd__h55165 :
	       exp___1__h49931 ;
  assign exp___1__h49931 = fp_a[30:23] - 8'b00000001 ;
  assign fp_a_0_BITS_22_TO_0_5_EQ_fp_b_2_BITS_22_TO_0_6___d17 =
	     fp_a[22:0] == fp_b[22:0] ;
  assign fp_a_0_BITS_30_TO_23_1_EQ_fp_b_2_BITS_30_TO_23_3___d14 =
	     fp_a[30:23] == fp_b[30:23] ;
  assign fp_a_0_BITS_30_TO_23_1_MINUS_0b1_117_BIT_5_144_ETC___d1168 =
	     { exp___1__h49931[5] ^ y__h61487,
	       exp___1__h49931[4] ^ y__h61298,
	       exp___1__h49931[3] ^ y__h61109,
	       exp___1__h49931[2] ^ y__h60920,
	       exp___1__h49931[1] ^ exp___1__h49931[0],
	       IF_INV_exp___19931_BIT_0_THEN_1_ELSE_0__q7[0] } ;
  assign fp_a_0_BIT_24_8_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d109 =
	     { x__h3065 ^ y__h3066,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9[0] } ;
  assign fp_a_0_BIT_26_0_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d110 =
	     { x__h3378 ^ y__h3379,
	       x__h3192 ^ y__h3193,
	       fp_a_0_BIT_24_8_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d109 } ;
  assign fp_a_0_BIT_26_0_XOR_fp_a_0_BIT_25_4_AND_fp_a_0_ETC___d961 =
	     { x__h41105 ^ y__h41106,
	       x__h40919 ^ y__h40920,
	       x__h40793 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8[0] } ;
  assign fp_a_0_BIT_28_2_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d111 =
	     { x__h3750 ^ y__h3751,
	       x__h3564 ^ y__h3565,
	       fp_a_0_BIT_26_0_XOR_INV_fp_b_2_BITS_30_TO_23_3_ETC___d110 } ;
  assign fp_a_0_BIT_28_2_XOR_fp_a_0_BIT_27_6_AND_fp_a_0_ETC___d962 =
	     { x__h41477 ^ y__h41478,
	       x__h41291 ^ y__h41292,
	       fp_a_0_BIT_26_0_XOR_fp_a_0_BIT_25_4_AND_fp_a_0_ETC___d961 } ;
  assign fp_a_0_BIT_30_0_XOR_fp_a_0_BIT_29_8_AND_fp_a_0_ETC___d889 =
	     fp_a[30] ^ y__h40353 ;
  assign fp_a_0_BIT_30_0_XOR_fp_a_0_BIT_29_8_AND_fp_a_0_ETC___d963 =
	     { fp_a_0_BIT_30_0_XOR_fp_a_0_BIT_29_8_AND_fp_a_0_ETC___d889 ^
	       y__h41850,
	       x__h41663 ^ y__h41664,
	       fp_a_0_BIT_28_2_XOR_fp_a_0_BIT_27_6_AND_fp_a_0_ETC___d962 } ;
  assign fp_a_0_BIT_31_9_EQ_fp_b_2_BIT_31_0___d21 = fp_a[31] == fp_b[31] ;
  assign got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d113 =
	     got_A && got_B && operands_swapped_if_needed &&
	     expdiff_calculated ;
  assign temp_A_25_BIT_11_77_XOR_INV_temp_B_18_00_PLUS__ETC___d803 =
	     { x__h18426 ^ y__h18427,
	       x__h18234 ^ y__h18235,
	       temp_A_25_BIT_9_85_XOR_INV_temp_B_18_00_PLUS_1_ETC___d802 } ;
  assign temp_A_25_BIT_11_77_XOR_temp_B_18_BIT_11_78_80_ETC___d477 =
	     { x__h8046 ^ y__h7749,
	       x__h7854 ^ y__h7557,
	       temp_A_25_BIT_9_85_XOR_temp_B_18_BIT_9_86_88_X_ETC___d476 } ;
  assign temp_A_25_BIT_13_69_XOR_INV_temp_B_18_00_PLUS__ETC___d804 =
	     { x__h18810 ^ y__h18811,
	       x__h18618 ^ y__h18619,
	       temp_A_25_BIT_11_77_XOR_INV_temp_B_18_00_PLUS__ETC___d803 } ;
  assign temp_A_25_BIT_13_69_XOR_temp_B_18_BIT_13_70_72_ETC___d478 =
	     { x__h8430 ^ y__h8133,
	       x__h8238 ^ y__h7941,
	       temp_A_25_BIT_11_77_XOR_temp_B_18_BIT_11_78_80_ETC___d477 } ;
  assign temp_A_25_BIT_15_61_XOR_INV_temp_B_18_00_PLUS__ETC___d805 =
	     { x__h19194 ^ y__h19195,
	       x__h19002 ^ y__h19003,
	       temp_A_25_BIT_13_69_XOR_INV_temp_B_18_00_PLUS__ETC___d804 } ;
  assign temp_A_25_BIT_15_61_XOR_temp_B_18_BIT_15_62_64_ETC___d479 =
	     { x__h8814 ^ y__h8517,
	       x__h8622 ^ y__h8325,
	       temp_A_25_BIT_13_69_XOR_temp_B_18_BIT_13_70_72_ETC___d478 } ;
  assign temp_A_25_BIT_17_53_XOR_INV_temp_B_18_00_PLUS__ETC___d806 =
	     { x__h19578 ^ y__h19579,
	       x__h19386 ^ y__h19387,
	       temp_A_25_BIT_15_61_XOR_INV_temp_B_18_00_PLUS__ETC___d805 } ;
  assign temp_A_25_BIT_17_53_XOR_temp_B_18_BIT_17_54_56_ETC___d480 =
	     { x__h9198 ^ y__h8901,
	       x__h9006 ^ y__h8709,
	       temp_A_25_BIT_15_61_XOR_temp_B_18_BIT_15_62_64_ETC___d479 } ;
  assign temp_A_25_BIT_19_45_XOR_INV_temp_B_18_00_PLUS__ETC___d807 =
	     { x__h19962 ^ y__h19963,
	       x__h19770 ^ y__h19771,
	       temp_A_25_BIT_17_53_XOR_INV_temp_B_18_00_PLUS__ETC___d806 } ;
  assign temp_A_25_BIT_19_45_XOR_temp_B_18_BIT_19_46_48_ETC___d481 =
	     { x__h9582 ^ y__h9285,
	       x__h9390 ^ y__h9093,
	       temp_A_25_BIT_17_53_XOR_temp_B_18_BIT_17_54_56_ETC___d480 } ;
  assign temp_A_25_BIT_1_17_XOR_INV_temp_B_18_00_PLUS_1_ETC___d798 =
	     { x__h16569 ^ y__h16570,
	       IF_temp_A_BIT_0_XOR_INV_temp_B_18_00_PLUS_1_01_ETC__q11[0] } ;
  assign temp_A_25_BIT_1_17_XOR_temp_B_18_BIT_1_18_20_X_ETC___d472 =
	     { x__h6126 ^ y__h6127,
	       IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10[0] } ;
  assign temp_A_25_BIT_21_37_XOR_INV_temp_B_18_00_PLUS__ETC___d808 =
	     { x__h20346 ^ y__h20347,
	       x__h20154 ^ y__h20155,
	       temp_A_25_BIT_19_45_XOR_INV_temp_B_18_00_PLUS__ETC___d807 } ;
  assign temp_A_25_BIT_21_37_XOR_temp_B_18_BIT_21_38_40_ETC___d482 =
	     { x__h9966 ^ y__h9669,
	       x__h9774 ^ y__h9477,
	       temp_A_25_BIT_19_45_XOR_temp_B_18_BIT_19_46_48_ETC___d481 } ;
  assign temp_A_25_BIT_23_29_XOR_INV_temp_B_18_00_PLUS__ETC___d809 =
	     { x__h20730 ^ y__h20731,
	       x__h20538 ^ y__h20539,
	       temp_A_25_BIT_21_37_XOR_INV_temp_B_18_00_PLUS__ETC___d808 } ;
  assign temp_A_25_BIT_23_29_XOR_temp_B_18_BIT_23_30_32_ETC___d483 =
	     { x__h10350 ^ y__h10053,
	       x__h10158 ^ y__h9861,
	       temp_A_25_BIT_21_37_XOR_temp_B_18_BIT_21_38_40_ETC___d482 } ;
  assign temp_A_25_BIT_25_21_XOR_INV_temp_B_18_00_PLUS__ETC___d810 =
	     { x__h21114 ^ y__h21115,
	       x__h20922 ^ y__h20923,
	       temp_A_25_BIT_23_29_XOR_INV_temp_B_18_00_PLUS__ETC___d809 } ;
  assign temp_A_25_BIT_25_21_XOR_temp_B_18_BIT_25_22_24_ETC___d484 =
	     { x__h10734 ^ y__h10437,
	       x__h10542 ^ y__h10245,
	       temp_A_25_BIT_23_29_XOR_temp_B_18_BIT_23_30_32_ETC___d483 } ;
  assign temp_A_25_BIT_27_13_XOR_INV_temp_B_18_00_PLUS__ETC___d811 =
	     { x__h21498 ^ y__h21499,
	       x__h21306 ^ y__h21307,
	       temp_A_25_BIT_25_21_XOR_INV_temp_B_18_00_PLUS__ETC___d810 } ;
  assign temp_A_25_BIT_27_13_XOR_temp_B_18_BIT_27_14_16_ETC___d485 =
	     { x__h11118 ^ y__h10821,
	       x__h10926 ^ y__h10629,
	       temp_A_25_BIT_25_21_XOR_temp_B_18_BIT_25_22_24_ETC___d484 } ;
  assign temp_A_25_BIT_29_05_XOR_INV_temp_B_18_00_PLUS__ETC___d812 =
	     { x__h21882 ^ y__h21883,
	       x__h21690 ^ y__h21691,
	       temp_A_25_BIT_27_13_XOR_INV_temp_B_18_00_PLUS__ETC___d811 } ;
  assign temp_A_25_BIT_29_05_XOR_temp_B_18_BIT_29_06_08_ETC___d486 =
	     { x__h11502 ^ y__h11205,
	       x__h11310 ^ y__h11013,
	       temp_A_25_BIT_27_13_XOR_temp_B_18_BIT_27_14_16_ETC___d485 } ;
  assign temp_A_25_BIT_31_97_XOR_INV_temp_B_18_00_PLUS__ETC___d813 =
	     { x__h22266 ^ y__h22267,
	       x__h22074 ^ y__h22075,
	       temp_A_25_BIT_29_05_XOR_INV_temp_B_18_00_PLUS__ETC___d812 } ;
  assign temp_A_25_BIT_31_97_XOR_temp_B_18_BIT_31_98_00_ETC___d487 =
	     { x__h11886 ^ y__h11589,
	       x__h11694 ^ y__h11397,
	       temp_A_25_BIT_29_05_XOR_temp_B_18_BIT_29_06_08_ETC___d486 } ;
  assign temp_A_25_BIT_33_89_XOR_INV_temp_B_18_00_PLUS__ETC___d814 =
	     { x__h22650 ^ y__h22651,
	       x__h22458 ^ y__h22459,
	       temp_A_25_BIT_31_97_XOR_INV_temp_B_18_00_PLUS__ETC___d813 } ;
  assign temp_A_25_BIT_33_89_XOR_temp_B_18_BIT_33_90_92_ETC___d488 =
	     { x__h12270 ^ y__h11973,
	       x__h12078 ^ y__h11781,
	       temp_A_25_BIT_31_97_XOR_temp_B_18_BIT_31_98_00_ETC___d487 } ;
  assign temp_A_25_BIT_35_81_XOR_INV_temp_B_18_00_PLUS__ETC___d815 =
	     { x__h23034 ^ y__h23035,
	       x__h22842 ^ y__h22843,
	       temp_A_25_BIT_33_89_XOR_INV_temp_B_18_00_PLUS__ETC___d814 } ;
  assign temp_A_25_BIT_35_81_XOR_temp_B_18_BIT_35_82_84_ETC___d489 =
	     { x__h12654 ^ y__h12357,
	       x__h12462 ^ y__h12165,
	       temp_A_25_BIT_33_89_XOR_temp_B_18_BIT_33_90_92_ETC___d488 } ;
  assign temp_A_25_BIT_37_73_XOR_INV_temp_B_18_00_PLUS__ETC___d816 =
	     { x__h23418 ^ y__h23419,
	       x__h23226 ^ y__h23227,
	       temp_A_25_BIT_35_81_XOR_INV_temp_B_18_00_PLUS__ETC___d815 } ;
  assign temp_A_25_BIT_37_73_XOR_temp_B_18_BIT_37_74_76_ETC___d490 =
	     { x__h13038 ^ y__h12741,
	       x__h12846 ^ y__h12549,
	       temp_A_25_BIT_35_81_XOR_temp_B_18_BIT_35_82_84_ETC___d489 } ;
  assign temp_A_25_BIT_39_65_XOR_INV_temp_B_18_00_PLUS__ETC___d817 =
	     { x__h23802 ^ y__h23803,
	       x__h23610 ^ y__h23611,
	       temp_A_25_BIT_37_73_XOR_INV_temp_B_18_00_PLUS__ETC___d816 } ;
  assign temp_A_25_BIT_39_65_XOR_temp_B_18_BIT_39_66_68_ETC___d491 =
	     { x__h13422 ^ y__h13125,
	       x__h13230 ^ y__h12933,
	       temp_A_25_BIT_37_73_XOR_temp_B_18_BIT_37_74_76_ETC___d490 } ;
  assign temp_A_25_BIT_3_09_XOR_INV_temp_B_18_00_PLUS_1_ETC___d799 =
	     { x__h16890 ^ y__h16891,
	       x__h16698 ^ y__h16699,
	       temp_A_25_BIT_1_17_XOR_INV_temp_B_18_00_PLUS_1_ETC___d798 } ;
  assign temp_A_25_BIT_3_09_XOR_temp_B_18_BIT_3_10_12_X_ETC___d473 =
	     { x__h6510 ^ y__h6213,
	       x__h6318 ^ y__h6021,
	       temp_A_25_BIT_1_17_XOR_temp_B_18_BIT_1_18_20_X_ETC___d472 } ;
  assign temp_A_25_BIT_41_57_XOR_INV_temp_B_18_00_PLUS__ETC___d818 =
	     { x__h24186 ^ y__h24187,
	       x__h23994 ^ y__h23995,
	       temp_A_25_BIT_39_65_XOR_INV_temp_B_18_00_PLUS__ETC___d817 } ;
  assign temp_A_25_BIT_41_57_XOR_temp_B_18_BIT_41_58_60_ETC___d492 =
	     { x__h13806 ^ y__h13509,
	       x__h13614 ^ y__h13317,
	       temp_A_25_BIT_39_65_XOR_temp_B_18_BIT_39_66_68_ETC___d491 } ;
  assign temp_A_25_BIT_43_49_XOR_INV_temp_B_18_00_PLUS__ETC___d819 =
	     { x__h24570 ^ y__h24571,
	       x__h24378 ^ y__h24379,
	       temp_A_25_BIT_41_57_XOR_INV_temp_B_18_00_PLUS__ETC___d818 } ;
  assign temp_A_25_BIT_43_49_XOR_temp_B_18_BIT_43_50_52_ETC___d493 =
	     { x__h14190 ^ y__h13893,
	       x__h13998 ^ y__h13701,
	       temp_A_25_BIT_41_57_XOR_temp_B_18_BIT_41_58_60_ETC___d492 } ;
  assign temp_A_25_BIT_45_41_XOR_INV_temp_B_18_00_PLUS__ETC___d820 =
	     { x__h24954 ^ y__h24955,
	       x__h24762 ^ y__h24763,
	       temp_A_25_BIT_43_49_XOR_INV_temp_B_18_00_PLUS__ETC___d819 } ;
  assign temp_A_25_BIT_45_41_XOR_temp_B_18_BIT_45_42_44_ETC___d494 =
	     { x__h14574 ^ y__h14277,
	       x__h14382 ^ y__h14085,
	       temp_A_25_BIT_43_49_XOR_temp_B_18_BIT_43_50_52_ETC___d493 } ;
  assign temp_A_25_BIT_47_33_XOR_INV_temp_B_18_00_PLUS__ETC___d821 =
	     { x__h25338 ^ y__h25339,
	       x__h25146 ^ y__h25147,
	       temp_A_25_BIT_45_41_XOR_INV_temp_B_18_00_PLUS__ETC___d820 } ;
  assign temp_A_25_BIT_47_33_XOR_temp_B_18_BIT_47_34_36_ETC___d495 =
	     { x__h14958 ^ y__h14661,
	       x__h14766 ^ y__h14469,
	       temp_A_25_BIT_45_41_XOR_temp_B_18_BIT_45_42_44_ETC___d494 } ;
  assign temp_A_25_BIT_5_01_XOR_INV_temp_B_18_00_PLUS_1_ETC___d800 =
	     { x__h17274 ^ y__h17275,
	       x__h17082 ^ y__h17083,
	       temp_A_25_BIT_3_09_XOR_INV_temp_B_18_00_PLUS_1_ETC___d799 } ;
  assign temp_A_25_BIT_5_01_XOR_temp_B_18_BIT_5_02_04_X_ETC___d474 =
	     { x__h6894 ^ y__h6597,
	       x__h6702 ^ y__h6405,
	       temp_A_25_BIT_3_09_XOR_temp_B_18_BIT_3_10_12_X_ETC___d473 } ;
  assign temp_A_25_BIT_7_93_XOR_INV_temp_B_18_00_PLUS_1_ETC___d801 =
	     { x__h17658 ^ y__h17659,
	       x__h17466 ^ y__h17467,
	       temp_A_25_BIT_5_01_XOR_INV_temp_B_18_00_PLUS_1_ETC___d800 } ;
  assign temp_A_25_BIT_7_93_XOR_temp_B_18_BIT_7_94_96_X_ETC___d475 =
	     { x__h7278 ^ y__h6981,
	       x__h7086 ^ y__h6789,
	       temp_A_25_BIT_5_01_XOR_temp_B_18_BIT_5_02_04_X_ETC___d474 } ;
  assign temp_A_25_BIT_9_85_XOR_INV_temp_B_18_00_PLUS_1_ETC___d802 =
	     { x__h18042 ^ y__h18043,
	       x__h17850 ^ y__h17851,
	       temp_A_25_BIT_7_93_XOR_INV_temp_B_18_00_PLUS_1_ETC___d801 } ;
  assign temp_A_25_BIT_9_85_XOR_temp_B_18_BIT_9_86_88_X_ETC___d476 =
	     { x__h7662 ^ y__h7365,
	       x__h7470 ^ y__h7173,
	       temp_A_25_BIT_7_93_XOR_temp_B_18_BIT_7_94_96_X_ETC___d475 } ;
  assign temp_sum_29_BIT_24_66_XOR_temp_sum_29_BIT_23_111___d1196 =
	     temp_sum[24] ^ temp_sum[23] ;
  assign temp_sum_29_BIT_25_75_XOR_temp_sum_29_BIT_24_6_ETC___d1195 =
	     temp_sum[25] ^ y__h50894 ;
  assign temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_75___d1073 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_7_ETC___d1194 =
	     temp_sum[26] ^ y__h51080 ;
  assign temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_79___d1022 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1072 =
	     temp_sum[27] ^ y__h56173 ;
  assign temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1193 =
	     temp_sum[27] ^ y__h51266 ;
  assign temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1212 =
	     { temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1193,
	       temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_7_ETC___d1194,
	       temp_sum_29_BIT_25_75_XOR_temp_sum_29_BIT_24_6_ETC___d1195,
	       temp_sum_29_BIT_24_66_XOR_temp_sum_29_BIT_23_111___d1196,
	       IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5[0] } ;
  assign temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1021 =
	     temp_sum[28] ^ y__h29404 ;
  assign temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1071 =
	     temp_sum[28] ^ y__h56359 ;
  assign temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1192 =
	     temp_sum[28] ^ y__h51452 ;
  assign temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1020 =
	     temp_sum[29] ^ y__h29590 ;
  assign temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1070 =
	     temp_sum[29] ^ y__h56545 ;
  assign temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1089 =
	     { temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1070,
	       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1071,
	       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1072,
	       temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_75___d1073,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4[0] } ;
  assign temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1191 =
	     temp_sum[29] ^ y__h51638 ;
  assign temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1019 =
	     temp_sum[30] ^ y__h29776 ;
  assign temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1038 =
	     { temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1019,
	       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1020,
	       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1021,
	       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_79___d1022,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1069 =
	     temp_sum[30] ^ y__h56731 ;
  assign temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1190 =
	     temp_sum[30] ^ y__h51824 ;
  assign temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1018 =
	     temp_sum[31] ^ y__h29962 ;
  assign temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1068 =
	     temp_sum[31] ^ y__h56917 ;
  assign temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1189 =
	     temp_sum[31] ^ y__h52010 ;
  assign temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1017 =
	     temp_sum[32] ^ y__h30148 ;
  assign temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1067 =
	     temp_sum[32] ^ y__h57103 ;
  assign temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1188 =
	     temp_sum[32] ^ y__h52196 ;
  assign temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1016 =
	     temp_sum[33] ^ y__h30334 ;
  assign temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1066 =
	     temp_sum[33] ^ y__h57289 ;
  assign temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1187 =
	     temp_sum[33] ^ y__h52382 ;
  assign temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1015 =
	     temp_sum[34] ^ y__h30520 ;
  assign temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1065 =
	     temp_sum[34] ^ y__h57475 ;
  assign temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1186 =
	     temp_sum[34] ^ y__h52568 ;
  assign temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1014 =
	     temp_sum[35] ^ y__h30706 ;
  assign temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1064 =
	     temp_sum[35] ^ y__h57661 ;
  assign temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1185 =
	     temp_sum[35] ^ y__h52754 ;
  assign temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1013 =
	     temp_sum[36] ^ y__h30892 ;
  assign temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1063 =
	     temp_sum[36] ^ y__h57847 ;
  assign temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1184 =
	     temp_sum[36] ^ y__h52940 ;
  assign temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1012 =
	     temp_sum[37] ^ y__h31078 ;
  assign temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1062 =
	     temp_sum[37] ^ y__h58033 ;
  assign temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1183 =
	     temp_sum[37] ^ y__h53126 ;
  assign temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1011 =
	     temp_sum[38] ^ y__h31264 ;
  assign temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1061 =
	     temp_sum[38] ^ y__h58219 ;
  assign temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1182 =
	     temp_sum[38] ^ y__h53312 ;
  assign temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1010 =
	     temp_sum[39] ^ y__h31450 ;
  assign temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1060 =
	     temp_sum[39] ^ y__h58405 ;
  assign temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1181 =
	     temp_sum[39] ^ y__h53498 ;
  assign temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1009 =
	     temp_sum[40] ^ y__h31636 ;
  assign temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1059 =
	     temp_sum[40] ^ y__h58591 ;
  assign temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1180 =
	     temp_sum[40] ^ y__h53684 ;
  assign temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1008 =
	     temp_sum[41] ^ y__h31822 ;
  assign temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1058 =
	     temp_sum[41] ^ y__h58777 ;
  assign temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1179 =
	     temp_sum[41] ^ y__h53870 ;
  assign temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1007 =
	     temp_sum[42] ^ y__h32008 ;
  assign temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1057 =
	     temp_sum[42] ^ y__h58963 ;
  assign temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1178 =
	     temp_sum[42] ^ y__h54056 ;
  assign temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1006 =
	     temp_sum[43] ^ y__h32194 ;
  assign temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1056 =
	     temp_sum[43] ^ y__h59149 ;
  assign temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1177 =
	     temp_sum[43] ^ y__h54242 ;
  assign temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1005 =
	     temp_sum[44] ^ y__h32380 ;
  assign temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1055 =
	     temp_sum[44] ^ y__h59335 ;
  assign temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1176 =
	     temp_sum[44] ^ y__h54428 ;
  assign temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1004 =
	     temp_sum[45] ^ y__h32566 ;
  assign temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1054 =
	     temp_sum[45] ^ y__h59521 ;
  assign temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1175 =
	     temp_sum[45] ^ y__h54614 ;
  assign temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1003 =
	     temp_sum[46] ^ y__h32752 ;
  assign temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1053 =
	     temp_sum[46] ^ y__h59707 ;
  assign temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1002 =
	     temp_sum[47] ^ y__h32938 ;
  assign temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1052 =
	     temp_sum[47] ^ y__h59893 ;
  assign temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1141 =
	     temp_sum[47] ^ y__h54986 ;
  assign temp_sum_29_BIT_48_30_XOR_temp_sum_29_BIT_47_0_ETC___d1001 =
	     temp_sum[48] ^ y__h33124 ;
  assign temp_sum_29_BIT_49_74_AND_temp_sum_29_BIT_48_3_ETC___d943 =
	     temp_sum[49] & y__h33310 ;
  assign temp_sum_29_BIT_49_74_XOR_temp_sum_29_BIT_48_3_ETC___d995 =
	     temp_sum[49] ^ y__h60265 ;
  assign x__h10111 = temp_A[22] & temp_B[22] ;
  assign x__h10158 = temp_A[22] ^ temp_B[22] ;
  assign x__h10303 = temp_A[23] & temp_B[23] ;
  assign x__h10350 = temp_A[23] ^ temp_B[23] ;
  assign x__h10495 = temp_A[24] & temp_B[24] ;
  assign x__h10542 = temp_A[24] ^ temp_B[24] ;
  assign x__h10687 = temp_A[25] & temp_B[25] ;
  assign x__h10734 = temp_A[25] ^ temp_B[25] ;
  assign x__h10879 = temp_A[26] & temp_B[26] ;
  assign x__h10926 = temp_A[26] ^ temp_B[26] ;
  assign x__h11071 = temp_A[27] & temp_B[27] ;
  assign x__h11118 = temp_A[27] ^ temp_B[27] ;
  assign x__h11263 = temp_A[28] & temp_B[28] ;
  assign x__h11310 = temp_A[28] ^ temp_B[28] ;
  assign x__h11455 = temp_A[29] & temp_B[29] ;
  assign x__h11502 = temp_A[29] ^ temp_B[29] ;
  assign x__h11647 = temp_A[30] & temp_B[30] ;
  assign x__h11694 = temp_A[30] ^ temp_B[30] ;
  assign x__h11839 = temp_A[31] & temp_B[31] ;
  assign x__h11886 = temp_A[31] ^ temp_B[31] ;
  assign x__h12031 = temp_A[32] & temp_B[32] ;
  assign x__h12078 = temp_A[32] ^ temp_B[32] ;
  assign x__h12223 = temp_A[33] & temp_B[33] ;
  assign x__h12270 = temp_A[33] ^ temp_B[33] ;
  assign x__h12415 = temp_A[34] & temp_B[34] ;
  assign x__h12462 = temp_A[34] ^ temp_B[34] ;
  assign x__h12607 = temp_A[35] & temp_B[35] ;
  assign x__h12654 = temp_A[35] ^ temp_B[35] ;
  assign x__h12799 = temp_A[36] & temp_B[36] ;
  assign x__h12846 = temp_A[36] ^ temp_B[36] ;
  assign x__h12991 = temp_A[37] & temp_B[37] ;
  assign x__h13038 = temp_A[37] ^ temp_B[37] ;
  assign x__h13183 = temp_A[38] & temp_B[38] ;
  assign x__h13230 = temp_A[38] ^ temp_B[38] ;
  assign x__h13375 = temp_A[39] & temp_B[39] ;
  assign x__h13422 = temp_A[39] ^ temp_B[39] ;
  assign x__h13567 = temp_A[40] & temp_B[40] ;
  assign x__h13614 = temp_A[40] ^ temp_B[40] ;
  assign x__h13759 = temp_A[41] & temp_B[41] ;
  assign x__h13806 = temp_A[41] ^ temp_B[41] ;
  assign x__h13951 = temp_A[42] & temp_B[42] ;
  assign x__h13998 = temp_A[42] ^ temp_B[42] ;
  assign x__h14143 = temp_A[43] & temp_B[43] ;
  assign x__h14190 = temp_A[43] ^ temp_B[43] ;
  assign x__h14335 = temp_A[44] & temp_B[44] ;
  assign x__h14382 = temp_A[44] ^ temp_B[44] ;
  assign x__h14527 = temp_A[45] & temp_B[45] ;
  assign x__h14574 = temp_A[45] ^ temp_B[45] ;
  assign x__h14719 = temp_A[46] & temp_B[46] ;
  assign x__h14766 = temp_A[46] ^ temp_B[46] ;
  assign x__h14911 = temp_A[47] & temp_B[47] ;
  assign x__h14958 = temp_A[47] ^ temp_B[47] ;
  assign x__h15044 = temp_A[49] ^ temp_B[49] ;
  assign x__h15103 = temp_A[48] & temp_B[48] ;
  assign x__h15150 = temp_A[48] ^ temp_B[48] ;
  assign x__h16569 = temp_A[1] ^ INV_temp_B_18_00_PLUS_1___d501[1] ;
  assign x__h16698 = temp_A[2] ^ INV_temp_B_18_00_PLUS_1___d501[2] ;
  assign x__h16757 = temp_A[1] & INV_temp_B_18_00_PLUS_1___d501[1] ;
  assign x__h16890 = temp_A[3] ^ INV_temp_B_18_00_PLUS_1___d501[3] ;
  assign x__h16949 = temp_A[2] & INV_temp_B_18_00_PLUS_1___d501[2] ;
  assign x__h17082 = temp_A[4] ^ INV_temp_B_18_00_PLUS_1___d501[4] ;
  assign x__h17141 = temp_A[3] & INV_temp_B_18_00_PLUS_1___d501[3] ;
  assign x__h17274 = temp_A[5] ^ INV_temp_B_18_00_PLUS_1___d501[5] ;
  assign x__h17333 = temp_A[4] & INV_temp_B_18_00_PLUS_1___d501[4] ;
  assign x__h17466 = temp_A[6] ^ INV_temp_B_18_00_PLUS_1___d501[6] ;
  assign x__h17525 = temp_A[5] & INV_temp_B_18_00_PLUS_1___d501[5] ;
  assign x__h17658 = temp_A[7] ^ INV_temp_B_18_00_PLUS_1___d501[7] ;
  assign x__h17717 = temp_A[6] & INV_temp_B_18_00_PLUS_1___d501[6] ;
  assign x__h17850 = temp_A[8] ^ INV_temp_B_18_00_PLUS_1___d501[8] ;
  assign x__h17909 = temp_A[7] & INV_temp_B_18_00_PLUS_1___d501[7] ;
  assign x__h18042 = temp_A[9] ^ INV_temp_B_18_00_PLUS_1___d501[9] ;
  assign x__h18101 = temp_A[8] & INV_temp_B_18_00_PLUS_1___d501[8] ;
  assign x__h18234 = temp_A[10] ^ INV_temp_B_18_00_PLUS_1___d501[10] ;
  assign x__h18293 = temp_A[9] & INV_temp_B_18_00_PLUS_1___d501[9] ;
  assign x__h18426 = temp_A[11] ^ INV_temp_B_18_00_PLUS_1___d501[11] ;
  assign x__h18485 = temp_A[10] & INV_temp_B_18_00_PLUS_1___d501[10] ;
  assign x__h18618 = temp_A[12] ^ INV_temp_B_18_00_PLUS_1___d501[12] ;
  assign x__h18677 = temp_A[11] & INV_temp_B_18_00_PLUS_1___d501[11] ;
  assign x__h18810 = temp_A[13] ^ INV_temp_B_18_00_PLUS_1___d501[13] ;
  assign x__h18869 = temp_A[12] & INV_temp_B_18_00_PLUS_1___d501[12] ;
  assign x__h19002 = temp_A[14] ^ INV_temp_B_18_00_PLUS_1___d501[14] ;
  assign x__h19061 = temp_A[13] & INV_temp_B_18_00_PLUS_1___d501[13] ;
  assign x__h19194 = temp_A[15] ^ INV_temp_B_18_00_PLUS_1___d501[15] ;
  assign x__h19253 = temp_A[14] & INV_temp_B_18_00_PLUS_1___d501[14] ;
  assign x__h19386 = temp_A[16] ^ INV_temp_B_18_00_PLUS_1___d501[16] ;
  assign x__h19445 = temp_A[15] & INV_temp_B_18_00_PLUS_1___d501[15] ;
  assign x__h19578 = temp_A[17] ^ INV_temp_B_18_00_PLUS_1___d501[17] ;
  assign x__h19637 = temp_A[16] & INV_temp_B_18_00_PLUS_1___d501[16] ;
  assign x__h19770 = temp_A[18] ^ INV_temp_B_18_00_PLUS_1___d501[18] ;
  assign x__h19829 = temp_A[17] & INV_temp_B_18_00_PLUS_1___d501[17] ;
  assign x__h19962 = temp_A[19] ^ INV_temp_B_18_00_PLUS_1___d501[19] ;
  assign x__h20021 = temp_A[18] & INV_temp_B_18_00_PLUS_1___d501[18] ;
  assign x__h20154 = temp_A[20] ^ INV_temp_B_18_00_PLUS_1___d501[20] ;
  assign x__h20213 = temp_A[19] & INV_temp_B_18_00_PLUS_1___d501[19] ;
  assign x__h20346 = temp_A[21] ^ INV_temp_B_18_00_PLUS_1___d501[21] ;
  assign x__h20405 = temp_A[20] & INV_temp_B_18_00_PLUS_1___d501[20] ;
  assign x__h20538 = temp_A[22] ^ INV_temp_B_18_00_PLUS_1___d501[22] ;
  assign x__h20597 = temp_A[21] & INV_temp_B_18_00_PLUS_1___d501[21] ;
  assign x__h20730 = temp_A[23] ^ INV_temp_B_18_00_PLUS_1___d501[23] ;
  assign x__h20789 = temp_A[22] & INV_temp_B_18_00_PLUS_1___d501[22] ;
  assign x__h20922 = temp_A[24] ^ INV_temp_B_18_00_PLUS_1___d501[24] ;
  assign x__h20981 = temp_A[23] & INV_temp_B_18_00_PLUS_1___d501[23] ;
  assign x__h21114 = temp_A[25] ^ INV_temp_B_18_00_PLUS_1___d501[25] ;
  assign x__h21173 = temp_A[24] & INV_temp_B_18_00_PLUS_1___d501[24] ;
  assign x__h21306 = temp_A[26] ^ INV_temp_B_18_00_PLUS_1___d501[26] ;
  assign x__h21365 = temp_A[25] & INV_temp_B_18_00_PLUS_1___d501[25] ;
  assign x__h21498 = temp_A[27] ^ INV_temp_B_18_00_PLUS_1___d501[27] ;
  assign x__h21557 = temp_A[26] & INV_temp_B_18_00_PLUS_1___d501[26] ;
  assign x__h21690 = temp_A[28] ^ INV_temp_B_18_00_PLUS_1___d501[28] ;
  assign x__h21749 = temp_A[27] & INV_temp_B_18_00_PLUS_1___d501[27] ;
  assign x__h21882 = temp_A[29] ^ INV_temp_B_18_00_PLUS_1___d501[29] ;
  assign x__h21941 = temp_A[28] & INV_temp_B_18_00_PLUS_1___d501[28] ;
  assign x__h22074 = temp_A[30] ^ INV_temp_B_18_00_PLUS_1___d501[30] ;
  assign x__h22133 = temp_A[29] & INV_temp_B_18_00_PLUS_1___d501[29] ;
  assign x__h22266 = temp_A[31] ^ INV_temp_B_18_00_PLUS_1___d501[31] ;
  assign x__h22325 = temp_A[30] & INV_temp_B_18_00_PLUS_1___d501[30] ;
  assign x__h22458 = temp_A[32] ^ INV_temp_B_18_00_PLUS_1___d501[32] ;
  assign x__h22517 = temp_A[31] & INV_temp_B_18_00_PLUS_1___d501[31] ;
  assign x__h22650 = temp_A[33] ^ INV_temp_B_18_00_PLUS_1___d501[33] ;
  assign x__h22709 = temp_A[32] & INV_temp_B_18_00_PLUS_1___d501[32] ;
  assign x__h22842 = temp_A[34] ^ INV_temp_B_18_00_PLUS_1___d501[34] ;
  assign x__h22901 = temp_A[33] & INV_temp_B_18_00_PLUS_1___d501[33] ;
  assign x__h23034 = temp_A[35] ^ INV_temp_B_18_00_PLUS_1___d501[35] ;
  assign x__h23093 = temp_A[34] & INV_temp_B_18_00_PLUS_1___d501[34] ;
  assign x__h23226 = temp_A[36] ^ INV_temp_B_18_00_PLUS_1___d501[36] ;
  assign x__h23285 = temp_A[35] & INV_temp_B_18_00_PLUS_1___d501[35] ;
  assign x__h23418 = temp_A[37] ^ INV_temp_B_18_00_PLUS_1___d501[37] ;
  assign x__h23477 = temp_A[36] & INV_temp_B_18_00_PLUS_1___d501[36] ;
  assign x__h23610 = temp_A[38] ^ INV_temp_B_18_00_PLUS_1___d501[38] ;
  assign x__h23669 = temp_A[37] & INV_temp_B_18_00_PLUS_1___d501[37] ;
  assign x__h23802 = temp_A[39] ^ INV_temp_B_18_00_PLUS_1___d501[39] ;
  assign x__h23861 = temp_A[38] & INV_temp_B_18_00_PLUS_1___d501[38] ;
  assign x__h23994 = temp_A[40] ^ INV_temp_B_18_00_PLUS_1___d501[40] ;
  assign x__h24053 = temp_A[39] & INV_temp_B_18_00_PLUS_1___d501[39] ;
  assign x__h24186 = temp_A[41] ^ INV_temp_B_18_00_PLUS_1___d501[41] ;
  assign x__h24245 = temp_A[40] & INV_temp_B_18_00_PLUS_1___d501[40] ;
  assign x__h24378 = temp_A[42] ^ INV_temp_B_18_00_PLUS_1___d501[42] ;
  assign x__h24437 = temp_A[41] & INV_temp_B_18_00_PLUS_1___d501[41] ;
  assign x__h24570 = temp_A[43] ^ INV_temp_B_18_00_PLUS_1___d501[43] ;
  assign x__h24629 = temp_A[42] & INV_temp_B_18_00_PLUS_1___d501[42] ;
  assign x__h24762 = temp_A[44] ^ INV_temp_B_18_00_PLUS_1___d501[44] ;
  assign x__h24821 = temp_A[43] & INV_temp_B_18_00_PLUS_1___d501[43] ;
  assign x__h24954 = temp_A[45] ^ INV_temp_B_18_00_PLUS_1___d501[45] ;
  assign x__h25013 = temp_A[44] & INV_temp_B_18_00_PLUS_1___d501[44] ;
  assign x__h25146 = temp_A[46] ^ INV_temp_B_18_00_PLUS_1___d501[46] ;
  assign x__h25205 = temp_A[45] & INV_temp_B_18_00_PLUS_1___d501[45] ;
  assign x__h25338 = temp_A[47] ^ INV_temp_B_18_00_PLUS_1___d501[47] ;
  assign x__h25397 = temp_A[46] & INV_temp_B_18_00_PLUS_1___d501[46] ;
  assign x__h25530 = temp_A[48] ^ INV_temp_B_18_00_PLUS_1___d501[48] ;
  assign x__h25589 = temp_A[47] & INV_temp_B_18_00_PLUS_1___d501[47] ;
  assign x__h25722 = temp_A[49] ^ INV_temp_B_18_00_PLUS_1___d501[49] ;
  assign x__h25781 = temp_A[48] & INV_temp_B_18_00_PLUS_1___d501[48] ;
  assign x__h26320 = ~fp_a[24] ;
  assign x__h26447 = ~fp_a[25] ;
  assign x__h26635 = ~fp_a[26] ;
  assign x__h26823 = ~fp_a[27] ;
  assign x__h27011 = ~fp_a[28] ;
  assign x__h27199 = ~fp_a[29] ;
  assign x__h27387 = ~fp_a[30] ;
  assign x__h3065 = fp_a[24] ^ y__h3068 ;
  assign x__h3192 = fp_a[25] ^ y__h3195 ;
  assign x__h3249 = fp_a[24] & y__h3068 ;
  assign x__h33678 =
	     { temp_sum[49] ^ y__h33310,
	       temp_sum_29_BIT_48_30_XOR_temp_sum_29_BIT_47_0_ETC___d1001,
	       temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1002,
	       temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1003,
	       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1004,
	       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1005,
	       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1006,
	       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1007,
	       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1008,
	       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1009,
	       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1010,
	       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1011,
	       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1012,
	       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1013,
	       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1014,
	       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1015,
	       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1016,
	       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1017,
	       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1018,
	       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1019,
	       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1020,
	       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1021,
	       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_79___d1022 } ;
  assign x__h33701 =
	     { temp_sum_29_BIT_48_30_XOR_temp_sum_29_BIT_47_0_ETC___d1001,
	       temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1002,
	       temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1003,
	       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1004,
	       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1005,
	       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1006,
	       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1007,
	       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1008,
	       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1009,
	       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1010,
	       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1011,
	       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1012,
	       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1013,
	       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1014,
	       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1015,
	       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1016,
	       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1017,
	       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1018,
	       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1038 } ;
  assign x__h3378 = fp_a[26] ^ y__h3381 ;
  assign x__h3435 = fp_a[25] & y__h3195 ;
  assign x__h3564 = fp_a[27] ^ y__h3567 ;
  assign x__h3621 = fp_a[26] & y__h3381 ;
  assign x__h3750 = fp_a[28] ^ y__h3753 ;
  assign x__h3807 = fp_a[27] & y__h3567 ;
  assign x__h39026 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h39029 :
	       _theResult___snd_fst__h42028 ;
  assign x__h3936 = fp_a[29] ^ y__h3939 ;
  assign x__h3993 = fp_a[28] & y__h3753 ;
  assign x__h40793 = fp_a[24] ^ fp_a[23] ;
  assign x__h40919 = fp_a[25] ^ y__h39423 ;
  assign x__h41105 = fp_a[26] ^ y__h39609 ;
  assign x__h4122 = fp_a[30] ^ y__h4125 ;
  assign x__h41291 = fp_a[27] ^ y__h39795 ;
  assign x__h41477 = fp_a[28] ^ y__h39981 ;
  assign x__h41663 = fp_a[29] ^ y__h40167 ;
  assign x__h4179 = fp_a[29] & y__h3939 ;
  assign x__h55168 =
	     { temp_sum[46] ^ y__h54800,
	       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1175,
	       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1176,
	       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1177,
	       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1178,
	       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1179,
	       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1180,
	       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1181,
	       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1182,
	       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1183,
	       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1184,
	       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1185,
	       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1186,
	       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1187,
	       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1188,
	       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1189,
	       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1190,
	       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1191,
	       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1192,
	       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1193,
	       temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_7_ETC___d1194,
	       temp_sum_29_BIT_25_75_XOR_temp_sum_29_BIT_24_6_ETC___d1195,
	       temp_sum_29_BIT_24_66_XOR_temp_sum_29_BIT_23_111___d1196 } ;
  assign x__h55191 =
	     { temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1175,
	       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1176,
	       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1177,
	       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1178,
	       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1179,
	       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1180,
	       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1181,
	       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1182,
	       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1183,
	       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1184,
	       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1185,
	       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1186,
	       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1187,
	       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1188,
	       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1189,
	       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1190,
	       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1191,
	       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1192,
	       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1212 } ;
  assign x__h60447 =
	     { temp_sum[48] ^ y__h60079,
	       temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1052,
	       temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1053,
	       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1054,
	       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1055,
	       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1056,
	       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1057,
	       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1058,
	       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1059,
	       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1060,
	       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1061,
	       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1062,
	       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1063,
	       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1064,
	       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1065,
	       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1066,
	       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1067,
	       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1068,
	       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1069,
	       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1070,
	       temp_sum_29_BIT_28_19_XOR_temp_sum_29_BIT_27_2_ETC___d1071,
	       temp_sum_29_BIT_27_20_XOR_temp_sum_29_BIT_26_7_ETC___d1072,
	       temp_sum_29_BIT_26_79_XOR_temp_sum_29_BIT_25_75___d1073 } ;
  assign x__h60470 =
	     { temp_sum_29_BIT_47_00_XOR_temp_sum_29_BIT_46_0_ETC___d1052,
	       temp_sum_29_BIT_46_01_XOR_temp_sum_29_BIT_45_0_ETC___d1053,
	       temp_sum_29_BIT_45_02_XOR_temp_sum_29_BIT_44_0_ETC___d1054,
	       temp_sum_29_BIT_44_03_XOR_temp_sum_29_BIT_43_0_ETC___d1055,
	       temp_sum_29_BIT_43_04_XOR_temp_sum_29_BIT_42_0_ETC___d1056,
	       temp_sum_29_BIT_42_05_XOR_temp_sum_29_BIT_41_0_ETC___d1057,
	       temp_sum_29_BIT_41_06_XOR_temp_sum_29_BIT_40_0_ETC___d1058,
	       temp_sum_29_BIT_40_07_XOR_temp_sum_29_BIT_39_0_ETC___d1059,
	       temp_sum_29_BIT_39_08_XOR_temp_sum_29_BIT_38_0_ETC___d1060,
	       temp_sum_29_BIT_38_09_XOR_temp_sum_29_BIT_37_1_ETC___d1061,
	       temp_sum_29_BIT_37_10_XOR_temp_sum_29_BIT_36_1_ETC___d1062,
	       temp_sum_29_BIT_36_11_XOR_temp_sum_29_BIT_35_1_ETC___d1063,
	       temp_sum_29_BIT_35_12_XOR_temp_sum_29_BIT_34_1_ETC___d1064,
	       temp_sum_29_BIT_34_13_XOR_temp_sum_29_BIT_33_1_ETC___d1065,
	       temp_sum_29_BIT_33_14_XOR_temp_sum_29_BIT_32_1_ETC___d1066,
	       temp_sum_29_BIT_32_15_XOR_temp_sum_29_BIT_31_1_ETC___d1067,
	       temp_sum_29_BIT_31_16_XOR_temp_sum_29_BIT_30_1_ETC___d1068,
	       temp_sum_29_BIT_30_17_XOR_temp_sum_29_BIT_29_1_ETC___d1069,
	       temp_sum_29_BIT_29_18_XOR_temp_sum_29_BIT_28_1_ETC___d1089 } ;
  assign x__h60516 =
	     temp_sum[48] ?
	       _theResult___snd_fst__h42028 :
	       _theResult___snd_fst__h60519 ;
  assign x__h6079 = temp_A[1] & temp_B[1] ;
  assign x__h6126 = temp_A[1] ^ temp_B[1] ;
  assign x__h6271 = temp_A[2] & temp_B[2] ;
  assign x__h6318 = temp_A[2] ^ temp_B[2] ;
  assign x__h6463 = temp_A[3] & temp_B[3] ;
  assign x__h6510 = temp_A[3] ^ temp_B[3] ;
  assign x__h6655 = temp_A[4] & temp_B[4] ;
  assign x__h6702 = temp_A[4] ^ temp_B[4] ;
  assign x__h6847 = temp_A[5] & temp_B[5] ;
  assign x__h6894 = temp_A[5] ^ temp_B[5] ;
  assign x__h7039 = temp_A[6] & temp_B[6] ;
  assign x__h7086 = temp_A[6] ^ temp_B[6] ;
  assign x__h7231 = temp_A[7] & temp_B[7] ;
  assign x__h7278 = temp_A[7] ^ temp_B[7] ;
  assign x__h7423 = temp_A[8] & temp_B[8] ;
  assign x__h7470 = temp_A[8] ^ temp_B[8] ;
  assign x__h7615 = temp_A[9] & temp_B[9] ;
  assign x__h7662 = temp_A[9] ^ temp_B[9] ;
  assign x__h7807 = temp_A[10] & temp_B[10] ;
  assign x__h7854 = temp_A[10] ^ temp_B[10] ;
  assign x__h7999 = temp_A[11] & temp_B[11] ;
  assign x__h8046 = temp_A[11] ^ temp_B[11] ;
  assign x__h8191 = temp_A[12] & temp_B[12] ;
  assign x__h8238 = temp_A[12] ^ temp_B[12] ;
  assign x__h8383 = temp_A[13] & temp_B[13] ;
  assign x__h8430 = temp_A[13] ^ temp_B[13] ;
  assign x__h8575 = temp_A[14] & temp_B[14] ;
  assign x__h8622 = temp_A[14] ^ temp_B[14] ;
  assign x__h8767 = temp_A[15] & temp_B[15] ;
  assign x__h8814 = temp_A[15] ^ temp_B[15] ;
  assign x__h8959 = temp_A[16] & temp_B[16] ;
  assign x__h9006 = temp_A[16] ^ temp_B[16] ;
  assign x__h9151 = temp_A[17] & temp_B[17] ;
  assign x__h9198 = temp_A[17] ^ temp_B[17] ;
  assign x__h9343 = temp_A[18] & temp_B[18] ;
  assign x__h9390 = temp_A[18] ^ temp_B[18] ;
  assign x__h9535 = temp_A[19] & temp_B[19] ;
  assign x__h9582 = temp_A[19] ^ temp_B[19] ;
  assign x__h9727 = temp_A[20] & temp_B[20] ;
  assign x__h9774 = temp_A[20] ^ temp_B[20] ;
  assign x__h9919 = temp_A[21] & temp_B[21] ;
  assign x__h9966 = temp_A[21] ^ temp_B[21] ;
  assign x_exponent__h26055 =
	     { x__h27387 ^ y__h27388,
	       x__h27199 ^ y__h27200,
	       INV_fp_a_0_BIT_28_2_34_XOR_fp_a_0_BIT_27_6_OR__ETC___d863 } ;
  assign y__h10053 = x__h10111 | y__h10112 ;
  assign y__h10112 = x__h10158 & y__h9861 ;
  assign y__h10245 = x__h10303 | y__h10304 ;
  assign y__h10304 = x__h10350 & y__h10053 ;
  assign y__h10437 = x__h10495 | y__h10496 ;
  assign y__h10496 = x__h10542 & y__h10245 ;
  assign y__h10629 = x__h10687 | y__h10688 ;
  assign y__h10688 = x__h10734 & y__h10437 ;
  assign y__h10821 = x__h10879 | y__h10880 ;
  assign y__h10880 = x__h10926 & y__h10629 ;
  assign y__h11013 = x__h11071 | y__h11072 ;
  assign y__h11072 = x__h11118 & y__h10821 ;
  assign y__h11205 = x__h11263 | y__h11264 ;
  assign y__h11264 = x__h11310 & y__h11013 ;
  assign y__h11397 = x__h11455 | y__h11456 ;
  assign y__h11456 = x__h11502 & y__h11205 ;
  assign y__h11589 = x__h11647 | y__h11648 ;
  assign y__h11648 = x__h11694 & y__h11397 ;
  assign y__h11781 = x__h11839 | y__h11840 ;
  assign y__h11840 = x__h11886 & y__h11589 ;
  assign y__h11973 = x__h12031 | y__h12032 ;
  assign y__h12032 = x__h12078 & y__h11781 ;
  assign y__h12165 = x__h12223 | y__h12224 ;
  assign y__h12224 = x__h12270 & y__h11973 ;
  assign y__h12357 = x__h12415 | y__h12416 ;
  assign y__h12416 = x__h12462 & y__h12165 ;
  assign y__h12549 = x__h12607 | y__h12608 ;
  assign y__h12608 = x__h12654 & y__h12357 ;
  assign y__h12741 = x__h12799 | y__h12800 ;
  assign y__h12800 = x__h12846 & y__h12549 ;
  assign y__h12933 = x__h12991 | y__h12992 ;
  assign y__h12992 = x__h13038 & y__h12741 ;
  assign y__h13125 = x__h13183 | y__h13184 ;
  assign y__h13184 = x__h13230 & y__h12933 ;
  assign y__h13317 = x__h13375 | y__h13376 ;
  assign y__h13376 = x__h13422 & y__h13125 ;
  assign y__h13509 = x__h13567 | y__h13568 ;
  assign y__h13568 = x__h13614 & y__h13317 ;
  assign y__h13701 = x__h13759 | y__h13760 ;
  assign y__h13760 = x__h13806 & y__h13509 ;
  assign y__h13893 = x__h13951 | y__h13952 ;
  assign y__h13952 = x__h13998 & y__h13701 ;
  assign y__h14085 = x__h14143 | y__h14144 ;
  assign y__h14144 = x__h14190 & y__h13893 ;
  assign y__h14277 = x__h14335 | y__h14336 ;
  assign y__h14336 = x__h14382 & y__h14085 ;
  assign y__h14469 = x__h14527 | y__h14528 ;
  assign y__h14528 = x__h14574 & y__h14277 ;
  assign y__h14661 = x__h14719 | y__h14720 ;
  assign y__h14720 = x__h14766 & y__h14469 ;
  assign y__h14853 = x__h14911 | y__h14912 ;
  assign y__h14912 = x__h14958 & y__h14661 ;
  assign y__h15045 = x__h15103 | y__h15104 ;
  assign y__h15104 = x__h15150 & y__h14853 ;
  assign y__h16570 = temp_A[0] & INV_temp_B_18_00_PLUS_1___d501[0] ;
  assign y__h16699 = x__h16757 | y__h16758 ;
  assign y__h16758 = x__h16569 & y__h16570 ;
  assign y__h16891 = x__h16949 | y__h16950 ;
  assign y__h16950 = x__h16698 & y__h16699 ;
  assign y__h17083 = x__h17141 | y__h17142 ;
  assign y__h17142 = x__h16890 & y__h16891 ;
  assign y__h17275 = x__h17333 | y__h17334 ;
  assign y__h17334 = x__h17082 & y__h17083 ;
  assign y__h17467 = x__h17525 | y__h17526 ;
  assign y__h17526 = x__h17274 & y__h17275 ;
  assign y__h17659 = x__h17717 | y__h17718 ;
  assign y__h17718 = x__h17466 & y__h17467 ;
  assign y__h17851 = x__h17909 | y__h17910 ;
  assign y__h17910 = x__h17658 & y__h17659 ;
  assign y__h18043 = x__h18101 | y__h18102 ;
  assign y__h18102 = x__h17850 & y__h17851 ;
  assign y__h18235 = x__h18293 | y__h18294 ;
  assign y__h18294 = x__h18042 & y__h18043 ;
  assign y__h18427 = x__h18485 | y__h18486 ;
  assign y__h18486 = x__h18234 & y__h18235 ;
  assign y__h18619 = x__h18677 | y__h18678 ;
  assign y__h18678 = x__h18426 & y__h18427 ;
  assign y__h18811 = x__h18869 | y__h18870 ;
  assign y__h18870 = x__h18618 & y__h18619 ;
  assign y__h19003 = x__h19061 | y__h19062 ;
  assign y__h19062 = x__h18810 & y__h18811 ;
  assign y__h1908 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h19195 = x__h19253 | y__h19254 ;
  assign y__h19254 = x__h19002 & y__h19003 ;
  assign y__h19387 = x__h19445 | y__h19446 ;
  assign y__h19446 = x__h19194 & y__h19195 ;
  assign y__h19579 = x__h19637 | y__h19638 ;
  assign y__h19638 = x__h19386 & y__h19387 ;
  assign y__h19771 = x__h19829 | y__h19830 ;
  assign y__h19830 = x__h19578 & y__h19579 ;
  assign y__h19963 = x__h20021 | y__h20022 ;
  assign y__h20022 = x__h19770 & y__h19771 ;
  assign y__h20155 = x__h20213 | y__h20214 ;
  assign y__h20214 = x__h19962 & y__h19963 ;
  assign y__h20347 = x__h20405 | y__h20406 ;
  assign y__h20406 = x__h20154 & y__h20155 ;
  assign y__h20539 = x__h20597 | y__h20598 ;
  assign y__h20598 = x__h20346 & y__h20347 ;
  assign y__h20731 = x__h20789 | y__h20790 ;
  assign y__h20790 = x__h20538 & y__h20539 ;
  assign y__h20923 = x__h20981 | y__h20982 ;
  assign y__h2097 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h1908 ;
  assign y__h20982 = x__h20730 & y__h20731 ;
  assign y__h21115 = x__h21173 | y__h21174 ;
  assign y__h21174 = x__h20922 & y__h20923 ;
  assign y__h21307 = x__h21365 | y__h21366 ;
  assign y__h21366 = x__h21114 & y__h21115 ;
  assign y__h21499 = x__h21557 | y__h21558 ;
  assign y__h21558 = x__h21306 & y__h21307 ;
  assign y__h21691 = x__h21749 | y__h21750 ;
  assign y__h21750 = x__h21498 & y__h21499 ;
  assign y__h21883 = x__h21941 | y__h21942 ;
  assign y__h21942 = x__h21690 & y__h21691 ;
  assign y__h22075 = x__h22133 | y__h22134 ;
  assign y__h22134 = x__h21882 & y__h21883 ;
  assign y__h22267 = x__h22325 | y__h22326 ;
  assign y__h22326 = x__h22074 & y__h22075 ;
  assign y__h22459 = x__h22517 | y__h22518 ;
  assign y__h22518 = x__h22266 & y__h22267 ;
  assign y__h22651 = x__h22709 | y__h22710 ;
  assign y__h22710 = x__h22458 & y__h22459 ;
  assign y__h22843 = x__h22901 | y__h22902 ;
  assign y__h2286 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h2097 ;
  assign y__h22902 = x__h22650 & y__h22651 ;
  assign y__h23035 = x__h23093 | y__h23094 ;
  assign y__h23094 = x__h22842 & y__h22843 ;
  assign y__h23227 = x__h23285 | y__h23286 ;
  assign y__h23286 = x__h23034 & y__h23035 ;
  assign y__h23419 = x__h23477 | y__h23478 ;
  assign y__h23478 = x__h23226 & y__h23227 ;
  assign y__h23611 = x__h23669 | y__h23670 ;
  assign y__h23670 = x__h23418 & y__h23419 ;
  assign y__h23803 = x__h23861 | y__h23862 ;
  assign y__h23862 = x__h23610 & y__h23611 ;
  assign y__h23995 = x__h24053 | y__h24054 ;
  assign y__h24054 = x__h23802 & y__h23803 ;
  assign y__h24187 = x__h24245 | y__h24246 ;
  assign y__h24246 = x__h23994 & y__h23995 ;
  assign y__h24379 = x__h24437 | y__h24438 ;
  assign y__h24438 = x__h24186 & y__h24187 ;
  assign y__h24571 = x__h24629 | y__h24630 ;
  assign y__h24630 = x__h24378 & y__h24379 ;
  assign y__h2475 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h2286 ;
  assign y__h24763 = x__h24821 | y__h24822 ;
  assign y__h24822 = x__h24570 & y__h24571 ;
  assign y__h24955 = x__h25013 | y__h25014 ;
  assign y__h25014 = x__h24762 & y__h24763 ;
  assign y__h25147 = x__h25205 | y__h25206 ;
  assign y__h25206 = x__h24954 & y__h24955 ;
  assign y__h25339 = x__h25397 | y__h25398 ;
  assign y__h25398 = x__h25146 & y__h25147 ;
  assign y__h25531 = x__h25589 | y__h25590 ;
  assign y__h25590 = x__h25338 & y__h25339 ;
  assign y__h25723 = x__h25781 | y__h25782 ;
  assign y__h25782 = x__h25530 & y__h25531 ;
  assign y__h26448 = fp_a[24] | y__h26506 ;
  assign y__h26506 = x__h26320 & fp_a[23] ;
  assign y__h26636 = fp_a[25] | y__h26694 ;
  assign y__h2664 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h2475 ;
  assign y__h26694 = x__h26447 & y__h26448 ;
  assign y__h26824 = fp_a[26] | y__h26882 ;
  assign y__h26882 = x__h26635 & y__h26636 ;
  assign y__h27012 = fp_a[27] | y__h27070 ;
  assign y__h27070 = x__h26823 & y__h26824 ;
  assign y__h27200 = fp_a[28] | y__h27258 ;
  assign y__h27258 = x__h27011 & y__h27012 ;
  assign y__h27388 = fp_a[29] | y__h27446 ;
  assign y__h27446 = x__h27199 & y__h27200 ;
  assign y__h2853 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h2664 ;
  assign y__h29404 = temp_sum[27] & temp_sum[26] ;
  assign y__h29590 = temp_sum[28] & y__h29404 ;
  assign y__h29776 = temp_sum[29] & y__h29590 ;
  assign y__h29962 = temp_sum[30] & y__h29776 ;
  assign y__h30148 = temp_sum[31] & y__h29962 ;
  assign y__h30334 = temp_sum[32] & y__h30148 ;
  assign y__h30520 = temp_sum[33] & y__h30334 ;
  assign y__h3066 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h3068 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h30706 = temp_sum[34] & y__h30520 ;
  assign y__h30892 = temp_sum[35] & y__h30706 ;
  assign y__h31078 = temp_sum[36] & y__h30892 ;
  assign y__h31264 = temp_sum[37] & y__h31078 ;
  assign y__h31450 = temp_sum[38] & y__h31264 ;
  assign y__h31636 = temp_sum[39] & y__h31450 ;
  assign y__h31822 = temp_sum[40] & y__h31636 ;
  assign y__h3193 = x__h3249 | y__h3250 ;
  assign y__h3195 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h1908 ;
  assign y__h32008 = temp_sum[41] & y__h31822 ;
  assign y__h32194 = temp_sum[42] & y__h32008 ;
  assign y__h32380 = temp_sum[43] & y__h32194 ;
  assign y__h3250 = x__h3065 & y__h3066 ;
  assign y__h32566 = temp_sum[44] & y__h32380 ;
  assign y__h32752 = temp_sum[45] & y__h32566 ;
  assign y__h32938 = temp_sum[46] & y__h32752 ;
  assign y__h33124 = temp_sum[47] & y__h32938 ;
  assign y__h33310 = temp_sum[48] & y__h33124 ;
  assign y__h3379 = x__h3435 | y__h3436 ;
  assign y__h3381 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h2097 ;
  assign y__h3436 = x__h3192 & y__h3193 ;
  assign y__h3565 = x__h3621 | y__h3622 ;
  assign y__h3567 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h2286 ;
  assign y__h3622 = x__h3378 & y__h3379 ;
  assign y__h3751 = x__h3807 | y__h3808 ;
  assign y__h3753 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h2475 ;
  assign y__h3808 = x__h3564 & y__h3565 ;
  assign y__h3937 = x__h3993 | y__h3994 ;
  assign y__h3939 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h2664 ;
  assign y__h39423 = fp_a[24] & fp_a[23] ;
  assign y__h39609 = fp_a[25] & y__h39423 ;
  assign y__h39795 = fp_a[26] & y__h39609 ;
  assign y__h3994 = x__h3750 & y__h3751 ;
  assign y__h39981 = fp_a[27] & y__h39795 ;
  assign y__h40167 = fp_a[28] & y__h39981 ;
  assign y__h40353 = fp_a[29] & y__h40167 ;
  assign y__h40920 = x__h40793 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h41106 = x__h40919 & y__h40920 ;
  assign y__h4123 = x__h4179 | y__h4180 ;
  assign y__h4125 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h2853 ;
  assign y__h41292 = x__h41105 & y__h41106 ;
  assign y__h41478 = x__h41291 & y__h41292 ;
  assign y__h41664 = x__h41477 & y__h41478 ;
  assign y__h4180 = x__h3936 & y__h3937 ;
  assign y__h41850 = x__h41663 & y__h41664 ;
  assign y__h50894 = temp_sum[24] & temp_sum[23] ;
  assign y__h51080 = temp_sum[25] & y__h50894 ;
  assign y__h51266 = temp_sum[26] & y__h51080 ;
  assign y__h51452 = temp_sum[27] & y__h51266 ;
  assign y__h51638 = temp_sum[28] & y__h51452 ;
  assign y__h51824 = temp_sum[29] & y__h51638 ;
  assign y__h52010 = temp_sum[30] & y__h51824 ;
  assign y__h52196 = temp_sum[31] & y__h52010 ;
  assign y__h52382 = temp_sum[32] & y__h52196 ;
  assign y__h52568 = temp_sum[33] & y__h52382 ;
  assign y__h52754 = temp_sum[34] & y__h52568 ;
  assign y__h52940 = temp_sum[35] & y__h52754 ;
  assign y__h53126 = temp_sum[36] & y__h52940 ;
  assign y__h53312 = temp_sum[37] & y__h53126 ;
  assign y__h53498 = temp_sum[38] & y__h53312 ;
  assign y__h53684 = temp_sum[39] & y__h53498 ;
  assign y__h53870 = temp_sum[40] & y__h53684 ;
  assign y__h54056 = temp_sum[41] & y__h53870 ;
  assign y__h54242 = temp_sum[42] & y__h54056 ;
  assign y__h54428 = temp_sum[43] & y__h54242 ;
  assign y__h54614 = temp_sum[44] & y__h54428 ;
  assign y__h54800 = temp_sum[45] & y__h54614 ;
  assign y__h54986 = temp_sum[46] & y__h54800 ;
  assign y__h56173 = temp_sum[26] & temp_sum[25] ;
  assign y__h56359 = temp_sum[27] & y__h56173 ;
  assign y__h56545 = temp_sum[28] & y__h56359 ;
  assign y__h56731 = temp_sum[29] & y__h56545 ;
  assign y__h56917 = temp_sum[30] & y__h56731 ;
  assign y__h57103 = temp_sum[31] & y__h56917 ;
  assign y__h57289 = temp_sum[32] & y__h57103 ;
  assign y__h57475 = temp_sum[33] & y__h57289 ;
  assign y__h57661 = temp_sum[34] & y__h57475 ;
  assign y__h57847 = temp_sum[35] & y__h57661 ;
  assign y__h58033 = temp_sum[36] & y__h57847 ;
  assign y__h58219 = temp_sum[37] & y__h58033 ;
  assign y__h58405 = temp_sum[38] & y__h58219 ;
  assign y__h58591 = temp_sum[39] & y__h58405 ;
  assign y__h58777 = temp_sum[40] & y__h58591 ;
  assign y__h58963 = temp_sum[41] & y__h58777 ;
  assign y__h59149 = temp_sum[42] & y__h58963 ;
  assign y__h59335 = temp_sum[43] & y__h59149 ;
  assign y__h59521 = temp_sum[44] & y__h59335 ;
  assign y__h59707 = temp_sum[45] & y__h59521 ;
  assign y__h59893 = temp_sum[46] & y__h59707 ;
  assign y__h60079 = temp_sum[47] & y__h59893 ;
  assign y__h6021 = x__h6079 | y__h6080 ;
  assign y__h60265 = temp_sum[48] & y__h60079 ;
  assign y__h6080 = x__h6126 & y__h6127 ;
  assign y__h60920 = exp___1__h49931[1] & exp___1__h49931[0] ;
  assign y__h61109 = exp___1__h49931[2] & y__h60920 ;
  assign y__h6127 = temp_A[0] & temp_B[0] ;
  assign y__h61298 = exp___1__h49931[3] & y__h61109 ;
  assign y__h61487 = exp___1__h49931[4] & y__h61298 ;
  assign y__h61676 = exp___1__h49931[5] & y__h61487 ;
  assign y__h61865 = exp___1__h49931[6] & y__h61676 ;
  assign y__h6213 = x__h6271 | y__h6272 ;
  assign y__h6272 = x__h6318 & y__h6021 ;
  assign y__h6405 = x__h6463 | y__h6464 ;
  assign y__h6464 = x__h6510 & y__h6213 ;
  assign y__h6597 = x__h6655 | y__h6656 ;
  assign y__h6656 = x__h6702 & y__h6405 ;
  assign y__h6789 = x__h6847 | y__h6848 ;
  assign y__h6848 = x__h6894 & y__h6597 ;
  assign y__h6981 = x__h7039 | y__h7040 ;
  assign y__h7040 = x__h7086 & y__h6789 ;
  assign y__h7173 = x__h7231 | y__h7232 ;
  assign y__h7232 = x__h7278 & y__h6981 ;
  assign y__h7365 = x__h7423 | y__h7424 ;
  assign y__h7424 = x__h7470 & y__h7173 ;
  assign y__h7557 = x__h7615 | y__h7616 ;
  assign y__h7616 = x__h7662 & y__h7365 ;
  assign y__h7749 = x__h7807 | y__h7808 ;
  assign y__h7808 = x__h7854 & y__h7557 ;
  assign y__h7941 = x__h7999 | y__h8000 ;
  assign y__h8000 = x__h8046 & y__h7749 ;
  assign y__h8133 = x__h8191 | y__h8192 ;
  assign y__h8192 = x__h8238 & y__h7941 ;
  assign y__h8325 = x__h8383 | y__h8384 ;
  assign y__h8384 = x__h8430 & y__h8133 ;
  assign y__h8517 = x__h8575 | y__h8576 ;
  assign y__h8576 = x__h8622 & y__h8325 ;
  assign y__h8709 = x__h8767 | y__h8768 ;
  assign y__h8768 = x__h8814 & y__h8517 ;
  assign y__h8901 = x__h8959 | y__h8960 ;
  assign y__h8960 = x__h9006 & y__h8709 ;
  assign y__h9093 = x__h9151 | y__h9152 ;
  assign y__h9152 = x__h9198 & y__h8901 ;
  assign y__h9285 = x__h9343 | y__h9344 ;
  assign y__h9344 = x__h9390 & y__h9093 ;
  assign y__h9477 = x__h9535 | y__h9536 ;
  assign y__h9536 = x__h9582 & y__h9285 ;
  assign y__h9669 = x__h9727 | y__h9728 ;
  assign y__h9728 = x__h9774 & y__h9477 ;
  assign y__h9861 = x__h9919 | y__h9920 ;
  assign y__h9920 = x__h9966 & y__h9669 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	adj_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adj_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_add <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (adj_done_EN) adj_done <= `BSV_ASSIGNMENT_DELAY adj_done_D_IN;
	if (adj_sub_EN) adj_sub <= `BSV_ASSIGNMENT_DELAY adj_sub_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (do_add_EN) do_add <= `BSV_ASSIGNMENT_DELAY do_add_D_IN;
	if (do_sub_EN) do_sub <= `BSV_ASSIGNMENT_DELAY do_sub_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    adj_done = 1'h0;
    adj_sub = 1'h0;
    assembled_answer = 1'h0;
    do_add = 1'h0;
    do_sub = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    handle_zero = 1'h0;
    operands_swapped_if_needed = 1'h0;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

