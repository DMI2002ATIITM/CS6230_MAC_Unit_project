//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Oct 27 00:27:39 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  reg [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register adj_done
  reg adj_done;
  wire adj_done_D_IN, adj_done_EN;

  // register adj_sub
  reg adj_sub;
  wire adj_sub_D_IN, adj_sub_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register do_add
  reg do_add;
  reg do_add_D_IN;
  wire do_add_EN;

  // register do_sub
  reg do_sub;
  reg do_sub_D_IN;
  wire do_sub_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  reg [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  reg [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register handle_oneinpzero
  reg handle_oneinpzero;
  wire handle_oneinpzero_D_IN, handle_oneinpzero_EN;

  // register handle_zero
  reg handle_zero;
  wire handle_zero_D_IN, handle_zero_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  reg [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_adjust_subres,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_deassert_assembled_answer,
       CAN_FIRE_RL_handle_oneinpzero_case,
       CAN_FIRE_RL_handle_zero_case,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_round_sub,
       CAN_FIRE_RL_sub,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_adjust_subres,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_deassert_assembled_answer,
       WILL_FIRE_RL_handle_oneinpzero_case,
       WILL_FIRE_RL_handle_zero_case,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_round_sub,
       WILL_FIRE_RL_sub,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_3,
		MUX_temp_sum_write_1__VAL_4;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2,
		MUX_fp_a_write_1__VAL_3,
		MUX_fp_b_write_1__VAL_1,
		MUX_fp_c_write_1__VAL_1,
		MUX_fp_c_write_1__VAL_2;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_2,
		MUX_add_res_with_adj_exp_write_1__VAL_3;
  wire MUX_do_add_write_1__SEL_2,
       MUX_do_sub_write_1__SEL_2,
       MUX_fp_a_write_1__SEL_1,
       MUX_fp_a_write_1__SEL_2,
       MUX_fp_b_write_1__SEL_1,
       MUX_got_A_write_1__SEL_1,
       MUX_handle_zero_write_1__SEL_2,
       MUX_temp_B_write_1__SEL_1,
       MUX_temp_B_write_1__SEL_2;

  // remaining internal signals
  wire [49 : 0] IF_temp_A_BIT_0_XOR_INV_temp_B_45_29_PLUS_1_30_ETC__q9,
		IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10,
		INV_temp_B_45_29_PLUS_1___d530;
  wire [47 : 0] temp_A_53_BIT_47_61_XOR_INV_temp_B_45_29_PLUS__ETC___d850,
		temp_A_53_BIT_47_61_XOR_temp_B_45_BIT_47_62_64_ETC___d523;
  wire [45 : 0] temp_A_53_BIT_45_69_XOR_INV_temp_B_45_29_PLUS__ETC___d849,
		temp_A_53_BIT_45_69_XOR_temp_B_45_BIT_45_70_72_ETC___d522;
  wire [43 : 0] temp_A_53_BIT_43_77_XOR_INV_temp_B_45_29_PLUS__ETC___d848,
		temp_A_53_BIT_43_77_XOR_temp_B_45_BIT_43_78_80_ETC___d521;
  wire [41 : 0] temp_A_53_BIT_41_85_XOR_INV_temp_B_45_29_PLUS__ETC___d847,
		temp_A_53_BIT_41_85_XOR_temp_B_45_BIT_41_86_88_ETC___d520;
  wire [39 : 0] temp_A_53_BIT_39_93_XOR_INV_temp_B_45_29_PLUS__ETC___d846,
		temp_A_53_BIT_39_93_XOR_temp_B_45_BIT_39_94_96_ETC___d519;
  wire [37 : 0] temp_A_53_BIT_37_01_XOR_INV_temp_B_45_29_PLUS__ETC___d845,
		temp_A_53_BIT_37_01_XOR_temp_B_45_BIT_37_02_04_ETC___d518;
  wire [35 : 0] temp_A_53_BIT_35_09_XOR_INV_temp_B_45_29_PLUS__ETC___d844,
		temp_A_53_BIT_35_09_XOR_temp_B_45_BIT_35_10_12_ETC___d517;
  wire [33 : 0] temp_A_53_BIT_33_17_XOR_INV_temp_B_45_29_PLUS__ETC___d843,
		temp_A_53_BIT_33_17_XOR_temp_B_45_BIT_33_18_20_ETC___d516;
  wire [31 : 0] temp_A_53_BIT_31_25_XOR_INV_temp_B_45_29_PLUS__ETC___d842,
		temp_A_53_BIT_31_25_XOR_temp_B_45_BIT_31_26_28_ETC___d515;
  wire [30 : 0] IF_IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_s_ETC__q13,
		IF_IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_s_ETC__q12;
  wire [29 : 0] temp_A_53_BIT_29_33_XOR_INV_temp_B_45_29_PLUS__ETC___d841,
		temp_A_53_BIT_29_33_XOR_temp_B_45_BIT_29_34_36_ETC___d514;
  wire [27 : 0] temp_A_53_BIT_27_41_XOR_INV_temp_B_45_29_PLUS__ETC___d840,
		temp_A_53_BIT_27_41_XOR_temp_B_45_BIT_27_42_44_ETC___d513;
  wire [25 : 0] temp_A_53_BIT_25_49_XOR_INV_temp_B_45_29_PLUS__ETC___d839,
		temp_A_53_BIT_25_49_XOR_temp_B_45_BIT_25_50_52_ETC___d512;
  wire [24 : 0] IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5,
		IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [23 : 0] temp_A_53_BIT_23_57_XOR_INV_temp_B_45_29_PLUS__ETC___d838,
		temp_A_53_BIT_23_57_XOR_temp_B_45_BIT_23_58_60_ETC___d511;
  wire [22 : 0] IF_NOT_temp_sum_59_BIT_23_143_144_OR_temp_sum__ETC___d1255,
		IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131,
		IF_NOT_temp_sum_59_BIT_25_06_07_OR_temp_sum_59_ETC___d1080,
		IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256,
		IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132,
		x__h33997,
		x__h34020,
		x__h55494,
		x__h55517,
		x__h60773,
		x__h60796,
		x_fraction__h69714;
  wire [21 : 0] temp_A_53_BIT_21_65_XOR_INV_temp_B_45_29_PLUS__ETC___d837,
		temp_A_53_BIT_21_65_XOR_temp_B_45_BIT_21_66_68_ETC___d510;
  wire [19 : 0] temp_A_53_BIT_19_73_XOR_INV_temp_B_45_29_PLUS__ETC___d836,
		temp_A_53_BIT_19_73_XOR_temp_B_45_BIT_19_74_76_ETC___d509;
  wire [17 : 0] temp_A_53_BIT_17_81_XOR_INV_temp_B_45_29_PLUS__ETC___d835,
		temp_A_53_BIT_17_81_XOR_temp_B_45_BIT_17_82_84_ETC___d508;
  wire [15 : 0] temp_A_53_BIT_15_89_XOR_INV_temp_B_45_29_PLUS__ETC___d834,
		temp_A_53_BIT_15_89_XOR_temp_B_45_BIT_15_90_92_ETC___d507;
  wire [13 : 0] temp_A_53_BIT_13_97_XOR_INV_temp_B_45_29_PLUS__ETC___d833,
		temp_A_53_BIT_13_97_XOR_temp_B_45_BIT_13_98_00_ETC___d506;
  wire [11 : 0] temp_A_53_BIT_11_05_XOR_INV_temp_B_45_29_PLUS__ETC___d832,
		temp_A_53_BIT_11_05_XOR_temp_B_45_BIT_11_06_08_ETC___d505;
  wire [9 : 0] temp_A_53_BIT_9_13_XOR_INV_temp_B_45_29_PLUS_1_ETC___d831,
	       temp_A_53_BIT_9_13_XOR_temp_B_45_BIT_9_14_16_X_ETC___d504;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_exp___10257_BIT_0_THEN_1_ELSE_0__q7,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q11,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h39273,
	       _theResult___snd__h55491,
	       _theResult___snd_fst__h39348,
	       _theResult___snd_fst__h42347,
	       _theResult___snd_fst__h42355,
	       _theResult___snd_fst__h60845,
	       _theResult___snd_fst__h60853,
	       exp___1__h50257,
	       fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d994,
	       temp_A_53_BIT_7_21_XOR_INV_temp_B_45_29_PLUS_1_ETC___d830,
	       temp_A_53_BIT_7_21_XOR_temp_B_45_BIT_7_22_24_X_ETC___d503,
	       x__h39345,
	       x__h60842,
	       x_exponent__h26367,
	       x_exponent__h69713;
  wire [5 : 0] INV_fp_a_3_BIT_28_8_64_XOR_fp_a_3_BIT_27_2_OR__ETC___d893,
	       fp_a_3_BITS_30_TO_23_4_MINUS_0b1_149_BIT_5_176_ETC___d1200,
	       fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d137,
	       fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_2_AND_fp_a_3_ETC___d993,
	       temp_A_53_BIT_5_29_XOR_INV_temp_B_45_29_PLUS_1_ETC___d829,
	       temp_A_53_BIT_5_29_XOR_temp_B_45_BIT_5_30_32_X_ETC___d502;
  wire [4 : 0] temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1244,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1120,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1069;
  wire [3 : 0] INV_fp_a_3_BIT_26_6_66_XOR_fp_a_3_BIT_25_00_OR_ETC___d892,
	       fp_a_3_BIT_26_6_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d136,
	       fp_a_3_BIT_26_6_XOR_fp_a_3_BIT_25_00_AND_fp_a__ETC___d992,
	       temp_A_53_BIT_3_37_XOR_INV_temp_B_45_29_PLUS_1_ETC___d828,
	       temp_A_53_BIT_3_37_XOR_temp_B_45_BIT_3_38_40_X_ETC___d501;
  wire [1 : 0] fp_a_3_BIT_24_04_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d135,
	       temp_A_53_BIT_1_45_XOR_INV_temp_B_45_29_PLUS_1_ETC___d827,
	       temp_A_53_BIT_1_45_XOR_temp_B_45_BIT_1_46_48_X_ETC___d500;
  wire NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45,
       NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d51,
       NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57,
       fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20,
       fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17,
       fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42,
       fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920,
       fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24,
       got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139,
       temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228,
       temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227,
       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104,
       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226,
       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053,
       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103,
       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225,
       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052,
       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102,
       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224,
       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051,
       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101,
       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223,
       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050,
       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100,
       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222,
       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049,
       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099,
       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221,
       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048,
       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098,
       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220,
       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047,
       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097,
       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219,
       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046,
       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096,
       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218,
       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045,
       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095,
       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217,
       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044,
       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094,
       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216,
       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043,
       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093,
       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215,
       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042,
       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092,
       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214,
       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041,
       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091,
       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213,
       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040,
       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090,
       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212,
       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039,
       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089,
       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211,
       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038,
       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088,
       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210,
       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037,
       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087,
       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209,
       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036,
       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086,
       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208,
       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035,
       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085,
       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207,
       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034,
       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084,
       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033,
       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083,
       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173,
       temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032,
       temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974,
       temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026,
       x__h10025,
       x__h10072,
       x__h10217,
       x__h10264,
       x__h10409,
       x__h10456,
       x__h10601,
       x__h10648,
       x__h10793,
       x__h10840,
       x__h10985,
       x__h11032,
       x__h11177,
       x__h11224,
       x__h11369,
       x__h11416,
       x__h11561,
       x__h11608,
       x__h11753,
       x__h11800,
       x__h11945,
       x__h11992,
       x__h12137,
       x__h12184,
       x__h12329,
       x__h12376,
       x__h12521,
       x__h12568,
       x__h12713,
       x__h12760,
       x__h12905,
       x__h12952,
       x__h13097,
       x__h13144,
       x__h13289,
       x__h13336,
       x__h13481,
       x__h13528,
       x__h13673,
       x__h13720,
       x__h13865,
       x__h13912,
       x__h14057,
       x__h14104,
       x__h14249,
       x__h14296,
       x__h14441,
       x__h14488,
       x__h14633,
       x__h14680,
       x__h14825,
       x__h14872,
       x__h15017,
       x__h15064,
       x__h15209,
       x__h15256,
       x__h15342,
       x__h15401,
       x__h15448,
       x__h16874,
       x__h17003,
       x__h17062,
       x__h17195,
       x__h17254,
       x__h17387,
       x__h17446,
       x__h17579,
       x__h17638,
       x__h17771,
       x__h17830,
       x__h17963,
       x__h18022,
       x__h18155,
       x__h18214,
       x__h18347,
       x__h18406,
       x__h18539,
       x__h18598,
       x__h18731,
       x__h18790,
       x__h18923,
       x__h18982,
       x__h19115,
       x__h19174,
       x__h19307,
       x__h19366,
       x__h19499,
       x__h19558,
       x__h19691,
       x__h19750,
       x__h19883,
       x__h19942,
       x__h20075,
       x__h20134,
       x__h20267,
       x__h20326,
       x__h20459,
       x__h20518,
       x__h20651,
       x__h20710,
       x__h20843,
       x__h20902,
       x__h21035,
       x__h21094,
       x__h21227,
       x__h21286,
       x__h21419,
       x__h21478,
       x__h21611,
       x__h21670,
       x__h21803,
       x__h21862,
       x__h21995,
       x__h22054,
       x__h22187,
       x__h22246,
       x__h22379,
       x__h22438,
       x__h22571,
       x__h22630,
       x__h22763,
       x__h22822,
       x__h22955,
       x__h23014,
       x__h23147,
       x__h23206,
       x__h23339,
       x__h23398,
       x__h23531,
       x__h23590,
       x__h23723,
       x__h23782,
       x__h23915,
       x__h23974,
       x__h24107,
       x__h24166,
       x__h24299,
       x__h24358,
       x__h24491,
       x__h24550,
       x__h24683,
       x__h24742,
       x__h24875,
       x__h24934,
       x__h25067,
       x__h25126,
       x__h25259,
       x__h25318,
       x__h25451,
       x__h25510,
       x__h25643,
       x__h25702,
       x__h25835,
       x__h25894,
       x__h26027,
       x__h26086,
       x__h26632,
       x__h26759,
       x__h26947,
       x__h27135,
       x__h27323,
       x__h27511,
       x__h27699,
       x__h3349,
       x__h3476,
       x__h3533,
       x__h3662,
       x__h3719,
       x__h3848,
       x__h3905,
       x__h4034,
       x__h4091,
       x__h41112,
       x__h41238,
       x__h41424,
       x__h41610,
       x__h41796,
       x__h41982,
       x__h4220,
       x__h4277,
       x__h4406,
       x__h4463,
       x__h6377,
       x__h6424,
       x__h6569,
       x__h6616,
       x__h6761,
       x__h6808,
       x__h6953,
       x__h7000,
       x__h7145,
       x__h7192,
       x__h7337,
       x__h7384,
       x__h7529,
       x__h7576,
       x__h7721,
       x__h7768,
       x__h7913,
       x__h7960,
       x__h8105,
       x__h8152,
       x__h8297,
       x__h8344,
       x__h8489,
       x__h8536,
       x__h8681,
       x__h8728,
       x__h8873,
       x__h8920,
       x__h9065,
       x__h9112,
       x__h9257,
       x__h9304,
       x__h9449,
       x__h9496,
       x__h9641,
       x__h9688,
       x__h9833,
       x__h9880,
       x_sign__h69712,
       y__h10026,
       y__h10159,
       y__h10218,
       y__h10351,
       y__h10410,
       y__h10543,
       y__h10602,
       y__h10735,
       y__h10794,
       y__h10927,
       y__h10986,
       y__h11119,
       y__h11178,
       y__h11311,
       y__h11370,
       y__h11503,
       y__h11562,
       y__h11695,
       y__h11754,
       y__h11887,
       y__h11946,
       y__h12079,
       y__h12138,
       y__h12271,
       y__h12330,
       y__h12463,
       y__h12522,
       y__h12655,
       y__h12714,
       y__h12847,
       y__h12906,
       y__h13039,
       y__h13098,
       y__h13231,
       y__h13290,
       y__h13423,
       y__h13482,
       y__h13615,
       y__h13674,
       y__h13807,
       y__h13866,
       y__h13999,
       y__h14058,
       y__h14191,
       y__h14250,
       y__h14383,
       y__h14442,
       y__h14575,
       y__h14634,
       y__h14767,
       y__h14826,
       y__h14959,
       y__h15018,
       y__h15151,
       y__h15210,
       y__h15343,
       y__h15402,
       y__h16875,
       y__h17004,
       y__h17063,
       y__h17196,
       y__h17255,
       y__h17388,
       y__h17447,
       y__h17580,
       y__h17639,
       y__h17772,
       y__h17831,
       y__h17964,
       y__h18023,
       y__h18156,
       y__h18215,
       y__h18348,
       y__h18407,
       y__h18540,
       y__h18599,
       y__h18732,
       y__h18791,
       y__h18924,
       y__h18983,
       y__h19116,
       y__h19175,
       y__h19308,
       y__h19367,
       y__h19500,
       y__h19559,
       y__h19692,
       y__h19751,
       y__h19884,
       y__h19943,
       y__h20076,
       y__h20135,
       y__h20268,
       y__h20327,
       y__h20460,
       y__h20519,
       y__h20652,
       y__h20711,
       y__h20844,
       y__h20903,
       y__h21036,
       y__h21095,
       y__h21228,
       y__h21287,
       y__h21420,
       y__h21479,
       y__h21612,
       y__h21671,
       y__h21804,
       y__h21863,
       y__h2192,
       y__h21996,
       y__h22055,
       y__h22188,
       y__h22247,
       y__h22380,
       y__h22439,
       y__h22572,
       y__h22631,
       y__h22764,
       y__h22823,
       y__h22956,
       y__h23015,
       y__h23148,
       y__h23207,
       y__h23340,
       y__h23399,
       y__h23532,
       y__h23591,
       y__h23724,
       y__h23783,
       y__h2381,
       y__h23916,
       y__h23975,
       y__h24108,
       y__h24167,
       y__h24300,
       y__h24359,
       y__h24492,
       y__h24551,
       y__h24684,
       y__h24743,
       y__h24876,
       y__h24935,
       y__h25068,
       y__h25127,
       y__h25260,
       y__h25319,
       y__h25452,
       y__h25511,
       y__h25644,
       y__h2570,
       y__h25703,
       y__h25836,
       y__h25895,
       y__h26028,
       y__h26087,
       y__h26760,
       y__h26818,
       y__h26948,
       y__h27006,
       y__h27136,
       y__h27194,
       y__h27324,
       y__h27382,
       y__h27512,
       y__h27570,
       y__h2759,
       y__h27700,
       y__h27758,
       y__h2948,
       y__h29723,
       y__h29909,
       y__h30095,
       y__h30281,
       y__h30467,
       y__h30653,
       y__h30839,
       y__h31025,
       y__h31211,
       y__h3137,
       y__h31397,
       y__h31583,
       y__h31769,
       y__h31955,
       y__h32141,
       y__h32327,
       y__h32513,
       y__h32699,
       y__h32885,
       y__h33071,
       y__h33257,
       y__h33443,
       y__h3350,
       y__h3352,
       y__h33629,
       y__h3477,
       y__h3479,
       y__h3534,
       y__h3663,
       y__h3665,
       y__h3720,
       y__h3849,
       y__h3851,
       y__h3906,
       y__h39742,
       y__h39928,
       y__h40114,
       y__h40300,
       y__h4035,
       y__h4037,
       y__h40486,
       y__h40672,
       y__h4092,
       y__h41239,
       y__h41425,
       y__h41611,
       y__h41797,
       y__h41983,
       y__h42169,
       y__h4221,
       y__h4223,
       y__h4278,
       y__h4407,
       y__h4409,
       y__h4464,
       y__h51220,
       y__h51406,
       y__h51592,
       y__h51778,
       y__h51964,
       y__h52150,
       y__h52336,
       y__h52522,
       y__h52708,
       y__h52894,
       y__h53080,
       y__h53266,
       y__h53452,
       y__h53638,
       y__h53824,
       y__h54010,
       y__h54196,
       y__h54382,
       y__h54568,
       y__h54754,
       y__h54940,
       y__h55126,
       y__h55312,
       y__h56499,
       y__h56685,
       y__h56871,
       y__h57057,
       y__h57243,
       y__h57429,
       y__h57615,
       y__h57801,
       y__h57987,
       y__h58173,
       y__h58359,
       y__h58545,
       y__h58731,
       y__h58917,
       y__h59103,
       y__h59289,
       y__h59475,
       y__h59661,
       y__h59847,
       y__h60033,
       y__h60219,
       y__h60405,
       y__h60591,
       y__h61246,
       y__h61435,
       y__h61624,
       y__h61813,
       y__h62002,
       y__h62191,
       y__h6319,
       y__h6378,
       y__h6425,
       y__h6511,
       y__h6570,
       y__h6703,
       y__h6762,
       y__h6895,
       y__h6954,
       y__h7087,
       y__h7146,
       y__h7279,
       y__h7338,
       y__h7471,
       y__h7530,
       y__h7663,
       y__h7722,
       y__h7855,
       y__h7914,
       y__h8047,
       y__h8106,
       y__h8239,
       y__h8298,
       y__h8431,
       y__h8490,
       y__h8623,
       y__h8682,
       y__h8815,
       y__h8874,
       y__h9007,
       y__h9066,
       y__h9199,
       y__h9258,
       y__h9391,
       y__h9450,
       y__h9583,
       y__h9642,
       y__h9775,
       y__h9834,
       y__h9967;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = assembled_answer ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     got_A && got_B && !operands_swapped_if_needed && !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;
  assign WILL_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     round_addition_result &&
	     !round_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_round_sub
  assign CAN_FIRE_RL_round_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     round_subtraction_result &&
	     !round_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_round_sub =
	     CAN_FIRE_RL_round_sub && !WILL_FIRE_RL_round_add ;

  // rule RL_adjust_subres
  assign CAN_FIRE_RL_adjust_subres =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     add_prep_done &&
	     adj_sub &&
	     !adj_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_adjust_subres = CAN_FIRE_RL_adjust_subres ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     add_prep_done &&
	     do_add &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_sub
  assign CAN_FIRE_RL_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     add_prep_done &&
	     do_sub &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_sub = CAN_FIRE_RL_sub ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     round_done &&
	     !assembled_answer &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;
  assign WILL_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;

  // rule RL_handle_zero_case
  assign CAN_FIRE_RL_handle_zero_case = MUX_handle_zero_write_1__SEL_2 ;
  assign WILL_FIRE_RL_handle_zero_case = MUX_handle_zero_write_1__SEL_2 ;

  // rule RL_handle_oneinpzero_case
  assign CAN_FIRE_RL_handle_oneinpzero_case = handle_oneinpzero ;
  assign WILL_FIRE_RL_handle_oneinpzero_case = handle_oneinpzero ;

  // rule RL_deassert_assembled_answer
  assign CAN_FIRE_RL_deassert_assembled_answer = assembled_answer ;
  assign WILL_FIRE_RL_deassert_assembled_answer = MUX_got_A_write_1__SEL_1 ;

  // inputs to muxes for submodule ports
  assign MUX_do_add_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ;
  assign MUX_do_sub_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ;
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57 ;
  assign MUX_fp_a_write_1__SEL_2 =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ;
  assign MUX_fp_b_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45 ;
  assign MUX_got_A_write_1__SEL_1 =
	     assembled_answer && !handle_oneinpzero &&
	     !WILL_FIRE_RL_handle_zero_case ;
  assign MUX_handle_zero_write_1__SEL_2 = handle_zero && !handle_oneinpzero ;
  assign MUX_temp_B_write_1__SEL_1 =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 &&
	     !add_prep_done &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign MUX_temp_B_write_1__SEL_2 =
	     got_A && got_B && operands_swapped_if_needed &&
	     !expdiff_calculated &&
	     !handle_zero &&
	     !handle_oneinpzero ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_2 =
	     { x__h60842,
	       IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256[22:1],
	       IF_IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_s_ETC__q13[0] } ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_3 =
	     { x__h39345,
	       IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132[22:1],
	       IF_IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_s_ETC__q12[0] } ;
  assign MUX_fp_a_write_1__VAL_2 =
	     { fp_a[31], x_exponent__h26367, fp_a[22:0] } ;
  assign MUX_fp_a_write_1__VAL_3 = { get_A_a, 16'b0 } ;
  assign MUX_fp_b_write_1__VAL_1 =
	     (fp_a[30:23] == 8'd0 && fp_a[22:0] == 23'd0 ||
	      fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0) ?
	       { 1'd0, fp_b[30:0] } :
	       fp_a ;
  assign MUX_fp_c_write_1__VAL_1 = { sign_c, add_res_with_adj_exp } ;
  assign MUX_fp_c_write_1__VAL_2 =
	     { x_sign__h69712, x_exponent__h69713, x_fraction__h69714 } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_2 =
	     { x__h26027 ^ y__h26028,
	       x__h25835 ^ y__h25836,
	       temp_A_53_BIT_47_61_XOR_INV_temp_B_45_29_PLUS__ETC___d850 } ;
  assign MUX_temp_sum_write_1__VAL_3 =
	     { x__h15342 ^ y__h15343,
	       x__h15448 ^ y__h15151,
	       temp_A_53_BIT_47_61_XOR_temp_B_45_BIT_47_62_64_ETC___d523 } ;
  assign MUX_temp_sum_write_1__VAL_4 = { temp_sum[48:0], 1'd0 } ;

  // register add_done
  assign add_done_D_IN = 1'd0 ;
  assign add_done_EN = MUX_got_A_write_1__SEL_1 ;

  // register add_prep_done
  assign add_prep_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign add_prep_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_round_sub or
	  MUX_add_res_with_adj_exp_write_1__VAL_2 or
	  WILL_FIRE_RL_round_add or MUX_add_res_with_adj_exp_write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: add_res_with_adj_exp_D_IN = 31'd0;
    WILL_FIRE_RL_round_sub:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_2;
    WILL_FIRE_RL_round_add:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_3;
    default: add_res_with_adj_exp_D_IN =
		 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_done
  assign adj_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_done_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register adj_sub
  assign adj_sub_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign adj_sub_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_sub ;

  // register assembled_answer
  assign assembled_answer_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign assembled_answer_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || handle_oneinpzero ||
	     WILL_FIRE_RL_handle_zero_case ||
	     WILL_FIRE_RL_assemble_answer ;

  // register do_add
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_add_write_1__SEL_2 or WILL_FIRE_RL_add)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_add_D_IN = 1'd0;
    MUX_do_add_write_1__SEL_2: do_add_D_IN = 1'd1;
    WILL_FIRE_RL_add: do_add_D_IN = 1'd0;
    default: do_add_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_add_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ||
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_add ;

  // register do_sub
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  MUX_do_sub_write_1__SEL_2 or WILL_FIRE_RL_sub)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: do_sub_D_IN = 1'd0;
    MUX_do_sub_write_1__SEL_2: do_sub_D_IN = 1'd1;
    WILL_FIRE_RL_sub: do_sub_D_IN = 1'd0;
    default: do_sub_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_sub_EN =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h4406 ^ y__h4407,
	       x__h4220 ^ y__h4221,
	       fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d137 } ;
  assign expdiff_EN = MUX_temp_B_write_1__SEL_2 ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign expdiff_calculated_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  always@(MUX_fp_a_write_1__SEL_1 or
	  fp_b or
	  MUX_fp_a_write_1__SEL_2 or
	  MUX_fp_a_write_1__VAL_2 or EN_get_A or MUX_fp_a_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fp_a_write_1__SEL_1: fp_a_D_IN = fp_b;
      MUX_fp_a_write_1__SEL_2: fp_a_D_IN = MUX_fp_a_write_1__VAL_2;
      EN_get_A: fp_a_D_IN = MUX_fp_a_write_1__VAL_3;
      default: fp_a_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57 ||
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     EN_get_A ;

  // register fp_b
  assign fp_b_D_IN =
	     MUX_fp_b_write_1__SEL_1 ? MUX_fp_b_write_1__VAL_1 : get_B_b ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45 ||
	     EN_get_B ;

  // register fp_c
  always@(WILL_FIRE_RL_assemble_answer or
	  MUX_fp_c_write_1__VAL_1 or
	  handle_oneinpzero or
	  MUX_fp_c_write_1__VAL_2 or WILL_FIRE_RL_handle_zero_case)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_assemble_answer: fp_c_D_IN = MUX_fp_c_write_1__VAL_1;
      handle_oneinpzero: fp_c_D_IN = MUX_fp_c_write_1__VAL_2;
      WILL_FIRE_RL_handle_zero_case: fp_c_D_IN = 32'd0;
      default: fp_c_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_c_EN =
	     WILL_FIRE_RL_assemble_answer || handle_oneinpzero ||
	     WILL_FIRE_RL_handle_zero_case ;

  // register got_A
  assign got_A_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign got_A_EN = WILL_FIRE_RL_deassert_assembled_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign got_B_EN = WILL_FIRE_RL_deassert_assembled_answer || EN_get_B ;

  // register handle_oneinpzero
  assign handle_oneinpzero_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer && !handle_oneinpzero ;
  assign handle_oneinpzero_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d51 ||
	     handle_oneinpzero ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register handle_zero
  assign handle_zero_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer &&
	     !WILL_FIRE_RL_handle_zero_case ;
  assign handle_zero_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 &&
	     fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 &&
	     !fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 ||
	     WILL_FIRE_RL_handle_zero_case ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign operands_swapped_if_needed_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_swap_operands_if_needed ;

  // register round_addition_result
  assign round_addition_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_addition_result_EN =
	     WILL_FIRE_RL_deassert_assembled_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_done_EN =
	     WILL_FIRE_RL_deassert_assembled_answer ||
	     WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN =
	     !WILL_FIRE_RL_deassert_assembled_answer ;
  assign round_subtraction_result_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = MUX_temp_B_write_1__SEL_1 ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = MUX_temp_B_write_1__SEL_2 ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_add_prep ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN = WILL_FIRE_RL_add_prep || WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  always@(WILL_FIRE_RL_deassert_assembled_answer or
	  WILL_FIRE_RL_sub or
	  MUX_temp_sum_write_1__VAL_2 or
	  WILL_FIRE_RL_add or
	  MUX_temp_sum_write_1__VAL_3 or
	  MUX_fp_a_write_1__SEL_2 or MUX_temp_sum_write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_deassert_assembled_answer: temp_sum_D_IN = 50'd0;
    WILL_FIRE_RL_sub: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_2;
    WILL_FIRE_RL_add: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_3;
    MUX_fp_a_write_1__SEL_2: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_4;
    default: temp_sum_D_IN =
		 50'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign temp_sum_EN =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_sub ||
	     WILL_FIRE_RL_add ||
	     WILL_FIRE_RL_deassert_assembled_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_s_ETC__q13 =
	     IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_s_ETC__q12 =
	     IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_exp___10257_BIT_0_THEN_1_ELSE_0__q7 =
	     (~exp___1__h50257[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5 =
	     (~temp_sum[23]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_NOT_temp_sum_59_BIT_23_143_144_OR_temp_sum__ETC___d1255 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       temp_sum[46:24] :
	       (temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173 ?
		  x__h55494 :
		  x__h55517) ;
  assign IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026 ?
		  x__h60773 :
		  x__h60796) ;
  assign IF_NOT_temp_sum_59_BIT_25_06_07_OR_temp_sum_59_ETC___d1080 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974 ?
		  x__h33997 :
		  x__h34020) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q11 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_A_BIT_0_XOR_INV_temp_B_45_29_PLUS_1_30_ETC__q9 =
	     (temp_A[0] ^ INV_temp_B_45_29_PLUS_1___d530[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10 =
	     (temp_A[0] ^ temp_B[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_sum_59_BIT_48_60_THEN_IF_NOT_temp_sum__ETC___d1256 =
	     temp_sum[48] ?
	       IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131 :
	       IF_NOT_temp_sum_59_BIT_23_143_144_OR_temp_sum__ETC___d1255 ;
  assign IF_temp_sum_59_BIT_49_05_THEN_IF_NOT_temp_sum__ETC___d1132 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_59_BIT_25_06_07_OR_temp_sum_59_ETC___d1080 :
	       IF_NOT_temp_sum_59_BIT_24_97_98_OR_temp_sum_59_ETC___d1131 ;
  assign INV_fp_a_3_BIT_26_6_66_XOR_fp_a_3_BIT_25_00_OR_ETC___d892 =
	     { x__h26947 ^ y__h26948,
	       x__h26759 ^ y__h26760,
	       x__h26632 ^ fp_a[23],
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign INV_fp_a_3_BIT_28_8_64_XOR_fp_a_3_BIT_27_2_OR__ETC___d893 =
	     { x__h27323 ^ y__h27324,
	       x__h27135 ^ y__h27136,
	       INV_fp_a_3_BIT_26_6_66_XOR_fp_a_3_BIT_25_00_OR_ETC___d892 } ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign INV_temp_B_45_29_PLUS_1___d530 = ~temp_B + 50'd1 ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d45 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24) &&
	     (fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0 ||
	      (fp_a[30:23] != 8'd0 || fp_a[22:0] != 23'd0) &&
	      fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42) ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d51 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24) &&
	     (fp_a[30:23] == 8'd0 && fp_a[22:0] == 23'd0 ||
	      fp_b[30:23] == 8'd0 && fp_b[22:0] == 23'd0) ;
  assign NOT_fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_T_ETC___d57 =
	     (!fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 ||
	      !fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 ||
	      fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24) &&
	     (fp_a[30:23] != 8'd0 || fp_a[22:0] != 23'd0) &&
	     (fp_b[30:23] != 8'd0 || fp_b[22:0] != 23'd0) &&
	     fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42 ;
  assign _theResult___snd__h39273 =
	     { fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920,
	       x__h41982,
	       x__h41796,
	       x__h41610,
	       x__h41424,
	       x__h41238,
	       x__h41112,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd__h55491 =
	     { exp___1__h50257[7] ^ y__h62191,
	       exp___1__h50257[6] ^ y__h62002,
	       fp_a_3_BITS_30_TO_23_4_MINUS_0b1_149_BIT_5_176_ETC___d1200 } ;
  assign _theResult___snd_fst__h39348 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h39273 :
	       (temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974 ?
		  fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d994 :
		  _theResult___snd__h39273) ;
  assign _theResult___snd_fst__h42347 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h42355 ;
  assign _theResult___snd_fst__h42355 =
	     temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026 ?
	       _theResult___snd__h39273 :
	       fp_a[30:23] ;
  assign _theResult___snd_fst__h60845 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       exp___1__h50257 :
	       _theResult___snd_fst__h60853 ;
  assign _theResult___snd_fst__h60853 =
	     temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173 ?
	       _theResult___snd__h55491 :
	       exp___1__h50257 ;
  assign exp___1__h50257 = fp_a[30:23] - 8'b00000001 ;
  assign fp_a_3_BITS_22_TO_0_8_EQ_fp_b_5_BITS_22_TO_0_9___d20 =
	     fp_a[22:0] == fp_b[22:0] ;
  assign fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 =
	     fp_a[30:23] == fp_b[30:23] ;
  assign fp_a_3_BITS_30_TO_23_4_MINUS_0b1_149_BIT_5_176_ETC___d1200 =
	     { exp___1__h50257[5] ^ y__h61813,
	       exp___1__h50257[4] ^ y__h61624,
	       exp___1__h50257[3] ^ y__h61435,
	       exp___1__h50257[2] ^ y__h61246,
	       exp___1__h50257[1] ^ exp___1__h50257[0],
	       IF_INV_exp___10257_BIT_0_THEN_1_ELSE_0__q7[0] } ;
  assign fp_a_3_BITS_30_TO_23_4_ULT_fp_b_5_BITS_30_TO_2_ETC___d42 =
	     fp_a[30:23] < fp_b[30:23] ||
	     fp_a_3_BITS_30_TO_23_4_EQ_fp_b_5_BITS_30_TO_23_6___d17 &&
	     fp_a[22:0] < fp_b[22:0] ;
  assign fp_a_3_BIT_24_04_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d135 =
	     { x__h3349 ^ y__h3350,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q11[0] } ;
  assign fp_a_3_BIT_26_6_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d136 =
	     { x__h3662 ^ y__h3663,
	       x__h3476 ^ y__h3477,
	       fp_a_3_BIT_24_04_XOR_INV_fp_b_5_BITS_30_TO_23__ETC___d135 } ;
  assign fp_a_3_BIT_26_6_XOR_fp_a_3_BIT_25_00_AND_fp_a__ETC___d992 =
	     { x__h41424 ^ y__h41425,
	       x__h41238 ^ y__h41239,
	       x__h41112 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8[0] } ;
  assign fp_a_3_BIT_28_8_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d137 =
	     { x__h4034 ^ y__h4035,
	       x__h3848 ^ y__h3849,
	       fp_a_3_BIT_26_6_XOR_INV_fp_b_5_BITS_30_TO_23_6_ETC___d136 } ;
  assign fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_2_AND_fp_a_3_ETC___d993 =
	     { x__h41796 ^ y__h41797,
	       x__h41610 ^ y__h41611,
	       fp_a_3_BIT_26_6_XOR_fp_a_3_BIT_25_00_AND_fp_a__ETC___d992 } ;
  assign fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920 =
	     fp_a[30] ^ y__h40672 ;
  assign fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d994 =
	     { fp_a_3_BIT_30_6_XOR_fp_a_3_BIT_29_4_AND_fp_a_3_ETC___d920 ^
	       y__h42169,
	       x__h41982 ^ y__h41983,
	       fp_a_3_BIT_28_8_XOR_fp_a_3_BIT_27_2_AND_fp_a_3_ETC___d993 } ;
  assign fp_a_3_BIT_31_2_EQ_fp_b_5_BIT_31_3___d24 = fp_a[31] == fp_b[31] ;
  assign got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d139 =
	     got_A && got_B && operands_swapped_if_needed &&
	     expdiff_calculated ;
  assign temp_A_53_BIT_11_05_XOR_INV_temp_B_45_29_PLUS__ETC___d832 =
	     { x__h18731 ^ y__h18732,
	       x__h18539 ^ y__h18540,
	       temp_A_53_BIT_9_13_XOR_INV_temp_B_45_29_PLUS_1_ETC___d831 } ;
  assign temp_A_53_BIT_11_05_XOR_temp_B_45_BIT_11_06_08_ETC___d505 =
	     { x__h8344 ^ y__h8047,
	       x__h8152 ^ y__h7855,
	       temp_A_53_BIT_9_13_XOR_temp_B_45_BIT_9_14_16_X_ETC___d504 } ;
  assign temp_A_53_BIT_13_97_XOR_INV_temp_B_45_29_PLUS__ETC___d833 =
	     { x__h19115 ^ y__h19116,
	       x__h18923 ^ y__h18924,
	       temp_A_53_BIT_11_05_XOR_INV_temp_B_45_29_PLUS__ETC___d832 } ;
  assign temp_A_53_BIT_13_97_XOR_temp_B_45_BIT_13_98_00_ETC___d506 =
	     { x__h8728 ^ y__h8431,
	       x__h8536 ^ y__h8239,
	       temp_A_53_BIT_11_05_XOR_temp_B_45_BIT_11_06_08_ETC___d505 } ;
  assign temp_A_53_BIT_15_89_XOR_INV_temp_B_45_29_PLUS__ETC___d834 =
	     { x__h19499 ^ y__h19500,
	       x__h19307 ^ y__h19308,
	       temp_A_53_BIT_13_97_XOR_INV_temp_B_45_29_PLUS__ETC___d833 } ;
  assign temp_A_53_BIT_15_89_XOR_temp_B_45_BIT_15_90_92_ETC___d507 =
	     { x__h9112 ^ y__h8815,
	       x__h8920 ^ y__h8623,
	       temp_A_53_BIT_13_97_XOR_temp_B_45_BIT_13_98_00_ETC___d506 } ;
  assign temp_A_53_BIT_17_81_XOR_INV_temp_B_45_29_PLUS__ETC___d835 =
	     { x__h19883 ^ y__h19884,
	       x__h19691 ^ y__h19692,
	       temp_A_53_BIT_15_89_XOR_INV_temp_B_45_29_PLUS__ETC___d834 } ;
  assign temp_A_53_BIT_17_81_XOR_temp_B_45_BIT_17_82_84_ETC___d508 =
	     { x__h9496 ^ y__h9199,
	       x__h9304 ^ y__h9007,
	       temp_A_53_BIT_15_89_XOR_temp_B_45_BIT_15_90_92_ETC___d507 } ;
  assign temp_A_53_BIT_19_73_XOR_INV_temp_B_45_29_PLUS__ETC___d836 =
	     { x__h20267 ^ y__h20268,
	       x__h20075 ^ y__h20076,
	       temp_A_53_BIT_17_81_XOR_INV_temp_B_45_29_PLUS__ETC___d835 } ;
  assign temp_A_53_BIT_19_73_XOR_temp_B_45_BIT_19_74_76_ETC___d509 =
	     { x__h9880 ^ y__h9583,
	       x__h9688 ^ y__h9391,
	       temp_A_53_BIT_17_81_XOR_temp_B_45_BIT_17_82_84_ETC___d508 } ;
  assign temp_A_53_BIT_1_45_XOR_INV_temp_B_45_29_PLUS_1_ETC___d827 =
	     { x__h16874 ^ y__h16875,
	       IF_temp_A_BIT_0_XOR_INV_temp_B_45_29_PLUS_1_30_ETC__q9[0] } ;
  assign temp_A_53_BIT_1_45_XOR_temp_B_45_BIT_1_46_48_X_ETC___d500 =
	     { x__h6424 ^ y__h6425,
	       IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10[0] } ;
  assign temp_A_53_BIT_21_65_XOR_INV_temp_B_45_29_PLUS__ETC___d837 =
	     { x__h20651 ^ y__h20652,
	       x__h20459 ^ y__h20460,
	       temp_A_53_BIT_19_73_XOR_INV_temp_B_45_29_PLUS__ETC___d836 } ;
  assign temp_A_53_BIT_21_65_XOR_temp_B_45_BIT_21_66_68_ETC___d510 =
	     { x__h10264 ^ y__h9967,
	       x__h10072 ^ y__h9775,
	       temp_A_53_BIT_19_73_XOR_temp_B_45_BIT_19_74_76_ETC___d509 } ;
  assign temp_A_53_BIT_23_57_XOR_INV_temp_B_45_29_PLUS__ETC___d838 =
	     { x__h21035 ^ y__h21036,
	       x__h20843 ^ y__h20844,
	       temp_A_53_BIT_21_65_XOR_INV_temp_B_45_29_PLUS__ETC___d837 } ;
  assign temp_A_53_BIT_23_57_XOR_temp_B_45_BIT_23_58_60_ETC___d511 =
	     { x__h10648 ^ y__h10351,
	       x__h10456 ^ y__h10159,
	       temp_A_53_BIT_21_65_XOR_temp_B_45_BIT_21_66_68_ETC___d510 } ;
  assign temp_A_53_BIT_25_49_XOR_INV_temp_B_45_29_PLUS__ETC___d839 =
	     { x__h21419 ^ y__h21420,
	       x__h21227 ^ y__h21228,
	       temp_A_53_BIT_23_57_XOR_INV_temp_B_45_29_PLUS__ETC___d838 } ;
  assign temp_A_53_BIT_25_49_XOR_temp_B_45_BIT_25_50_52_ETC___d512 =
	     { x__h11032 ^ y__h10735,
	       x__h10840 ^ y__h10543,
	       temp_A_53_BIT_23_57_XOR_temp_B_45_BIT_23_58_60_ETC___d511 } ;
  assign temp_A_53_BIT_27_41_XOR_INV_temp_B_45_29_PLUS__ETC___d840 =
	     { x__h21803 ^ y__h21804,
	       x__h21611 ^ y__h21612,
	       temp_A_53_BIT_25_49_XOR_INV_temp_B_45_29_PLUS__ETC___d839 } ;
  assign temp_A_53_BIT_27_41_XOR_temp_B_45_BIT_27_42_44_ETC___d513 =
	     { x__h11416 ^ y__h11119,
	       x__h11224 ^ y__h10927,
	       temp_A_53_BIT_25_49_XOR_temp_B_45_BIT_25_50_52_ETC___d512 } ;
  assign temp_A_53_BIT_29_33_XOR_INV_temp_B_45_29_PLUS__ETC___d841 =
	     { x__h22187 ^ y__h22188,
	       x__h21995 ^ y__h21996,
	       temp_A_53_BIT_27_41_XOR_INV_temp_B_45_29_PLUS__ETC___d840 } ;
  assign temp_A_53_BIT_29_33_XOR_temp_B_45_BIT_29_34_36_ETC___d514 =
	     { x__h11800 ^ y__h11503,
	       x__h11608 ^ y__h11311,
	       temp_A_53_BIT_27_41_XOR_temp_B_45_BIT_27_42_44_ETC___d513 } ;
  assign temp_A_53_BIT_31_25_XOR_INV_temp_B_45_29_PLUS__ETC___d842 =
	     { x__h22571 ^ y__h22572,
	       x__h22379 ^ y__h22380,
	       temp_A_53_BIT_29_33_XOR_INV_temp_B_45_29_PLUS__ETC___d841 } ;
  assign temp_A_53_BIT_31_25_XOR_temp_B_45_BIT_31_26_28_ETC___d515 =
	     { x__h12184 ^ y__h11887,
	       x__h11992 ^ y__h11695,
	       temp_A_53_BIT_29_33_XOR_temp_B_45_BIT_29_34_36_ETC___d514 } ;
  assign temp_A_53_BIT_33_17_XOR_INV_temp_B_45_29_PLUS__ETC___d843 =
	     { x__h22955 ^ y__h22956,
	       x__h22763 ^ y__h22764,
	       temp_A_53_BIT_31_25_XOR_INV_temp_B_45_29_PLUS__ETC___d842 } ;
  assign temp_A_53_BIT_33_17_XOR_temp_B_45_BIT_33_18_20_ETC___d516 =
	     { x__h12568 ^ y__h12271,
	       x__h12376 ^ y__h12079,
	       temp_A_53_BIT_31_25_XOR_temp_B_45_BIT_31_26_28_ETC___d515 } ;
  assign temp_A_53_BIT_35_09_XOR_INV_temp_B_45_29_PLUS__ETC___d844 =
	     { x__h23339 ^ y__h23340,
	       x__h23147 ^ y__h23148,
	       temp_A_53_BIT_33_17_XOR_INV_temp_B_45_29_PLUS__ETC___d843 } ;
  assign temp_A_53_BIT_35_09_XOR_temp_B_45_BIT_35_10_12_ETC___d517 =
	     { x__h12952 ^ y__h12655,
	       x__h12760 ^ y__h12463,
	       temp_A_53_BIT_33_17_XOR_temp_B_45_BIT_33_18_20_ETC___d516 } ;
  assign temp_A_53_BIT_37_01_XOR_INV_temp_B_45_29_PLUS__ETC___d845 =
	     { x__h23723 ^ y__h23724,
	       x__h23531 ^ y__h23532,
	       temp_A_53_BIT_35_09_XOR_INV_temp_B_45_29_PLUS__ETC___d844 } ;
  assign temp_A_53_BIT_37_01_XOR_temp_B_45_BIT_37_02_04_ETC___d518 =
	     { x__h13336 ^ y__h13039,
	       x__h13144 ^ y__h12847,
	       temp_A_53_BIT_35_09_XOR_temp_B_45_BIT_35_10_12_ETC___d517 } ;
  assign temp_A_53_BIT_39_93_XOR_INV_temp_B_45_29_PLUS__ETC___d846 =
	     { x__h24107 ^ y__h24108,
	       x__h23915 ^ y__h23916,
	       temp_A_53_BIT_37_01_XOR_INV_temp_B_45_29_PLUS__ETC___d845 } ;
  assign temp_A_53_BIT_39_93_XOR_temp_B_45_BIT_39_94_96_ETC___d519 =
	     { x__h13720 ^ y__h13423,
	       x__h13528 ^ y__h13231,
	       temp_A_53_BIT_37_01_XOR_temp_B_45_BIT_37_02_04_ETC___d518 } ;
  assign temp_A_53_BIT_3_37_XOR_INV_temp_B_45_29_PLUS_1_ETC___d828 =
	     { x__h17195 ^ y__h17196,
	       x__h17003 ^ y__h17004,
	       temp_A_53_BIT_1_45_XOR_INV_temp_B_45_29_PLUS_1_ETC___d827 } ;
  assign temp_A_53_BIT_3_37_XOR_temp_B_45_BIT_3_38_40_X_ETC___d501 =
	     { x__h6808 ^ y__h6511,
	       x__h6616 ^ y__h6319,
	       temp_A_53_BIT_1_45_XOR_temp_B_45_BIT_1_46_48_X_ETC___d500 } ;
  assign temp_A_53_BIT_41_85_XOR_INV_temp_B_45_29_PLUS__ETC___d847 =
	     { x__h24491 ^ y__h24492,
	       x__h24299 ^ y__h24300,
	       temp_A_53_BIT_39_93_XOR_INV_temp_B_45_29_PLUS__ETC___d846 } ;
  assign temp_A_53_BIT_41_85_XOR_temp_B_45_BIT_41_86_88_ETC___d520 =
	     { x__h14104 ^ y__h13807,
	       x__h13912 ^ y__h13615,
	       temp_A_53_BIT_39_93_XOR_temp_B_45_BIT_39_94_96_ETC___d519 } ;
  assign temp_A_53_BIT_43_77_XOR_INV_temp_B_45_29_PLUS__ETC___d848 =
	     { x__h24875 ^ y__h24876,
	       x__h24683 ^ y__h24684,
	       temp_A_53_BIT_41_85_XOR_INV_temp_B_45_29_PLUS__ETC___d847 } ;
  assign temp_A_53_BIT_43_77_XOR_temp_B_45_BIT_43_78_80_ETC___d521 =
	     { x__h14488 ^ y__h14191,
	       x__h14296 ^ y__h13999,
	       temp_A_53_BIT_41_85_XOR_temp_B_45_BIT_41_86_88_ETC___d520 } ;
  assign temp_A_53_BIT_45_69_XOR_INV_temp_B_45_29_PLUS__ETC___d849 =
	     { x__h25259 ^ y__h25260,
	       x__h25067 ^ y__h25068,
	       temp_A_53_BIT_43_77_XOR_INV_temp_B_45_29_PLUS__ETC___d848 } ;
  assign temp_A_53_BIT_45_69_XOR_temp_B_45_BIT_45_70_72_ETC___d522 =
	     { x__h14872 ^ y__h14575,
	       x__h14680 ^ y__h14383,
	       temp_A_53_BIT_43_77_XOR_temp_B_45_BIT_43_78_80_ETC___d521 } ;
  assign temp_A_53_BIT_47_61_XOR_INV_temp_B_45_29_PLUS__ETC___d850 =
	     { x__h25643 ^ y__h25644,
	       x__h25451 ^ y__h25452,
	       temp_A_53_BIT_45_69_XOR_INV_temp_B_45_29_PLUS__ETC___d849 } ;
  assign temp_A_53_BIT_47_61_XOR_temp_B_45_BIT_47_62_64_ETC___d523 =
	     { x__h15256 ^ y__h14959,
	       x__h15064 ^ y__h14767,
	       temp_A_53_BIT_45_69_XOR_temp_B_45_BIT_45_70_72_ETC___d522 } ;
  assign temp_A_53_BIT_5_29_XOR_INV_temp_B_45_29_PLUS_1_ETC___d829 =
	     { x__h17579 ^ y__h17580,
	       x__h17387 ^ y__h17388,
	       temp_A_53_BIT_3_37_XOR_INV_temp_B_45_29_PLUS_1_ETC___d828 } ;
  assign temp_A_53_BIT_5_29_XOR_temp_B_45_BIT_5_30_32_X_ETC___d502 =
	     { x__h7192 ^ y__h6895,
	       x__h7000 ^ y__h6703,
	       temp_A_53_BIT_3_37_XOR_temp_B_45_BIT_3_38_40_X_ETC___d501 } ;
  assign temp_A_53_BIT_7_21_XOR_INV_temp_B_45_29_PLUS_1_ETC___d830 =
	     { x__h17963 ^ y__h17964,
	       x__h17771 ^ y__h17772,
	       temp_A_53_BIT_5_29_XOR_INV_temp_B_45_29_PLUS_1_ETC___d829 } ;
  assign temp_A_53_BIT_7_21_XOR_temp_B_45_BIT_7_22_24_X_ETC___d503 =
	     { x__h7576 ^ y__h7279,
	       x__h7384 ^ y__h7087,
	       temp_A_53_BIT_5_29_XOR_temp_B_45_BIT_5_30_32_X_ETC___d502 } ;
  assign temp_A_53_BIT_9_13_XOR_INV_temp_B_45_29_PLUS_1_ETC___d831 =
	     { x__h18347 ^ y__h18348,
	       x__h18155 ^ y__h18156,
	       temp_A_53_BIT_7_21_XOR_INV_temp_B_45_29_PLUS_1_ETC___d830 } ;
  assign temp_A_53_BIT_9_13_XOR_temp_B_45_BIT_9_14_16_X_ETC___d504 =
	     { x__h7960 ^ y__h7663,
	       x__h7768 ^ y__h7471,
	       temp_A_53_BIT_7_21_XOR_temp_B_45_BIT_7_22_24_X_ETC___d503 } ;
  assign temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228 =
	     temp_sum[24] ^ temp_sum[23] ;
  assign temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227 =
	     temp_sum[25] ^ y__h51220 ;
  assign temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226 =
	     temp_sum[26] ^ y__h51406 ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103 =
	     temp_sum[27] ^ y__h56499 ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225 =
	     temp_sum[27] ^ y__h51592 ;
  assign temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1244 =
	     { temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226,
	       temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227,
	       temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228,
	       IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5[0] } ;
  assign temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052 =
	     temp_sum[28] ^ y__h29723 ;
  assign temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102 =
	     temp_sum[28] ^ y__h56685 ;
  assign temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224 =
	     temp_sum[28] ^ y__h51778 ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051 =
	     temp_sum[29] ^ y__h29909 ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101 =
	     temp_sum[29] ^ y__h56871 ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1120 =
	     { temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4[0] } ;
  assign temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223 =
	     temp_sum[29] ^ y__h51964 ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050 =
	     temp_sum[30] ^ y__h30095 ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1069 =
	     { temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100 =
	     temp_sum[30] ^ y__h57057 ;
  assign temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222 =
	     temp_sum[30] ^ y__h52150 ;
  assign temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049 =
	     temp_sum[31] ^ y__h30281 ;
  assign temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099 =
	     temp_sum[31] ^ y__h57243 ;
  assign temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221 =
	     temp_sum[31] ^ y__h52336 ;
  assign temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048 =
	     temp_sum[32] ^ y__h30467 ;
  assign temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098 =
	     temp_sum[32] ^ y__h57429 ;
  assign temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220 =
	     temp_sum[32] ^ y__h52522 ;
  assign temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047 =
	     temp_sum[33] ^ y__h30653 ;
  assign temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097 =
	     temp_sum[33] ^ y__h57615 ;
  assign temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219 =
	     temp_sum[33] ^ y__h52708 ;
  assign temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046 =
	     temp_sum[34] ^ y__h30839 ;
  assign temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096 =
	     temp_sum[34] ^ y__h57801 ;
  assign temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218 =
	     temp_sum[34] ^ y__h52894 ;
  assign temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045 =
	     temp_sum[35] ^ y__h31025 ;
  assign temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095 =
	     temp_sum[35] ^ y__h57987 ;
  assign temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217 =
	     temp_sum[35] ^ y__h53080 ;
  assign temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044 =
	     temp_sum[36] ^ y__h31211 ;
  assign temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094 =
	     temp_sum[36] ^ y__h58173 ;
  assign temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216 =
	     temp_sum[36] ^ y__h53266 ;
  assign temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043 =
	     temp_sum[37] ^ y__h31397 ;
  assign temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093 =
	     temp_sum[37] ^ y__h58359 ;
  assign temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215 =
	     temp_sum[37] ^ y__h53452 ;
  assign temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042 =
	     temp_sum[38] ^ y__h31583 ;
  assign temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092 =
	     temp_sum[38] ^ y__h58545 ;
  assign temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214 =
	     temp_sum[38] ^ y__h53638 ;
  assign temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041 =
	     temp_sum[39] ^ y__h31769 ;
  assign temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091 =
	     temp_sum[39] ^ y__h58731 ;
  assign temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213 =
	     temp_sum[39] ^ y__h53824 ;
  assign temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040 =
	     temp_sum[40] ^ y__h31955 ;
  assign temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090 =
	     temp_sum[40] ^ y__h58917 ;
  assign temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212 =
	     temp_sum[40] ^ y__h54010 ;
  assign temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039 =
	     temp_sum[41] ^ y__h32141 ;
  assign temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089 =
	     temp_sum[41] ^ y__h59103 ;
  assign temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211 =
	     temp_sum[41] ^ y__h54196 ;
  assign temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038 =
	     temp_sum[42] ^ y__h32327 ;
  assign temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088 =
	     temp_sum[42] ^ y__h59289 ;
  assign temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210 =
	     temp_sum[42] ^ y__h54382 ;
  assign temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037 =
	     temp_sum[43] ^ y__h32513 ;
  assign temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087 =
	     temp_sum[43] ^ y__h59475 ;
  assign temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209 =
	     temp_sum[43] ^ y__h54568 ;
  assign temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036 =
	     temp_sum[44] ^ y__h32699 ;
  assign temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086 =
	     temp_sum[44] ^ y__h59661 ;
  assign temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208 =
	     temp_sum[44] ^ y__h54754 ;
  assign temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035 =
	     temp_sum[45] ^ y__h32885 ;
  assign temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085 =
	     temp_sum[45] ^ y__h59847 ;
  assign temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207 =
	     temp_sum[45] ^ y__h54940 ;
  assign temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034 =
	     temp_sum[46] ^ y__h33071 ;
  assign temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084 =
	     temp_sum[46] ^ y__h60033 ;
  assign temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033 =
	     temp_sum[47] ^ y__h33257 ;
  assign temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083 =
	     temp_sum[47] ^ y__h60219 ;
  assign temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1173 =
	     temp_sum[47] ^ y__h55312 ;
  assign temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032 =
	     temp_sum[48] ^ y__h33443 ;
  assign temp_sum_59_BIT_49_05_AND_temp_sum_59_BIT_48_6_ETC___d974 =
	     temp_sum[49] & y__h33629 ;
  assign temp_sum_59_BIT_49_05_XOR_temp_sum_59_BIT_48_6_ETC___d1026 =
	     temp_sum[49] ^ y__h60591 ;
  assign x__h10025 = temp_A[20] & temp_B[20] ;
  assign x__h10072 = temp_A[20] ^ temp_B[20] ;
  assign x__h10217 = temp_A[21] & temp_B[21] ;
  assign x__h10264 = temp_A[21] ^ temp_B[21] ;
  assign x__h10409 = temp_A[22] & temp_B[22] ;
  assign x__h10456 = temp_A[22] ^ temp_B[22] ;
  assign x__h10601 = temp_A[23] & temp_B[23] ;
  assign x__h10648 = temp_A[23] ^ temp_B[23] ;
  assign x__h10793 = temp_A[24] & temp_B[24] ;
  assign x__h10840 = temp_A[24] ^ temp_B[24] ;
  assign x__h10985 = temp_A[25] & temp_B[25] ;
  assign x__h11032 = temp_A[25] ^ temp_B[25] ;
  assign x__h11177 = temp_A[26] & temp_B[26] ;
  assign x__h11224 = temp_A[26] ^ temp_B[26] ;
  assign x__h11369 = temp_A[27] & temp_B[27] ;
  assign x__h11416 = temp_A[27] ^ temp_B[27] ;
  assign x__h11561 = temp_A[28] & temp_B[28] ;
  assign x__h11608 = temp_A[28] ^ temp_B[28] ;
  assign x__h11753 = temp_A[29] & temp_B[29] ;
  assign x__h11800 = temp_A[29] ^ temp_B[29] ;
  assign x__h11945 = temp_A[30] & temp_B[30] ;
  assign x__h11992 = temp_A[30] ^ temp_B[30] ;
  assign x__h12137 = temp_A[31] & temp_B[31] ;
  assign x__h12184 = temp_A[31] ^ temp_B[31] ;
  assign x__h12329 = temp_A[32] & temp_B[32] ;
  assign x__h12376 = temp_A[32] ^ temp_B[32] ;
  assign x__h12521 = temp_A[33] & temp_B[33] ;
  assign x__h12568 = temp_A[33] ^ temp_B[33] ;
  assign x__h12713 = temp_A[34] & temp_B[34] ;
  assign x__h12760 = temp_A[34] ^ temp_B[34] ;
  assign x__h12905 = temp_A[35] & temp_B[35] ;
  assign x__h12952 = temp_A[35] ^ temp_B[35] ;
  assign x__h13097 = temp_A[36] & temp_B[36] ;
  assign x__h13144 = temp_A[36] ^ temp_B[36] ;
  assign x__h13289 = temp_A[37] & temp_B[37] ;
  assign x__h13336 = temp_A[37] ^ temp_B[37] ;
  assign x__h13481 = temp_A[38] & temp_B[38] ;
  assign x__h13528 = temp_A[38] ^ temp_B[38] ;
  assign x__h13673 = temp_A[39] & temp_B[39] ;
  assign x__h13720 = temp_A[39] ^ temp_B[39] ;
  assign x__h13865 = temp_A[40] & temp_B[40] ;
  assign x__h13912 = temp_A[40] ^ temp_B[40] ;
  assign x__h14057 = temp_A[41] & temp_B[41] ;
  assign x__h14104 = temp_A[41] ^ temp_B[41] ;
  assign x__h14249 = temp_A[42] & temp_B[42] ;
  assign x__h14296 = temp_A[42] ^ temp_B[42] ;
  assign x__h14441 = temp_A[43] & temp_B[43] ;
  assign x__h14488 = temp_A[43] ^ temp_B[43] ;
  assign x__h14633 = temp_A[44] & temp_B[44] ;
  assign x__h14680 = temp_A[44] ^ temp_B[44] ;
  assign x__h14825 = temp_A[45] & temp_B[45] ;
  assign x__h14872 = temp_A[45] ^ temp_B[45] ;
  assign x__h15017 = temp_A[46] & temp_B[46] ;
  assign x__h15064 = temp_A[46] ^ temp_B[46] ;
  assign x__h15209 = temp_A[47] & temp_B[47] ;
  assign x__h15256 = temp_A[47] ^ temp_B[47] ;
  assign x__h15342 = temp_A[49] ^ temp_B[49] ;
  assign x__h15401 = temp_A[48] & temp_B[48] ;
  assign x__h15448 = temp_A[48] ^ temp_B[48] ;
  assign x__h16874 = temp_A[1] ^ INV_temp_B_45_29_PLUS_1___d530[1] ;
  assign x__h17003 = temp_A[2] ^ INV_temp_B_45_29_PLUS_1___d530[2] ;
  assign x__h17062 = temp_A[1] & INV_temp_B_45_29_PLUS_1___d530[1] ;
  assign x__h17195 = temp_A[3] ^ INV_temp_B_45_29_PLUS_1___d530[3] ;
  assign x__h17254 = temp_A[2] & INV_temp_B_45_29_PLUS_1___d530[2] ;
  assign x__h17387 = temp_A[4] ^ INV_temp_B_45_29_PLUS_1___d530[4] ;
  assign x__h17446 = temp_A[3] & INV_temp_B_45_29_PLUS_1___d530[3] ;
  assign x__h17579 = temp_A[5] ^ INV_temp_B_45_29_PLUS_1___d530[5] ;
  assign x__h17638 = temp_A[4] & INV_temp_B_45_29_PLUS_1___d530[4] ;
  assign x__h17771 = temp_A[6] ^ INV_temp_B_45_29_PLUS_1___d530[6] ;
  assign x__h17830 = temp_A[5] & INV_temp_B_45_29_PLUS_1___d530[5] ;
  assign x__h17963 = temp_A[7] ^ INV_temp_B_45_29_PLUS_1___d530[7] ;
  assign x__h18022 = temp_A[6] & INV_temp_B_45_29_PLUS_1___d530[6] ;
  assign x__h18155 = temp_A[8] ^ INV_temp_B_45_29_PLUS_1___d530[8] ;
  assign x__h18214 = temp_A[7] & INV_temp_B_45_29_PLUS_1___d530[7] ;
  assign x__h18347 = temp_A[9] ^ INV_temp_B_45_29_PLUS_1___d530[9] ;
  assign x__h18406 = temp_A[8] & INV_temp_B_45_29_PLUS_1___d530[8] ;
  assign x__h18539 = temp_A[10] ^ INV_temp_B_45_29_PLUS_1___d530[10] ;
  assign x__h18598 = temp_A[9] & INV_temp_B_45_29_PLUS_1___d530[9] ;
  assign x__h18731 = temp_A[11] ^ INV_temp_B_45_29_PLUS_1___d530[11] ;
  assign x__h18790 = temp_A[10] & INV_temp_B_45_29_PLUS_1___d530[10] ;
  assign x__h18923 = temp_A[12] ^ INV_temp_B_45_29_PLUS_1___d530[12] ;
  assign x__h18982 = temp_A[11] & INV_temp_B_45_29_PLUS_1___d530[11] ;
  assign x__h19115 = temp_A[13] ^ INV_temp_B_45_29_PLUS_1___d530[13] ;
  assign x__h19174 = temp_A[12] & INV_temp_B_45_29_PLUS_1___d530[12] ;
  assign x__h19307 = temp_A[14] ^ INV_temp_B_45_29_PLUS_1___d530[14] ;
  assign x__h19366 = temp_A[13] & INV_temp_B_45_29_PLUS_1___d530[13] ;
  assign x__h19499 = temp_A[15] ^ INV_temp_B_45_29_PLUS_1___d530[15] ;
  assign x__h19558 = temp_A[14] & INV_temp_B_45_29_PLUS_1___d530[14] ;
  assign x__h19691 = temp_A[16] ^ INV_temp_B_45_29_PLUS_1___d530[16] ;
  assign x__h19750 = temp_A[15] & INV_temp_B_45_29_PLUS_1___d530[15] ;
  assign x__h19883 = temp_A[17] ^ INV_temp_B_45_29_PLUS_1___d530[17] ;
  assign x__h19942 = temp_A[16] & INV_temp_B_45_29_PLUS_1___d530[16] ;
  assign x__h20075 = temp_A[18] ^ INV_temp_B_45_29_PLUS_1___d530[18] ;
  assign x__h20134 = temp_A[17] & INV_temp_B_45_29_PLUS_1___d530[17] ;
  assign x__h20267 = temp_A[19] ^ INV_temp_B_45_29_PLUS_1___d530[19] ;
  assign x__h20326 = temp_A[18] & INV_temp_B_45_29_PLUS_1___d530[18] ;
  assign x__h20459 = temp_A[20] ^ INV_temp_B_45_29_PLUS_1___d530[20] ;
  assign x__h20518 = temp_A[19] & INV_temp_B_45_29_PLUS_1___d530[19] ;
  assign x__h20651 = temp_A[21] ^ INV_temp_B_45_29_PLUS_1___d530[21] ;
  assign x__h20710 = temp_A[20] & INV_temp_B_45_29_PLUS_1___d530[20] ;
  assign x__h20843 = temp_A[22] ^ INV_temp_B_45_29_PLUS_1___d530[22] ;
  assign x__h20902 = temp_A[21] & INV_temp_B_45_29_PLUS_1___d530[21] ;
  assign x__h21035 = temp_A[23] ^ INV_temp_B_45_29_PLUS_1___d530[23] ;
  assign x__h21094 = temp_A[22] & INV_temp_B_45_29_PLUS_1___d530[22] ;
  assign x__h21227 = temp_A[24] ^ INV_temp_B_45_29_PLUS_1___d530[24] ;
  assign x__h21286 = temp_A[23] & INV_temp_B_45_29_PLUS_1___d530[23] ;
  assign x__h21419 = temp_A[25] ^ INV_temp_B_45_29_PLUS_1___d530[25] ;
  assign x__h21478 = temp_A[24] & INV_temp_B_45_29_PLUS_1___d530[24] ;
  assign x__h21611 = temp_A[26] ^ INV_temp_B_45_29_PLUS_1___d530[26] ;
  assign x__h21670 = temp_A[25] & INV_temp_B_45_29_PLUS_1___d530[25] ;
  assign x__h21803 = temp_A[27] ^ INV_temp_B_45_29_PLUS_1___d530[27] ;
  assign x__h21862 = temp_A[26] & INV_temp_B_45_29_PLUS_1___d530[26] ;
  assign x__h21995 = temp_A[28] ^ INV_temp_B_45_29_PLUS_1___d530[28] ;
  assign x__h22054 = temp_A[27] & INV_temp_B_45_29_PLUS_1___d530[27] ;
  assign x__h22187 = temp_A[29] ^ INV_temp_B_45_29_PLUS_1___d530[29] ;
  assign x__h22246 = temp_A[28] & INV_temp_B_45_29_PLUS_1___d530[28] ;
  assign x__h22379 = temp_A[30] ^ INV_temp_B_45_29_PLUS_1___d530[30] ;
  assign x__h22438 = temp_A[29] & INV_temp_B_45_29_PLUS_1___d530[29] ;
  assign x__h22571 = temp_A[31] ^ INV_temp_B_45_29_PLUS_1___d530[31] ;
  assign x__h22630 = temp_A[30] & INV_temp_B_45_29_PLUS_1___d530[30] ;
  assign x__h22763 = temp_A[32] ^ INV_temp_B_45_29_PLUS_1___d530[32] ;
  assign x__h22822 = temp_A[31] & INV_temp_B_45_29_PLUS_1___d530[31] ;
  assign x__h22955 = temp_A[33] ^ INV_temp_B_45_29_PLUS_1___d530[33] ;
  assign x__h23014 = temp_A[32] & INV_temp_B_45_29_PLUS_1___d530[32] ;
  assign x__h23147 = temp_A[34] ^ INV_temp_B_45_29_PLUS_1___d530[34] ;
  assign x__h23206 = temp_A[33] & INV_temp_B_45_29_PLUS_1___d530[33] ;
  assign x__h23339 = temp_A[35] ^ INV_temp_B_45_29_PLUS_1___d530[35] ;
  assign x__h23398 = temp_A[34] & INV_temp_B_45_29_PLUS_1___d530[34] ;
  assign x__h23531 = temp_A[36] ^ INV_temp_B_45_29_PLUS_1___d530[36] ;
  assign x__h23590 = temp_A[35] & INV_temp_B_45_29_PLUS_1___d530[35] ;
  assign x__h23723 = temp_A[37] ^ INV_temp_B_45_29_PLUS_1___d530[37] ;
  assign x__h23782 = temp_A[36] & INV_temp_B_45_29_PLUS_1___d530[36] ;
  assign x__h23915 = temp_A[38] ^ INV_temp_B_45_29_PLUS_1___d530[38] ;
  assign x__h23974 = temp_A[37] & INV_temp_B_45_29_PLUS_1___d530[37] ;
  assign x__h24107 = temp_A[39] ^ INV_temp_B_45_29_PLUS_1___d530[39] ;
  assign x__h24166 = temp_A[38] & INV_temp_B_45_29_PLUS_1___d530[38] ;
  assign x__h24299 = temp_A[40] ^ INV_temp_B_45_29_PLUS_1___d530[40] ;
  assign x__h24358 = temp_A[39] & INV_temp_B_45_29_PLUS_1___d530[39] ;
  assign x__h24491 = temp_A[41] ^ INV_temp_B_45_29_PLUS_1___d530[41] ;
  assign x__h24550 = temp_A[40] & INV_temp_B_45_29_PLUS_1___d530[40] ;
  assign x__h24683 = temp_A[42] ^ INV_temp_B_45_29_PLUS_1___d530[42] ;
  assign x__h24742 = temp_A[41] & INV_temp_B_45_29_PLUS_1___d530[41] ;
  assign x__h24875 = temp_A[43] ^ INV_temp_B_45_29_PLUS_1___d530[43] ;
  assign x__h24934 = temp_A[42] & INV_temp_B_45_29_PLUS_1___d530[42] ;
  assign x__h25067 = temp_A[44] ^ INV_temp_B_45_29_PLUS_1___d530[44] ;
  assign x__h25126 = temp_A[43] & INV_temp_B_45_29_PLUS_1___d530[43] ;
  assign x__h25259 = temp_A[45] ^ INV_temp_B_45_29_PLUS_1___d530[45] ;
  assign x__h25318 = temp_A[44] & INV_temp_B_45_29_PLUS_1___d530[44] ;
  assign x__h25451 = temp_A[46] ^ INV_temp_B_45_29_PLUS_1___d530[46] ;
  assign x__h25510 = temp_A[45] & INV_temp_B_45_29_PLUS_1___d530[45] ;
  assign x__h25643 = temp_A[47] ^ INV_temp_B_45_29_PLUS_1___d530[47] ;
  assign x__h25702 = temp_A[46] & INV_temp_B_45_29_PLUS_1___d530[46] ;
  assign x__h25835 = temp_A[48] ^ INV_temp_B_45_29_PLUS_1___d530[48] ;
  assign x__h25894 = temp_A[47] & INV_temp_B_45_29_PLUS_1___d530[47] ;
  assign x__h26027 = temp_A[49] ^ INV_temp_B_45_29_PLUS_1___d530[49] ;
  assign x__h26086 = temp_A[48] & INV_temp_B_45_29_PLUS_1___d530[48] ;
  assign x__h26632 = ~fp_a[24] ;
  assign x__h26759 = ~fp_a[25] ;
  assign x__h26947 = ~fp_a[26] ;
  assign x__h27135 = ~fp_a[27] ;
  assign x__h27323 = ~fp_a[28] ;
  assign x__h27511 = ~fp_a[29] ;
  assign x__h27699 = ~fp_a[30] ;
  assign x__h3349 = fp_a[24] ^ y__h3352 ;
  assign x__h33997 =
	     { temp_sum[49] ^ y__h33629,
	       temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032,
	       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1050,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1051,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1052,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_10___d1053 } ;
  assign x__h34020 =
	     { temp_sum_59_BIT_48_60_XOR_temp_sum_59_BIT_47_3_ETC___d1032,
	       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1033,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1034,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1035,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1036,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1037,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1038,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1039,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1040,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1041,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1042,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1043,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1044,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1045,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1046,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1047,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1048,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1049,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1069 } ;
  assign x__h3476 = fp_a[25] ^ y__h3479 ;
  assign x__h3533 = fp_a[24] & y__h3352 ;
  assign x__h3662 = fp_a[26] ^ y__h3665 ;
  assign x__h3719 = fp_a[25] & y__h3479 ;
  assign x__h3848 = fp_a[27] ^ y__h3851 ;
  assign x__h3905 = fp_a[26] & y__h3665 ;
  assign x__h39345 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h39348 :
	       _theResult___snd_fst__h42347 ;
  assign x__h4034 = fp_a[28] ^ y__h4037 ;
  assign x__h4091 = fp_a[27] & y__h3851 ;
  assign x__h41112 = fp_a[24] ^ fp_a[23] ;
  assign x__h41238 = fp_a[25] ^ y__h39742 ;
  assign x__h41424 = fp_a[26] ^ y__h39928 ;
  assign x__h41610 = fp_a[27] ^ y__h40114 ;
  assign x__h41796 = fp_a[28] ^ y__h40300 ;
  assign x__h41982 = fp_a[29] ^ y__h40486 ;
  assign x__h4220 = fp_a[29] ^ y__h4223 ;
  assign x__h4277 = fp_a[28] & y__h4037 ;
  assign x__h4406 = fp_a[30] ^ y__h4409 ;
  assign x__h4463 = fp_a[29] & y__h4223 ;
  assign x__h55494 =
	     { temp_sum[46] ^ y__h55126,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1225,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_0_ETC___d1226,
	       temp_sum_59_BIT_25_06_XOR_temp_sum_59_BIT_24_9_ETC___d1227,
	       temp_sum_59_BIT_24_97_XOR_temp_sum_59_BIT_23_143___d1228 } ;
  assign x__h55517 =
	     { temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1207,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1208,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1209,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1210,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1211,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1212,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1213,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1214,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1215,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1216,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1217,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1218,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1219,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1220,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1221,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1222,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1223,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1224,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1244 } ;
  assign x__h60773 =
	     { temp_sum[48] ^ y__h60405,
	       temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1101,
	       temp_sum_59_BIT_28_50_XOR_temp_sum_59_BIT_27_5_ETC___d1102,
	       temp_sum_59_BIT_27_51_XOR_temp_sum_59_BIT_26_1_ETC___d1103,
	       temp_sum_59_BIT_26_10_XOR_temp_sum_59_BIT_25_06___d1104 } ;
  assign x__h60796 =
	     { temp_sum_59_BIT_47_31_XOR_temp_sum_59_BIT_46_3_ETC___d1083,
	       temp_sum_59_BIT_46_32_XOR_temp_sum_59_BIT_45_3_ETC___d1084,
	       temp_sum_59_BIT_45_33_XOR_temp_sum_59_BIT_44_3_ETC___d1085,
	       temp_sum_59_BIT_44_34_XOR_temp_sum_59_BIT_43_3_ETC___d1086,
	       temp_sum_59_BIT_43_35_XOR_temp_sum_59_BIT_42_3_ETC___d1087,
	       temp_sum_59_BIT_42_36_XOR_temp_sum_59_BIT_41_3_ETC___d1088,
	       temp_sum_59_BIT_41_37_XOR_temp_sum_59_BIT_40_3_ETC___d1089,
	       temp_sum_59_BIT_40_38_XOR_temp_sum_59_BIT_39_3_ETC___d1090,
	       temp_sum_59_BIT_39_39_XOR_temp_sum_59_BIT_38_4_ETC___d1091,
	       temp_sum_59_BIT_38_40_XOR_temp_sum_59_BIT_37_4_ETC___d1092,
	       temp_sum_59_BIT_37_41_XOR_temp_sum_59_BIT_36_4_ETC___d1093,
	       temp_sum_59_BIT_36_42_XOR_temp_sum_59_BIT_35_4_ETC___d1094,
	       temp_sum_59_BIT_35_43_XOR_temp_sum_59_BIT_34_4_ETC___d1095,
	       temp_sum_59_BIT_34_44_XOR_temp_sum_59_BIT_33_4_ETC___d1096,
	       temp_sum_59_BIT_33_45_XOR_temp_sum_59_BIT_32_4_ETC___d1097,
	       temp_sum_59_BIT_32_46_XOR_temp_sum_59_BIT_31_4_ETC___d1098,
	       temp_sum_59_BIT_31_47_XOR_temp_sum_59_BIT_30_4_ETC___d1099,
	       temp_sum_59_BIT_30_48_XOR_temp_sum_59_BIT_29_4_ETC___d1100,
	       temp_sum_59_BIT_29_49_XOR_temp_sum_59_BIT_28_5_ETC___d1120 } ;
  assign x__h60842 =
	     temp_sum[48] ?
	       _theResult___snd_fst__h42347 :
	       _theResult___snd_fst__h60845 ;
  assign x__h6377 = temp_A[1] & temp_B[1] ;
  assign x__h6424 = temp_A[1] ^ temp_B[1] ;
  assign x__h6569 = temp_A[2] & temp_B[2] ;
  assign x__h6616 = temp_A[2] ^ temp_B[2] ;
  assign x__h6761 = temp_A[3] & temp_B[3] ;
  assign x__h6808 = temp_A[3] ^ temp_B[3] ;
  assign x__h6953 = temp_A[4] & temp_B[4] ;
  assign x__h7000 = temp_A[4] ^ temp_B[4] ;
  assign x__h7145 = temp_A[5] & temp_B[5] ;
  assign x__h7192 = temp_A[5] ^ temp_B[5] ;
  assign x__h7337 = temp_A[6] & temp_B[6] ;
  assign x__h7384 = temp_A[6] ^ temp_B[6] ;
  assign x__h7529 = temp_A[7] & temp_B[7] ;
  assign x__h7576 = temp_A[7] ^ temp_B[7] ;
  assign x__h7721 = temp_A[8] & temp_B[8] ;
  assign x__h7768 = temp_A[8] ^ temp_B[8] ;
  assign x__h7913 = temp_A[9] & temp_B[9] ;
  assign x__h7960 = temp_A[9] ^ temp_B[9] ;
  assign x__h8105 = temp_A[10] & temp_B[10] ;
  assign x__h8152 = temp_A[10] ^ temp_B[10] ;
  assign x__h8297 = temp_A[11] & temp_B[11] ;
  assign x__h8344 = temp_A[11] ^ temp_B[11] ;
  assign x__h8489 = temp_A[12] & temp_B[12] ;
  assign x__h8536 = temp_A[12] ^ temp_B[12] ;
  assign x__h8681 = temp_A[13] & temp_B[13] ;
  assign x__h8728 = temp_A[13] ^ temp_B[13] ;
  assign x__h8873 = temp_A[14] & temp_B[14] ;
  assign x__h8920 = temp_A[14] ^ temp_B[14] ;
  assign x__h9065 = temp_A[15] & temp_B[15] ;
  assign x__h9112 = temp_A[15] ^ temp_B[15] ;
  assign x__h9257 = temp_A[16] & temp_B[16] ;
  assign x__h9304 = temp_A[16] ^ temp_B[16] ;
  assign x__h9449 = temp_A[17] & temp_B[17] ;
  assign x__h9496 = temp_A[17] ^ temp_B[17] ;
  assign x__h9641 = temp_A[18] & temp_B[18] ;
  assign x__h9688 = temp_A[18] ^ temp_B[18] ;
  assign x__h9833 = temp_A[19] & temp_B[19] ;
  assign x__h9880 = temp_A[19] ^ temp_B[19] ;
  assign x_exponent__h26367 =
	     { x__h27699 ^ y__h27700,
	       x__h27511 ^ y__h27512,
	       INV_fp_a_3_BIT_28_8_64_XOR_fp_a_3_BIT_27_2_OR__ETC___d893 } ;
  assign x_exponent__h69713 = fp_a[30:23] | fp_b[30:23] ;
  assign x_fraction__h69714 = fp_a[22:0] | fp_b[22:0] ;
  assign x_sign__h69712 = fp_a[31] | fp_b[31] ;
  assign y__h10026 = x__h10072 & y__h9775 ;
  assign y__h10159 = x__h10217 | y__h10218 ;
  assign y__h10218 = x__h10264 & y__h9967 ;
  assign y__h10351 = x__h10409 | y__h10410 ;
  assign y__h10410 = x__h10456 & y__h10159 ;
  assign y__h10543 = x__h10601 | y__h10602 ;
  assign y__h10602 = x__h10648 & y__h10351 ;
  assign y__h10735 = x__h10793 | y__h10794 ;
  assign y__h10794 = x__h10840 & y__h10543 ;
  assign y__h10927 = x__h10985 | y__h10986 ;
  assign y__h10986 = x__h11032 & y__h10735 ;
  assign y__h11119 = x__h11177 | y__h11178 ;
  assign y__h11178 = x__h11224 & y__h10927 ;
  assign y__h11311 = x__h11369 | y__h11370 ;
  assign y__h11370 = x__h11416 & y__h11119 ;
  assign y__h11503 = x__h11561 | y__h11562 ;
  assign y__h11562 = x__h11608 & y__h11311 ;
  assign y__h11695 = x__h11753 | y__h11754 ;
  assign y__h11754 = x__h11800 & y__h11503 ;
  assign y__h11887 = x__h11945 | y__h11946 ;
  assign y__h11946 = x__h11992 & y__h11695 ;
  assign y__h12079 = x__h12137 | y__h12138 ;
  assign y__h12138 = x__h12184 & y__h11887 ;
  assign y__h12271 = x__h12329 | y__h12330 ;
  assign y__h12330 = x__h12376 & y__h12079 ;
  assign y__h12463 = x__h12521 | y__h12522 ;
  assign y__h12522 = x__h12568 & y__h12271 ;
  assign y__h12655 = x__h12713 | y__h12714 ;
  assign y__h12714 = x__h12760 & y__h12463 ;
  assign y__h12847 = x__h12905 | y__h12906 ;
  assign y__h12906 = x__h12952 & y__h12655 ;
  assign y__h13039 = x__h13097 | y__h13098 ;
  assign y__h13098 = x__h13144 & y__h12847 ;
  assign y__h13231 = x__h13289 | y__h13290 ;
  assign y__h13290 = x__h13336 & y__h13039 ;
  assign y__h13423 = x__h13481 | y__h13482 ;
  assign y__h13482 = x__h13528 & y__h13231 ;
  assign y__h13615 = x__h13673 | y__h13674 ;
  assign y__h13674 = x__h13720 & y__h13423 ;
  assign y__h13807 = x__h13865 | y__h13866 ;
  assign y__h13866 = x__h13912 & y__h13615 ;
  assign y__h13999 = x__h14057 | y__h14058 ;
  assign y__h14058 = x__h14104 & y__h13807 ;
  assign y__h14191 = x__h14249 | y__h14250 ;
  assign y__h14250 = x__h14296 & y__h13999 ;
  assign y__h14383 = x__h14441 | y__h14442 ;
  assign y__h14442 = x__h14488 & y__h14191 ;
  assign y__h14575 = x__h14633 | y__h14634 ;
  assign y__h14634 = x__h14680 & y__h14383 ;
  assign y__h14767 = x__h14825 | y__h14826 ;
  assign y__h14826 = x__h14872 & y__h14575 ;
  assign y__h14959 = x__h15017 | y__h15018 ;
  assign y__h15018 = x__h15064 & y__h14767 ;
  assign y__h15151 = x__h15209 | y__h15210 ;
  assign y__h15210 = x__h15256 & y__h14959 ;
  assign y__h15343 = x__h15401 | y__h15402 ;
  assign y__h15402 = x__h15448 & y__h15151 ;
  assign y__h16875 = temp_A[0] & INV_temp_B_45_29_PLUS_1___d530[0] ;
  assign y__h17004 = x__h17062 | y__h17063 ;
  assign y__h17063 = x__h16874 & y__h16875 ;
  assign y__h17196 = x__h17254 | y__h17255 ;
  assign y__h17255 = x__h17003 & y__h17004 ;
  assign y__h17388 = x__h17446 | y__h17447 ;
  assign y__h17447 = x__h17195 & y__h17196 ;
  assign y__h17580 = x__h17638 | y__h17639 ;
  assign y__h17639 = x__h17387 & y__h17388 ;
  assign y__h17772 = x__h17830 | y__h17831 ;
  assign y__h17831 = x__h17579 & y__h17580 ;
  assign y__h17964 = x__h18022 | y__h18023 ;
  assign y__h18023 = x__h17771 & y__h17772 ;
  assign y__h18156 = x__h18214 | y__h18215 ;
  assign y__h18215 = x__h17963 & y__h17964 ;
  assign y__h18348 = x__h18406 | y__h18407 ;
  assign y__h18407 = x__h18155 & y__h18156 ;
  assign y__h18540 = x__h18598 | y__h18599 ;
  assign y__h18599 = x__h18347 & y__h18348 ;
  assign y__h18732 = x__h18790 | y__h18791 ;
  assign y__h18791 = x__h18539 & y__h18540 ;
  assign y__h18924 = x__h18982 | y__h18983 ;
  assign y__h18983 = x__h18731 & y__h18732 ;
  assign y__h19116 = x__h19174 | y__h19175 ;
  assign y__h19175 = x__h18923 & y__h18924 ;
  assign y__h19308 = x__h19366 | y__h19367 ;
  assign y__h19367 = x__h19115 & y__h19116 ;
  assign y__h19500 = x__h19558 | y__h19559 ;
  assign y__h19559 = x__h19307 & y__h19308 ;
  assign y__h19692 = x__h19750 | y__h19751 ;
  assign y__h19751 = x__h19499 & y__h19500 ;
  assign y__h19884 = x__h19942 | y__h19943 ;
  assign y__h19943 = x__h19691 & y__h19692 ;
  assign y__h20076 = x__h20134 | y__h20135 ;
  assign y__h20135 = x__h19883 & y__h19884 ;
  assign y__h20268 = x__h20326 | y__h20327 ;
  assign y__h20327 = x__h20075 & y__h20076 ;
  assign y__h20460 = x__h20518 | y__h20519 ;
  assign y__h20519 = x__h20267 & y__h20268 ;
  assign y__h20652 = x__h20710 | y__h20711 ;
  assign y__h20711 = x__h20459 & y__h20460 ;
  assign y__h20844 = x__h20902 | y__h20903 ;
  assign y__h20903 = x__h20651 & y__h20652 ;
  assign y__h21036 = x__h21094 | y__h21095 ;
  assign y__h21095 = x__h20843 & y__h20844 ;
  assign y__h21228 = x__h21286 | y__h21287 ;
  assign y__h21287 = x__h21035 & y__h21036 ;
  assign y__h21420 = x__h21478 | y__h21479 ;
  assign y__h21479 = x__h21227 & y__h21228 ;
  assign y__h21612 = x__h21670 | y__h21671 ;
  assign y__h21671 = x__h21419 & y__h21420 ;
  assign y__h21804 = x__h21862 | y__h21863 ;
  assign y__h21863 = x__h21611 & y__h21612 ;
  assign y__h2192 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h21996 = x__h22054 | y__h22055 ;
  assign y__h22055 = x__h21803 & y__h21804 ;
  assign y__h22188 = x__h22246 | y__h22247 ;
  assign y__h22247 = x__h21995 & y__h21996 ;
  assign y__h22380 = x__h22438 | y__h22439 ;
  assign y__h22439 = x__h22187 & y__h22188 ;
  assign y__h22572 = x__h22630 | y__h22631 ;
  assign y__h22631 = x__h22379 & y__h22380 ;
  assign y__h22764 = x__h22822 | y__h22823 ;
  assign y__h22823 = x__h22571 & y__h22572 ;
  assign y__h22956 = x__h23014 | y__h23015 ;
  assign y__h23015 = x__h22763 & y__h22764 ;
  assign y__h23148 = x__h23206 | y__h23207 ;
  assign y__h23207 = x__h22955 & y__h22956 ;
  assign y__h23340 = x__h23398 | y__h23399 ;
  assign y__h23399 = x__h23147 & y__h23148 ;
  assign y__h23532 = x__h23590 | y__h23591 ;
  assign y__h23591 = x__h23339 & y__h23340 ;
  assign y__h23724 = x__h23782 | y__h23783 ;
  assign y__h23783 = x__h23531 & y__h23532 ;
  assign y__h2381 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h2192 ;
  assign y__h23916 = x__h23974 | y__h23975 ;
  assign y__h23975 = x__h23723 & y__h23724 ;
  assign y__h24108 = x__h24166 | y__h24167 ;
  assign y__h24167 = x__h23915 & y__h23916 ;
  assign y__h24300 = x__h24358 | y__h24359 ;
  assign y__h24359 = x__h24107 & y__h24108 ;
  assign y__h24492 = x__h24550 | y__h24551 ;
  assign y__h24551 = x__h24299 & y__h24300 ;
  assign y__h24684 = x__h24742 | y__h24743 ;
  assign y__h24743 = x__h24491 & y__h24492 ;
  assign y__h24876 = x__h24934 | y__h24935 ;
  assign y__h24935 = x__h24683 & y__h24684 ;
  assign y__h25068 = x__h25126 | y__h25127 ;
  assign y__h25127 = x__h24875 & y__h24876 ;
  assign y__h25260 = x__h25318 | y__h25319 ;
  assign y__h25319 = x__h25067 & y__h25068 ;
  assign y__h25452 = x__h25510 | y__h25511 ;
  assign y__h25511 = x__h25259 & y__h25260 ;
  assign y__h25644 = x__h25702 | y__h25703 ;
  assign y__h2570 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h2381 ;
  assign y__h25703 = x__h25451 & y__h25452 ;
  assign y__h25836 = x__h25894 | y__h25895 ;
  assign y__h25895 = x__h25643 & y__h25644 ;
  assign y__h26028 = x__h26086 | y__h26087 ;
  assign y__h26087 = x__h25835 & y__h25836 ;
  assign y__h26760 = fp_a[24] | y__h26818 ;
  assign y__h26818 = x__h26632 & fp_a[23] ;
  assign y__h26948 = fp_a[25] | y__h27006 ;
  assign y__h27006 = x__h26759 & y__h26760 ;
  assign y__h27136 = fp_a[26] | y__h27194 ;
  assign y__h27194 = x__h26947 & y__h26948 ;
  assign y__h27324 = fp_a[27] | y__h27382 ;
  assign y__h27382 = x__h27135 & y__h27136 ;
  assign y__h27512 = fp_a[28] | y__h27570 ;
  assign y__h27570 = x__h27323 & y__h27324 ;
  assign y__h2759 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h2570 ;
  assign y__h27700 = fp_a[29] | y__h27758 ;
  assign y__h27758 = x__h27511 & y__h27512 ;
  assign y__h2948 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h2759 ;
  assign y__h29723 = temp_sum[27] & temp_sum[26] ;
  assign y__h29909 = temp_sum[28] & y__h29723 ;
  assign y__h30095 = temp_sum[29] & y__h29909 ;
  assign y__h30281 = temp_sum[30] & y__h30095 ;
  assign y__h30467 = temp_sum[31] & y__h30281 ;
  assign y__h30653 = temp_sum[32] & y__h30467 ;
  assign y__h30839 = temp_sum[33] & y__h30653 ;
  assign y__h31025 = temp_sum[34] & y__h30839 ;
  assign y__h31211 = temp_sum[35] & y__h31025 ;
  assign y__h3137 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h2948 ;
  assign y__h31397 = temp_sum[36] & y__h31211 ;
  assign y__h31583 = temp_sum[37] & y__h31397 ;
  assign y__h31769 = temp_sum[38] & y__h31583 ;
  assign y__h31955 = temp_sum[39] & y__h31769 ;
  assign y__h32141 = temp_sum[40] & y__h31955 ;
  assign y__h32327 = temp_sum[41] & y__h32141 ;
  assign y__h32513 = temp_sum[42] & y__h32327 ;
  assign y__h32699 = temp_sum[43] & y__h32513 ;
  assign y__h32885 = temp_sum[44] & y__h32699 ;
  assign y__h33071 = temp_sum[45] & y__h32885 ;
  assign y__h33257 = temp_sum[46] & y__h33071 ;
  assign y__h33443 = temp_sum[47] & y__h33257 ;
  assign y__h3350 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h3352 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h33629 = temp_sum[48] & y__h33443 ;
  assign y__h3477 = x__h3533 | y__h3534 ;
  assign y__h3479 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h2192 ;
  assign y__h3534 = x__h3349 & y__h3350 ;
  assign y__h3663 = x__h3719 | y__h3720 ;
  assign y__h3665 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h2381 ;
  assign y__h3720 = x__h3476 & y__h3477 ;
  assign y__h3849 = x__h3905 | y__h3906 ;
  assign y__h3851 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h2570 ;
  assign y__h3906 = x__h3662 & y__h3663 ;
  assign y__h39742 = fp_a[24] & fp_a[23] ;
  assign y__h39928 = fp_a[25] & y__h39742 ;
  assign y__h40114 = fp_a[26] & y__h39928 ;
  assign y__h40300 = fp_a[27] & y__h40114 ;
  assign y__h4035 = x__h4091 | y__h4092 ;
  assign y__h4037 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h2759 ;
  assign y__h40486 = fp_a[28] & y__h40300 ;
  assign y__h40672 = fp_a[29] & y__h40486 ;
  assign y__h4092 = x__h3848 & y__h3849 ;
  assign y__h41239 = x__h41112 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h41425 = x__h41238 & y__h41239 ;
  assign y__h41611 = x__h41424 & y__h41425 ;
  assign y__h41797 = x__h41610 & y__h41611 ;
  assign y__h41983 = x__h41796 & y__h41797 ;
  assign y__h42169 = x__h41982 & y__h41983 ;
  assign y__h4221 = x__h4277 | y__h4278 ;
  assign y__h4223 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h2948 ;
  assign y__h4278 = x__h4034 & y__h4035 ;
  assign y__h4407 = x__h4463 | y__h4464 ;
  assign y__h4409 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h3137 ;
  assign y__h4464 = x__h4220 & y__h4221 ;
  assign y__h51220 = temp_sum[24] & temp_sum[23] ;
  assign y__h51406 = temp_sum[25] & y__h51220 ;
  assign y__h51592 = temp_sum[26] & y__h51406 ;
  assign y__h51778 = temp_sum[27] & y__h51592 ;
  assign y__h51964 = temp_sum[28] & y__h51778 ;
  assign y__h52150 = temp_sum[29] & y__h51964 ;
  assign y__h52336 = temp_sum[30] & y__h52150 ;
  assign y__h52522 = temp_sum[31] & y__h52336 ;
  assign y__h52708 = temp_sum[32] & y__h52522 ;
  assign y__h52894 = temp_sum[33] & y__h52708 ;
  assign y__h53080 = temp_sum[34] & y__h52894 ;
  assign y__h53266 = temp_sum[35] & y__h53080 ;
  assign y__h53452 = temp_sum[36] & y__h53266 ;
  assign y__h53638 = temp_sum[37] & y__h53452 ;
  assign y__h53824 = temp_sum[38] & y__h53638 ;
  assign y__h54010 = temp_sum[39] & y__h53824 ;
  assign y__h54196 = temp_sum[40] & y__h54010 ;
  assign y__h54382 = temp_sum[41] & y__h54196 ;
  assign y__h54568 = temp_sum[42] & y__h54382 ;
  assign y__h54754 = temp_sum[43] & y__h54568 ;
  assign y__h54940 = temp_sum[44] & y__h54754 ;
  assign y__h55126 = temp_sum[45] & y__h54940 ;
  assign y__h55312 = temp_sum[46] & y__h55126 ;
  assign y__h56499 = temp_sum[26] & temp_sum[25] ;
  assign y__h56685 = temp_sum[27] & y__h56499 ;
  assign y__h56871 = temp_sum[28] & y__h56685 ;
  assign y__h57057 = temp_sum[29] & y__h56871 ;
  assign y__h57243 = temp_sum[30] & y__h57057 ;
  assign y__h57429 = temp_sum[31] & y__h57243 ;
  assign y__h57615 = temp_sum[32] & y__h57429 ;
  assign y__h57801 = temp_sum[33] & y__h57615 ;
  assign y__h57987 = temp_sum[34] & y__h57801 ;
  assign y__h58173 = temp_sum[35] & y__h57987 ;
  assign y__h58359 = temp_sum[36] & y__h58173 ;
  assign y__h58545 = temp_sum[37] & y__h58359 ;
  assign y__h58731 = temp_sum[38] & y__h58545 ;
  assign y__h58917 = temp_sum[39] & y__h58731 ;
  assign y__h59103 = temp_sum[40] & y__h58917 ;
  assign y__h59289 = temp_sum[41] & y__h59103 ;
  assign y__h59475 = temp_sum[42] & y__h59289 ;
  assign y__h59661 = temp_sum[43] & y__h59475 ;
  assign y__h59847 = temp_sum[44] & y__h59661 ;
  assign y__h60033 = temp_sum[45] & y__h59847 ;
  assign y__h60219 = temp_sum[46] & y__h60033 ;
  assign y__h60405 = temp_sum[47] & y__h60219 ;
  assign y__h60591 = temp_sum[48] & y__h60405 ;
  assign y__h61246 = exp___1__h50257[1] & exp___1__h50257[0] ;
  assign y__h61435 = exp___1__h50257[2] & y__h61246 ;
  assign y__h61624 = exp___1__h50257[3] & y__h61435 ;
  assign y__h61813 = exp___1__h50257[4] & y__h61624 ;
  assign y__h62002 = exp___1__h50257[5] & y__h61813 ;
  assign y__h62191 = exp___1__h50257[6] & y__h62002 ;
  assign y__h6319 = x__h6377 | y__h6378 ;
  assign y__h6378 = x__h6424 & y__h6425 ;
  assign y__h6425 = temp_A[0] & temp_B[0] ;
  assign y__h6511 = x__h6569 | y__h6570 ;
  assign y__h6570 = x__h6616 & y__h6319 ;
  assign y__h6703 = x__h6761 | y__h6762 ;
  assign y__h6762 = x__h6808 & y__h6511 ;
  assign y__h6895 = x__h6953 | y__h6954 ;
  assign y__h6954 = x__h7000 & y__h6703 ;
  assign y__h7087 = x__h7145 | y__h7146 ;
  assign y__h7146 = x__h7192 & y__h6895 ;
  assign y__h7279 = x__h7337 | y__h7338 ;
  assign y__h7338 = x__h7384 & y__h7087 ;
  assign y__h7471 = x__h7529 | y__h7530 ;
  assign y__h7530 = x__h7576 & y__h7279 ;
  assign y__h7663 = x__h7721 | y__h7722 ;
  assign y__h7722 = x__h7768 & y__h7471 ;
  assign y__h7855 = x__h7913 | y__h7914 ;
  assign y__h7914 = x__h7960 & y__h7663 ;
  assign y__h8047 = x__h8105 | y__h8106 ;
  assign y__h8106 = x__h8152 & y__h7855 ;
  assign y__h8239 = x__h8297 | y__h8298 ;
  assign y__h8298 = x__h8344 & y__h8047 ;
  assign y__h8431 = x__h8489 | y__h8490 ;
  assign y__h8490 = x__h8536 & y__h8239 ;
  assign y__h8623 = x__h8681 | y__h8682 ;
  assign y__h8682 = x__h8728 & y__h8431 ;
  assign y__h8815 = x__h8873 | y__h8874 ;
  assign y__h8874 = x__h8920 & y__h8623 ;
  assign y__h9007 = x__h9065 | y__h9066 ;
  assign y__h9066 = x__h9112 & y__h8815 ;
  assign y__h9199 = x__h9257 | y__h9258 ;
  assign y__h9258 = x__h9304 & y__h9007 ;
  assign y__h9391 = x__h9449 | y__h9450 ;
  assign y__h9450 = x__h9496 & y__h9199 ;
  assign y__h9583 = x__h9641 | y__h9642 ;
  assign y__h9642 = x__h9688 & y__h9391 ;
  assign y__h9775 = x__h9833 | y__h9834 ;
  assign y__h9834 = x__h9880 & y__h9583 ;
  assign y__h9967 = x__h10025 | y__h10026 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	adj_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adj_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_add <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_oneinpzero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	handle_zero <= `BSV_ASSIGNMENT_DELAY 1'd0;
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (adj_done_EN) adj_done <= `BSV_ASSIGNMENT_DELAY adj_done_D_IN;
	if (adj_sub_EN) adj_sub <= `BSV_ASSIGNMENT_DELAY adj_sub_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (do_add_EN) do_add <= `BSV_ASSIGNMENT_DELAY do_add_D_IN;
	if (do_sub_EN) do_sub <= `BSV_ASSIGNMENT_DELAY do_sub_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (handle_oneinpzero_EN)
	  handle_oneinpzero <= `BSV_ASSIGNMENT_DELAY handle_oneinpzero_D_IN;
	if (handle_zero_EN)
	  handle_zero <= `BSV_ASSIGNMENT_DELAY handle_zero_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    adj_done = 1'h0;
    adj_sub = 1'h0;
    assembled_answer = 1'h0;
    do_add = 1'h0;
    do_sub = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    handle_oneinpzero = 1'h0;
    handle_zero = 1'h0;
    operands_swapped_if_needed = 1'h0;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

