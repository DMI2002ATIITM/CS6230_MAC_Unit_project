//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sat Oct 26 18:57:09 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_get_A                      O     1
// RDY_get_B                      O     1
// out_AaddB                      O    32 reg
// RDY_out_AaddB                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_A_a                        I    16
// get_B_b                        I    32
// EN_get_A                       I     1
// EN_get_B                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkfp32_add(CLK,
		  RST_N,

		  get_A_a,
		  EN_get_A,
		  RDY_get_A,

		  get_B_b,
		  EN_get_B,
		  RDY_get_B,

		  out_AaddB,
		  RDY_out_AaddB);
  input  CLK;
  input  RST_N;

  // action method get_A
  input  [15 : 0] get_A_a;
  input  EN_get_A;
  output RDY_get_A;

  // action method get_B
  input  [31 : 0] get_B_b;
  input  EN_get_B;
  output RDY_get_B;

  // value method out_AaddB
  output [31 : 0] out_AaddB;
  output RDY_out_AaddB;

  // signals for module outputs
  wire [31 : 0] out_AaddB;
  wire RDY_get_A, RDY_get_B, RDY_out_AaddB;

  // register add_done
  reg add_done;
  wire add_done_D_IN, add_done_EN;

  // register add_prep_done
  reg add_prep_done;
  wire add_prep_done_D_IN, add_prep_done_EN;

  // register add_res_with_adj_exp
  reg [30 : 0] add_res_with_adj_exp;
  reg [30 : 0] add_res_with_adj_exp_D_IN;
  wire add_res_with_adj_exp_EN;

  // register adj_done
  reg adj_done;
  wire adj_done_D_IN, adj_done_EN;

  // register adj_sub
  reg adj_sub;
  wire adj_sub_D_IN, adj_sub_EN;

  // register assembled_answer
  reg assembled_answer;
  wire assembled_answer_D_IN, assembled_answer_EN;

  // register do_add
  reg do_add;
  reg do_add_D_IN;
  wire do_add_EN;

  // register do_sub
  reg do_sub;
  reg do_sub_D_IN;
  wire do_sub_EN;

  // register expdiff
  reg [7 : 0] expdiff;
  wire [7 : 0] expdiff_D_IN;
  wire expdiff_EN;

  // register expdiff_calculated
  reg expdiff_calculated;
  wire expdiff_calculated_D_IN, expdiff_calculated_EN;

  // register fp_a
  reg [31 : 0] fp_a;
  reg [31 : 0] fp_a_D_IN;
  wire fp_a_EN;

  // register fp_b
  reg [31 : 0] fp_b;
  wire [31 : 0] fp_b_D_IN;
  wire fp_b_EN;

  // register fp_c
  reg [31 : 0] fp_c;
  wire [31 : 0] fp_c_D_IN;
  wire fp_c_EN;

  // register got_A
  reg got_A;
  wire got_A_D_IN, got_A_EN;

  // register got_B
  reg got_B;
  wire got_B_D_IN, got_B_EN;

  // register operands_swapped_if_needed
  reg operands_swapped_if_needed;
  wire operands_swapped_if_needed_D_IN, operands_swapped_if_needed_EN;

  // register round_addition_result
  reg round_addition_result;
  wire round_addition_result_D_IN, round_addition_result_EN;

  // register round_done
  reg round_done;
  wire round_done_D_IN, round_done_EN;

  // register round_subtraction_result
  reg round_subtraction_result;
  wire round_subtraction_result_D_IN, round_subtraction_result_EN;

  // register sign_c
  reg sign_c;
  wire sign_c_D_IN, sign_c_EN;

  // register temp_A
  reg [49 : 0] temp_A;
  wire [49 : 0] temp_A_D_IN;
  wire temp_A_EN;

  // register temp_B
  reg [49 : 0] temp_B;
  wire [49 : 0] temp_B_D_IN;
  wire temp_B_EN;

  // register temp_sum
  reg [49 : 0] temp_sum;
  reg [49 : 0] temp_sum_D_IN;
  wire temp_sum_EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_add,
       CAN_FIRE_RL_add_prep,
       CAN_FIRE_RL_adjust_subres,
       CAN_FIRE_RL_assemble_answer,
       CAN_FIRE_RL_calculate_expdiff,
       CAN_FIRE_RL_deassert_assembled_answer,
       CAN_FIRE_RL_round_add,
       CAN_FIRE_RL_round_sub,
       CAN_FIRE_RL_sub,
       CAN_FIRE_RL_swap_operands_if_needed,
       CAN_FIRE_get_A,
       CAN_FIRE_get_B,
       WILL_FIRE_RL_add,
       WILL_FIRE_RL_add_prep,
       WILL_FIRE_RL_adjust_subres,
       WILL_FIRE_RL_assemble_answer,
       WILL_FIRE_RL_calculate_expdiff,
       WILL_FIRE_RL_deassert_assembled_answer,
       WILL_FIRE_RL_round_add,
       WILL_FIRE_RL_round_sub,
       WILL_FIRE_RL_sub,
       WILL_FIRE_RL_swap_operands_if_needed,
       WILL_FIRE_get_A,
       WILL_FIRE_get_B;

  // inputs to muxes for submodule ports
  wire [49 : 0] MUX_temp_B_write_1__VAL_1,
		MUX_temp_B_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_2,
		MUX_temp_sum_write_1__VAL_3,
		MUX_temp_sum_write_1__VAL_4;
  wire [31 : 0] MUX_fp_a_write_1__VAL_2, MUX_fp_a_write_1__VAL_3;
  wire [30 : 0] MUX_add_res_with_adj_exp_write_1__VAL_2,
		MUX_add_res_with_adj_exp_write_1__VAL_3;
  wire MUX_do_add_write_1__SEL_2,
       MUX_do_sub_write_1__SEL_2,
       MUX_fp_a_write_1__SEL_1,
       MUX_fp_a_write_1__SEL_2,
       MUX_temp_B_write_1__SEL_1,
       MUX_temp_B_write_1__SEL_2;

  // remaining internal signals
  wire [49 : 0] IF_temp_A_BIT_0_XOR_INV_temp_B_02_85_PLUS_1_86_ETC__q11,
		IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10,
		INV_temp_B_02_85_PLUS_1___d486;
  wire [47 : 0] temp_A_11_BIT_47_19_XOR_INV_temp_B_02_85_PLUS__ETC___d806,
		temp_A_11_BIT_47_19_XOR_temp_B_02_BIT_47_20_22_ETC___d481;
  wire [45 : 0] temp_A_11_BIT_45_27_XOR_INV_temp_B_02_85_PLUS__ETC___d805,
		temp_A_11_BIT_45_27_XOR_temp_B_02_BIT_45_28_30_ETC___d480;
  wire [43 : 0] temp_A_11_BIT_43_35_XOR_INV_temp_B_02_85_PLUS__ETC___d804,
		temp_A_11_BIT_43_35_XOR_temp_B_02_BIT_43_36_38_ETC___d479;
  wire [41 : 0] temp_A_11_BIT_41_43_XOR_INV_temp_B_02_85_PLUS__ETC___d803,
		temp_A_11_BIT_41_43_XOR_temp_B_02_BIT_41_44_46_ETC___d478;
  wire [39 : 0] temp_A_11_BIT_39_51_XOR_INV_temp_B_02_85_PLUS__ETC___d802,
		temp_A_11_BIT_39_51_XOR_temp_B_02_BIT_39_52_54_ETC___d477;
  wire [37 : 0] temp_A_11_BIT_37_59_XOR_INV_temp_B_02_85_PLUS__ETC___d801,
		temp_A_11_BIT_37_59_XOR_temp_B_02_BIT_37_60_62_ETC___d476;
  wire [35 : 0] temp_A_11_BIT_35_67_XOR_INV_temp_B_02_85_PLUS__ETC___d800,
		temp_A_11_BIT_35_67_XOR_temp_B_02_BIT_35_68_70_ETC___d475;
  wire [33 : 0] temp_A_11_BIT_33_75_XOR_INV_temp_B_02_85_PLUS__ETC___d799,
		temp_A_11_BIT_33_75_XOR_temp_B_02_BIT_33_76_78_ETC___d474;
  wire [31 : 0] temp_A_11_BIT_31_83_XOR_INV_temp_B_02_85_PLUS__ETC___d798,
		temp_A_11_BIT_31_83_XOR_temp_B_02_BIT_31_84_86_ETC___d473;
  wire [30 : 0] IF_IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_s_ETC__q12,
		IF_IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_s_ETC__q13;
  wire [29 : 0] temp_A_11_BIT_29_91_XOR_INV_temp_B_02_85_PLUS__ETC___d797,
		temp_A_11_BIT_29_91_XOR_temp_B_02_BIT_29_92_94_ETC___d472;
  wire [27 : 0] temp_A_11_BIT_27_99_XOR_INV_temp_B_02_85_PLUS__ETC___d796,
		temp_A_11_BIT_27_99_XOR_temp_B_02_BIT_27_00_02_ETC___d471;
  wire [25 : 0] temp_A_11_BIT_25_07_XOR_INV_temp_B_02_85_PLUS__ETC___d795,
		temp_A_11_BIT_25_07_XOR_temp_B_02_BIT_25_08_10_ETC___d470;
  wire [24 : 0] IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5,
		IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4,
		IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6;
  wire [23 : 0] temp_A_11_BIT_23_15_XOR_INV_temp_B_02_85_PLUS__ETC___d794,
		temp_A_11_BIT_23_15_XOR_temp_B_02_BIT_23_16_18_ETC___d469;
  wire [22 : 0] IF_NOT_temp_sum_13_BIT_23_093_094_OR_temp_sum__ETC___d1205,
		IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083,
		IF_NOT_temp_sum_13_BIT_25_58_59_OR_temp_sum_13_ETC___d1032,
		IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206,
		IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084,
		x__h33457,
		x__h33480,
		x__h54940,
		x__h54963,
		x__h60219,
		x__h60242;
  wire [21 : 0] temp_A_11_BIT_21_23_XOR_INV_temp_B_02_85_PLUS__ETC___d793,
		temp_A_11_BIT_21_23_XOR_temp_B_02_BIT_21_24_26_ETC___d468;
  wire [19 : 0] temp_A_11_BIT_19_31_XOR_INV_temp_B_02_85_PLUS__ETC___d792,
		temp_A_11_BIT_19_31_XOR_temp_B_02_BIT_19_32_34_ETC___d467;
  wire [17 : 0] temp_A_11_BIT_17_39_XOR_INV_temp_B_02_85_PLUS__ETC___d791,
		temp_A_11_BIT_17_39_XOR_temp_B_02_BIT_17_40_42_ETC___d466;
  wire [15 : 0] temp_A_11_BIT_15_47_XOR_INV_temp_B_02_85_PLUS__ETC___d790,
		temp_A_11_BIT_15_47_XOR_temp_B_02_BIT_15_48_50_ETC___d465;
  wire [13 : 0] temp_A_11_BIT_13_55_XOR_INV_temp_B_02_85_PLUS__ETC___d789,
		temp_A_11_BIT_13_55_XOR_temp_B_02_BIT_13_56_58_ETC___d464;
  wire [11 : 0] temp_A_11_BIT_11_63_XOR_INV_temp_B_02_85_PLUS__ETC___d788,
		temp_A_11_BIT_11_63_XOR_temp_B_02_BIT_11_64_66_ETC___d463;
  wire [9 : 0] temp_A_11_BIT_9_71_XOR_INV_temp_B_02_85_PLUS_1_ETC___d787,
	       temp_A_11_BIT_9_71_XOR_temp_B_02_BIT_9_72_74_X_ETC___d462;
  wire [7 : 0] IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8,
	       IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2,
	       IF_INV_exp___19703_BIT_0_THEN_1_ELSE_0__q7,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9,
	       INV_fp_b_BITS_30_TO_23__q1,
	       _theResult___snd__h38733,
	       _theResult___snd__h54937,
	       _theResult___snd_fst__h38808,
	       _theResult___snd_fst__h41807,
	       _theResult___snd_fst__h41815,
	       _theResult___snd_fst__h60291,
	       _theResult___snd_fst__h60299,
	       exp___1__h49703,
	       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d946,
	       temp_A_11_BIT_7_79_XOR_INV_temp_B_02_85_PLUS_1_ETC___d786,
	       temp_A_11_BIT_7_79_XOR_temp_B_02_BIT_7_80_82_X_ETC___d461,
	       x__h38805,
	       x__h60288,
	       x_exponent__h25841;
  wire [5 : 0] INV_fp_a_BIT_28_6_18_XOR_fp_a_BIT_27_0_OR_INV__ETC___d847,
	       fp_a_BITS_30_TO_23_MINUS_0b1_099_BIT_5_126_XOR_ETC___d1150,
	       fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d945,
	       temp_A_11_BIT_5_87_XOR_INV_temp_B_02_85_PLUS_1_ETC___d785,
	       temp_A_11_BIT_5_87_XOR_temp_B_02_BIT_5_88_90_X_ETC___d460;
  wire [4 : 0] temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1194,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1072,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1021;
  wire [3 : 0] INV_fp_a_BIT_26_4_20_XOR_fp_a_BIT_25_8_OR_INV__ETC___d846,
	       fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d944,
	       temp_A_11_BIT_3_95_XOR_INV_temp_B_02_85_PLUS_1_ETC___d784,
	       temp_A_11_BIT_3_95_XOR_temp_B_02_BIT_3_96_98_X_ETC___d459;
  wire [1 : 0] fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93,
	       temp_A_11_BIT_1_03_XOR_INV_temp_B_02_85_PLUS_1_ETC___d783,
	       temp_A_11_BIT_1_03_XOR_temp_B_02_BIT_1_04_06_X_ETC___d458;
  wire fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17,
       fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872,
       fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106,
       got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97,
       temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178,
       temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177,
       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056,
       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176,
       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005,
       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055,
       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175,
       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004,
       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054,
       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174,
       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003,
       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053,
       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173,
       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002,
       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052,
       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172,
       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001,
       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051,
       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171,
       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000,
       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050,
       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170,
       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049,
       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169,
       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999,
       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048,
       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168,
       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998,
       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047,
       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167,
       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997,
       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046,
       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166,
       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996,
       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045,
       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165,
       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995,
       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044,
       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164,
       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994,
       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043,
       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163,
       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993,
       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042,
       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162,
       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992,
       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041,
       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161,
       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991,
       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040,
       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160,
       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990,
       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039,
       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159,
       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989,
       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038,
       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158,
       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988,
       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037,
       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157,
       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987,
       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036,
       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986,
       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035,
       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123,
       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985,
       temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984,
       temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926,
       temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978,
       x__h10103,
       x__h10150,
       x__h10295,
       x__h10342,
       x__h10487,
       x__h10534,
       x__h10679,
       x__h10726,
       x__h10871,
       x__h10918,
       x__h11063,
       x__h11110,
       x__h11255,
       x__h11302,
       x__h11447,
       x__h11494,
       x__h11639,
       x__h11686,
       x__h11831,
       x__h11878,
       x__h12023,
       x__h12070,
       x__h12215,
       x__h12262,
       x__h12407,
       x__h12454,
       x__h12599,
       x__h12646,
       x__h12791,
       x__h12838,
       x__h12983,
       x__h13030,
       x__h13175,
       x__h13222,
       x__h13367,
       x__h13414,
       x__h13559,
       x__h13606,
       x__h13751,
       x__h13798,
       x__h13943,
       x__h13990,
       x__h14135,
       x__h14182,
       x__h14327,
       x__h14374,
       x__h14519,
       x__h14566,
       x__h14711,
       x__h14758,
       x__h14844,
       x__h14903,
       x__h14950,
       x__h16362,
       x__h16491,
       x__h16550,
       x__h16683,
       x__h16742,
       x__h16875,
       x__h16934,
       x__h17067,
       x__h17126,
       x__h17259,
       x__h17318,
       x__h17451,
       x__h17510,
       x__h17643,
       x__h17702,
       x__h17835,
       x__h17894,
       x__h18027,
       x__h18086,
       x__h18219,
       x__h18278,
       x__h18411,
       x__h18470,
       x__h18603,
       x__h18662,
       x__h18795,
       x__h18854,
       x__h18987,
       x__h19046,
       x__h19179,
       x__h19238,
       x__h19371,
       x__h19430,
       x__h19563,
       x__h19622,
       x__h19755,
       x__h19814,
       x__h19947,
       x__h20006,
       x__h20139,
       x__h20198,
       x__h20331,
       x__h20390,
       x__h20523,
       x__h20582,
       x__h20715,
       x__h20774,
       x__h20907,
       x__h20966,
       x__h21099,
       x__h21158,
       x__h21291,
       x__h21350,
       x__h21483,
       x__h21542,
       x__h21675,
       x__h21734,
       x__h21867,
       x__h21926,
       x__h22059,
       x__h22118,
       x__h22251,
       x__h22310,
       x__h22443,
       x__h22502,
       x__h22635,
       x__h22694,
       x__h22827,
       x__h22886,
       x__h23019,
       x__h23078,
       x__h23211,
       x__h23270,
       x__h23403,
       x__h23462,
       x__h23595,
       x__h23654,
       x__h23787,
       x__h23846,
       x__h23979,
       x__h24038,
       x__h24171,
       x__h24230,
       x__h24363,
       x__h24422,
       x__h24555,
       x__h24614,
       x__h24747,
       x__h24806,
       x__h24939,
       x__h24998,
       x__h25131,
       x__h25190,
       x__h25323,
       x__h25382,
       x__h25515,
       x__h25574,
       x__h26106,
       x__h26233,
       x__h26421,
       x__h26609,
       x__h26797,
       x__h26985,
       x__h27173,
       x__h2877,
       x__h3004,
       x__h3061,
       x__h3190,
       x__h3247,
       x__h3376,
       x__h3433,
       x__h3562,
       x__h3619,
       x__h3748,
       x__h3805,
       x__h3934,
       x__h3991,
       x__h40572,
       x__h40698,
       x__h40884,
       x__h41070,
       x__h41256,
       x__h41442,
       x__h5879,
       x__h5926,
       x__h6071,
       x__h6118,
       x__h6263,
       x__h6310,
       x__h6455,
       x__h6502,
       x__h6647,
       x__h6694,
       x__h6839,
       x__h6886,
       x__h7031,
       x__h7078,
       x__h7223,
       x__h7270,
       x__h7415,
       x__h7462,
       x__h7607,
       x__h7654,
       x__h7799,
       x__h7846,
       x__h7991,
       x__h8038,
       x__h8183,
       x__h8230,
       x__h8375,
       x__h8422,
       x__h8567,
       x__h8614,
       x__h8759,
       x__h8806,
       x__h8951,
       x__h8998,
       x__h9143,
       x__h9190,
       x__h9335,
       x__h9382,
       x__h9527,
       x__h9574,
       x__h9719,
       x__h9766,
       x__h9911,
       x__h9958,
       y__h10045,
       y__h10104,
       y__h10237,
       y__h10296,
       y__h10429,
       y__h10488,
       y__h10621,
       y__h10680,
       y__h10813,
       y__h10872,
       y__h11005,
       y__h11064,
       y__h11197,
       y__h11256,
       y__h11389,
       y__h11448,
       y__h11581,
       y__h11640,
       y__h11773,
       y__h11832,
       y__h11965,
       y__h12024,
       y__h12157,
       y__h12216,
       y__h12349,
       y__h12408,
       y__h12541,
       y__h12600,
       y__h12733,
       y__h12792,
       y__h12925,
       y__h12984,
       y__h13117,
       y__h13176,
       y__h13309,
       y__h13368,
       y__h13501,
       y__h13560,
       y__h13693,
       y__h13752,
       y__h13885,
       y__h13944,
       y__h14077,
       y__h14136,
       y__h14269,
       y__h14328,
       y__h14461,
       y__h14520,
       y__h14653,
       y__h14712,
       y__h14845,
       y__h14904,
       y__h16363,
       y__h16492,
       y__h16551,
       y__h16684,
       y__h16743,
       y__h16876,
       y__h16935,
       y__h17068,
       y__h17127,
       y__h1720,
       y__h17260,
       y__h17319,
       y__h17452,
       y__h17511,
       y__h17644,
       y__h17703,
       y__h17836,
       y__h17895,
       y__h18028,
       y__h18087,
       y__h18220,
       y__h18279,
       y__h18412,
       y__h18471,
       y__h18604,
       y__h18663,
       y__h18796,
       y__h18855,
       y__h18988,
       y__h19047,
       y__h1909,
       y__h19180,
       y__h19239,
       y__h19372,
       y__h19431,
       y__h19564,
       y__h19623,
       y__h19756,
       y__h19815,
       y__h19948,
       y__h20007,
       y__h20140,
       y__h20199,
       y__h20332,
       y__h20391,
       y__h20524,
       y__h20583,
       y__h20716,
       y__h20775,
       y__h20908,
       y__h20967,
       y__h2098,
       y__h21100,
       y__h21159,
       y__h21292,
       y__h21351,
       y__h21484,
       y__h21543,
       y__h21676,
       y__h21735,
       y__h21868,
       y__h21927,
       y__h22060,
       y__h22119,
       y__h22252,
       y__h22311,
       y__h22444,
       y__h22503,
       y__h22636,
       y__h22695,
       y__h22828,
       y__h2287,
       y__h22887,
       y__h23020,
       y__h23079,
       y__h23212,
       y__h23271,
       y__h23404,
       y__h23463,
       y__h23596,
       y__h23655,
       y__h23788,
       y__h23847,
       y__h23980,
       y__h24039,
       y__h24172,
       y__h24231,
       y__h24364,
       y__h24423,
       y__h24556,
       y__h24615,
       y__h24748,
       y__h2476,
       y__h24807,
       y__h24940,
       y__h24999,
       y__h25132,
       y__h25191,
       y__h25324,
       y__h25383,
       y__h25516,
       y__h25575,
       y__h26234,
       y__h26292,
       y__h26422,
       y__h26480,
       y__h26610,
       y__h2665,
       y__h26668,
       y__h26798,
       y__h26856,
       y__h26986,
       y__h27044,
       y__h27174,
       y__h27232,
       y__h2878,
       y__h2880,
       y__h29183,
       y__h29369,
       y__h29555,
       y__h29741,
       y__h29927,
       y__h3005,
       y__h3007,
       y__h30113,
       y__h30299,
       y__h30485,
       y__h3062,
       y__h30671,
       y__h30857,
       y__h31043,
       y__h31229,
       y__h31415,
       y__h31601,
       y__h31787,
       y__h3191,
       y__h3193,
       y__h31973,
       y__h32159,
       y__h32345,
       y__h3248,
       y__h32531,
       y__h32717,
       y__h32903,
       y__h33089,
       y__h3377,
       y__h3379,
       y__h3434,
       y__h3563,
       y__h3565,
       y__h3620,
       y__h3749,
       y__h3751,
       y__h3806,
       y__h39202,
       y__h3935,
       y__h3937,
       y__h39388,
       y__h39574,
       y__h39760,
       y__h3992,
       y__h39946,
       y__h40132,
       y__h40699,
       y__h40885,
       y__h41071,
       y__h41257,
       y__h41443,
       y__h41629,
       y__h50666,
       y__h50852,
       y__h51038,
       y__h51224,
       y__h51410,
       y__h51596,
       y__h51782,
       y__h51968,
       y__h52154,
       y__h52340,
       y__h52526,
       y__h52712,
       y__h52898,
       y__h53084,
       y__h53270,
       y__h53456,
       y__h53642,
       y__h53828,
       y__h54014,
       y__h54200,
       y__h54386,
       y__h54572,
       y__h54758,
       y__h55945,
       y__h56131,
       y__h56317,
       y__h56503,
       y__h56689,
       y__h56875,
       y__h57061,
       y__h57247,
       y__h57433,
       y__h57619,
       y__h57805,
       y__h57991,
       y__h58177,
       y__h5821,
       y__h58363,
       y__h58549,
       y__h58735,
       y__h5880,
       y__h58921,
       y__h59107,
       y__h5927,
       y__h59293,
       y__h59479,
       y__h59665,
       y__h59851,
       y__h60037,
       y__h6013,
       y__h60692,
       y__h6072,
       y__h60881,
       y__h61070,
       y__h61259,
       y__h61448,
       y__h61637,
       y__h6205,
       y__h6264,
       y__h6397,
       y__h6456,
       y__h6589,
       y__h6648,
       y__h6781,
       y__h6840,
       y__h6973,
       y__h7032,
       y__h7165,
       y__h7224,
       y__h7357,
       y__h7416,
       y__h7549,
       y__h7608,
       y__h7741,
       y__h7800,
       y__h7933,
       y__h7992,
       y__h8125,
       y__h8184,
       y__h8317,
       y__h8376,
       y__h8509,
       y__h8568,
       y__h8701,
       y__h8760,
       y__h8893,
       y__h8952,
       y__h9085,
       y__h9144,
       y__h9277,
       y__h9336,
       y__h9469,
       y__h9528,
       y__h9661,
       y__h9720,
       y__h9853,
       y__h9912;

  // action method get_A
  assign RDY_get_A = !got_A ;
  assign CAN_FIRE_get_A = !got_A ;
  assign WILL_FIRE_get_A = EN_get_A ;

  // action method get_B
  assign RDY_get_B = !got_B ;
  assign CAN_FIRE_get_B = !got_B ;
  assign WILL_FIRE_get_B = EN_get_B ;

  // value method out_AaddB
  assign out_AaddB = fp_c ;
  assign RDY_out_AaddB = assembled_answer ;

  // rule RL_swap_operands_if_needed
  assign CAN_FIRE_RL_swap_operands_if_needed =
	     got_A && got_B && !operands_swapped_if_needed ;
  assign WILL_FIRE_RL_swap_operands_if_needed =
	     CAN_FIRE_RL_swap_operands_if_needed ;

  // rule RL_calculate_expdiff
  assign CAN_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;
  assign WILL_FIRE_RL_calculate_expdiff = MUX_temp_B_write_1__SEL_2 ;

  // rule RL_round_add
  assign CAN_FIRE_RL_round_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_addition_result &&
	     !round_done ;
  assign WILL_FIRE_RL_round_add = CAN_FIRE_RL_round_add ;

  // rule RL_round_sub
  assign CAN_FIRE_RL_round_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_subtraction_result &&
	     !round_done ;
  assign WILL_FIRE_RL_round_sub =
	     CAN_FIRE_RL_round_sub && !WILL_FIRE_RL_round_add ;

  // rule RL_adjust_subres
  assign CAN_FIRE_RL_adjust_subres =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     adj_sub &&
	     !adj_done ;
  assign WILL_FIRE_RL_adjust_subres = CAN_FIRE_RL_adjust_subres ;

  // rule RL_add
  assign CAN_FIRE_RL_add =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     do_add ;
  assign WILL_FIRE_RL_add = CAN_FIRE_RL_add ;

  // rule RL_sub
  assign CAN_FIRE_RL_sub =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     add_prep_done &&
	     do_sub ;
  assign WILL_FIRE_RL_sub = CAN_FIRE_RL_sub ;

  // rule RL_assemble_answer
  assign CAN_FIRE_RL_assemble_answer =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     round_done &&
	     !assembled_answer ;
  assign WILL_FIRE_RL_assemble_answer = CAN_FIRE_RL_assemble_answer ;

  // rule RL_add_prep
  assign CAN_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;
  assign WILL_FIRE_RL_add_prep = MUX_temp_B_write_1__SEL_1 ;

  // rule RL_deassert_assembled_answer
  assign CAN_FIRE_RL_deassert_assembled_answer = assembled_answer ;
  assign WILL_FIRE_RL_deassert_assembled_answer = assembled_answer ;

  // inputs to muxes for submodule ports
  assign MUX_do_add_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ;
  assign MUX_do_sub_write_1__SEL_2 =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ;
  assign MUX_fp_a_write_1__SEL_1 =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ;
  assign MUX_fp_a_write_1__SEL_2 =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ;
  assign MUX_temp_B_write_1__SEL_1 =
	     got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 &&
	     !add_prep_done ;
  assign MUX_temp_B_write_1__SEL_2 =
	     got_A && got_B && operands_swapped_if_needed &&
	     !expdiff_calculated ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_2 =
	     { x__h60288,
	       IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206[22:1],
	       IF_IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_s_ETC__q12[0] } ;
  assign MUX_add_res_with_adj_exp_write_1__VAL_3 =
	     { x__h38805,
	       IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084[22:1],
	       IF_IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_s_ETC__q13[0] } ;
  assign MUX_fp_a_write_1__VAL_2 =
	     { fp_a[31], x_exponent__h25841, fp_a[22:0] } ;
  assign MUX_fp_a_write_1__VAL_3 = { get_A_a, 16'b0 } ;
  assign MUX_temp_B_write_1__VAL_1 = temp_B >> expdiff ;
  assign MUX_temp_B_write_1__VAL_2 = { 2'b01, fp_b[22:0], 25'b0 } ;
  assign MUX_temp_sum_write_1__VAL_2 =
	     { x__h25515 ^ y__h25516,
	       x__h25323 ^ y__h25324,
	       temp_A_11_BIT_47_19_XOR_INV_temp_B_02_85_PLUS__ETC___d806 } ;
  assign MUX_temp_sum_write_1__VAL_3 =
	     { x__h14844 ^ y__h14845,
	       x__h14950 ^ y__h14653,
	       temp_A_11_BIT_47_19_XOR_temp_B_02_BIT_47_20_22_ETC___d481 } ;
  assign MUX_temp_sum_write_1__VAL_4 = { temp_sum[48:0], 1'd0 } ;

  // register add_done
  assign add_done_D_IN = 1'd0 ;
  assign add_done_EN = assembled_answer ;

  // register add_prep_done
  assign add_prep_done_D_IN = !assembled_answer ;
  assign add_prep_done_EN = assembled_answer || WILL_FIRE_RL_add_prep ;

  // register add_res_with_adj_exp
  always@(assembled_answer or
	  WILL_FIRE_RL_round_sub or
	  MUX_add_res_with_adj_exp_write_1__VAL_2 or
	  WILL_FIRE_RL_round_add or MUX_add_res_with_adj_exp_write_1__VAL_3)
  case (1'b1)
    assembled_answer: add_res_with_adj_exp_D_IN = 31'd0;
    WILL_FIRE_RL_round_sub:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_2;
    WILL_FIRE_RL_round_add:
	add_res_with_adj_exp_D_IN = MUX_add_res_with_adj_exp_write_1__VAL_3;
    default: add_res_with_adj_exp_D_IN =
		 31'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign add_res_with_adj_exp_EN =
	     WILL_FIRE_RL_round_add || WILL_FIRE_RL_round_sub ||
	     assembled_answer ;

  // register adj_done
  assign adj_done_D_IN = !assembled_answer ;
  assign adj_done_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] || assembled_answer ;

  // register adj_sub
  assign adj_sub_D_IN = !assembled_answer ;
  assign adj_sub_EN = assembled_answer || WILL_FIRE_RL_sub ;

  // register assembled_answer
  assign assembled_answer_D_IN = !assembled_answer ;
  assign assembled_answer_EN =
	     assembled_answer || WILL_FIRE_RL_assemble_answer ;

  // register do_add
  always@(assembled_answer or MUX_do_add_write_1__SEL_2 or WILL_FIRE_RL_add)
  case (1'b1)
    assembled_answer: do_add_D_IN = 1'd0;
    MUX_do_add_write_1__SEL_2: do_add_D_IN = 1'd1;
    WILL_FIRE_RL_add: do_add_D_IN = 1'd0;
    default: do_add_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_add_EN =
	     WILL_FIRE_RL_add_prep &&
	     fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ||
	     assembled_answer ||
	     WILL_FIRE_RL_add ;

  // register do_sub
  always@(assembled_answer or MUX_do_sub_write_1__SEL_2 or WILL_FIRE_RL_sub)
  case (1'b1)
    assembled_answer: do_sub_D_IN = 1'd0;
    MUX_do_sub_write_1__SEL_2: do_sub_D_IN = 1'd1;
    WILL_FIRE_RL_sub: do_sub_D_IN = 1'd0;
    default: do_sub_D_IN = 1'bx /* unspecified value */ ;
  endcase
  assign do_sub_EN =
	     WILL_FIRE_RL_add_prep &&
	     !fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 ||
	     WILL_FIRE_RL_sub ||
	     assembled_answer ;

  // register expdiff
  assign expdiff_D_IN =
	     { x__h3934 ^ y__h3935,
	       x__h3748 ^ y__h3749,
	       fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 } ;
  assign expdiff_EN = MUX_temp_B_write_1__SEL_2 ;

  // register expdiff_calculated
  assign expdiff_calculated_D_IN = !assembled_answer ;
  assign expdiff_calculated_EN =
	     assembled_answer || WILL_FIRE_RL_calculate_expdiff ;

  // register fp_a
  always@(MUX_fp_a_write_1__SEL_1 or
	  fp_b or
	  MUX_fp_a_write_1__SEL_2 or
	  MUX_fp_a_write_1__VAL_2 or EN_get_A or MUX_fp_a_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fp_a_write_1__SEL_1: fp_a_D_IN = fp_b;
      MUX_fp_a_write_1__SEL_2: fp_a_D_IN = MUX_fp_a_write_1__VAL_2;
      EN_get_A: fp_a_D_IN = MUX_fp_a_write_1__VAL_3;
      default: fp_a_D_IN =
		   32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign fp_a_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     EN_get_A ;

  // register fp_b
  assign fp_b_D_IN = MUX_fp_a_write_1__SEL_1 ? fp_a : get_B_b ;
  assign fp_b_EN =
	     WILL_FIRE_RL_swap_operands_if_needed &&
	     fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 ||
	     EN_get_B ;

  // register fp_c
  assign fp_c_D_IN = { sign_c, add_res_with_adj_exp } ;
  assign fp_c_EN = CAN_FIRE_RL_assemble_answer ;

  // register got_A
  assign got_A_D_IN = !assembled_answer ;
  assign got_A_EN = assembled_answer || EN_get_A ;

  // register got_B
  assign got_B_D_IN = !assembled_answer ;
  assign got_B_EN = assembled_answer || EN_get_B ;

  // register operands_swapped_if_needed
  assign operands_swapped_if_needed_D_IN = !assembled_answer ;
  assign operands_swapped_if_needed_EN =
	     assembled_answer || WILL_FIRE_RL_swap_operands_if_needed ;

  // register round_addition_result
  assign round_addition_result_D_IN = !assembled_answer ;
  assign round_addition_result_EN = assembled_answer || WILL_FIRE_RL_add ;

  // register round_done
  assign round_done_D_IN = !assembled_answer ;
  assign round_done_EN =
	     assembled_answer || WILL_FIRE_RL_round_sub ||
	     WILL_FIRE_RL_round_add ;

  // register round_subtraction_result
  assign round_subtraction_result_D_IN = !assembled_answer ;
  assign round_subtraction_result_EN =
	     WILL_FIRE_RL_adjust_subres && temp_sum[48] || assembled_answer ;

  // register sign_c
  assign sign_c_D_IN = fp_a[31] ;
  assign sign_c_EN = MUX_temp_B_write_1__SEL_1 ;

  // register temp_A
  assign temp_A_D_IN = { 2'b01, fp_a[22:0], 25'b0 } ;
  assign temp_A_EN = MUX_temp_B_write_1__SEL_2 ;

  // register temp_B
  assign temp_B_D_IN =
	     WILL_FIRE_RL_add_prep ?
	       MUX_temp_B_write_1__VAL_1 :
	       MUX_temp_B_write_1__VAL_2 ;
  assign temp_B_EN = WILL_FIRE_RL_add_prep || WILL_FIRE_RL_calculate_expdiff ;

  // register temp_sum
  always@(assembled_answer or
	  WILL_FIRE_RL_sub or
	  MUX_temp_sum_write_1__VAL_2 or
	  WILL_FIRE_RL_add or
	  MUX_temp_sum_write_1__VAL_3 or
	  MUX_fp_a_write_1__SEL_2 or MUX_temp_sum_write_1__VAL_4)
  case (1'b1)
    assembled_answer: temp_sum_D_IN = 50'd0;
    WILL_FIRE_RL_sub: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_2;
    WILL_FIRE_RL_add: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_3;
    MUX_fp_a_write_1__SEL_2: temp_sum_D_IN = MUX_temp_sum_write_1__VAL_4;
    default: temp_sum_D_IN =
		 50'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign temp_sum_EN =
	     WILL_FIRE_RL_adjust_subres && !temp_sum[48] ||
	     WILL_FIRE_RL_add ||
	     WILL_FIRE_RL_sub ||
	     assembled_answer ;

  // remaining internal signals
  assign IF_IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_s_ETC__q12 =
	     IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_s_ETC__q13 =
	     IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084[0] ?
	       31'd1 :
	       31'd0 ;
  assign IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8 =
	     (~IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2 =
	     (~INV_fp_b_BITS_30_TO_23__q1[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_exp___19703_BIT_0_THEN_1_ELSE_0__q7 =
	     (~exp___1__h49703[0]) ? 8'd1 : 8'd0 ;
  assign IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3 = (~fp_a[23]) ? 8'd1 : 8'd0 ;
  assign IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5 =
	     (~temp_sum[23]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4 =
	     (~temp_sum[25]) ? 25'd1 : 25'd0 ;
  assign IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6 =
	     (~temp_sum[26]) ? 25'd1 : 25'd0 ;
  assign IF_NOT_temp_sum_13_BIT_23_093_094_OR_temp_sum__ETC___d1205 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       temp_sum[46:24] :
	       (temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123 ?
		  x__h54940 :
		  x__h54963) ;
  assign IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       temp_sum[47:25] :
	       (temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978 ?
		  x__h60219 :
		  x__h60242) ;
  assign IF_NOT_temp_sum_13_BIT_25_58_59_OR_temp_sum_13_ETC___d1032 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       temp_sum[48:26] :
	       (temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926 ?
		  x__h33457 :
		  x__h33480) ;
  assign IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9 =
	     (fp_a[23] ^
	      IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0]) ?
	       8'd1 :
	       8'd0 ;
  assign IF_temp_A_BIT_0_XOR_INV_temp_B_02_85_PLUS_1_86_ETC__q11 =
	     (temp_A[0] ^ INV_temp_B_02_85_PLUS_1___d486[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10 =
	     (temp_A[0] ^ temp_B[0]) ? 50'd1 : 50'd0 ;
  assign IF_temp_sum_13_BIT_48_14_THEN_IF_NOT_temp_sum__ETC___d1206 =
	     temp_sum[48] ?
	       IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083 :
	       IF_NOT_temp_sum_13_BIT_23_093_094_OR_temp_sum__ETC___d1205 ;
  assign IF_temp_sum_13_BIT_49_57_THEN_IF_NOT_temp_sum__ETC___d1084 =
	     temp_sum[49] ?
	       IF_NOT_temp_sum_13_BIT_25_58_59_OR_temp_sum_13_ETC___d1032 :
	       IF_NOT_temp_sum_13_BIT_24_49_50_OR_temp_sum_13_ETC___d1083 ;
  assign INV_fp_a_BIT_26_4_20_XOR_fp_a_BIT_25_8_OR_INV__ETC___d846 =
	     { x__h26421 ^ y__h26422,
	       x__h26233 ^ y__h26234,
	       x__h26106 ^ fp_a[23],
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign INV_fp_a_BIT_28_6_18_XOR_fp_a_BIT_27_0_OR_INV__ETC___d847 =
	     { x__h26797 ^ y__h26798,
	       x__h26609 ^ y__h26610,
	       INV_fp_a_BIT_26_4_20_XOR_fp_a_BIT_25_8_OR_INV__ETC___d846 } ;
  assign INV_fp_b_BITS_30_TO_23__q1 = ~fp_b[30:23] ;
  assign INV_temp_B_02_85_PLUS_1___d486 = ~temp_B + 50'd1 ;
  assign _theResult___snd__h38733 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872,
	       x__h41442,
	       x__h41256,
	       x__h41070,
	       x__h40884,
	       x__h40698,
	       x__h40572,
	       IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] } ;
  assign _theResult___snd__h54937 =
	     { exp___1__h49703[7] ^ y__h61637,
	       exp___1__h49703[6] ^ y__h61448,
	       fp_a_BITS_30_TO_23_MINUS_0b1_099_BIT_5_126_XOR_ETC___d1150 } ;
  assign _theResult___snd_fst__h38808 =
	     (!temp_sum[25] || temp_sum[24:0] == 25'd0 && !temp_sum[26]) ?
	       _theResult___snd__h38733 :
	       (temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926 ?
		  fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d946 :
		  _theResult___snd__h38733) ;
  assign _theResult___snd_fst__h41807 =
	     (!temp_sum[24] || temp_sum[23:0] == 24'd0 && !temp_sum[25]) ?
	       fp_a[30:23] :
	       _theResult___snd_fst__h41815 ;
  assign _theResult___snd_fst__h41815 =
	     temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978 ?
	       _theResult___snd__h38733 :
	       fp_a[30:23] ;
  assign _theResult___snd_fst__h60291 =
	     (!temp_sum[23] || temp_sum[22:0] == 23'd0 && !temp_sum[24]) ?
	       exp___1__h49703 :
	       _theResult___snd_fst__h60299 ;
  assign _theResult___snd_fst__h60299 =
	     temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123 ?
	       _theResult___snd__h54937 :
	       exp___1__h49703 ;
  assign exp___1__h49703 = fp_a[30:23] - 8'b00000001 ;
  assign fp_a_BITS_30_TO_23_MINUS_0b1_099_BIT_5_126_XOR_ETC___d1150 =
	     { exp___1__h49703[5] ^ y__h61259,
	       exp___1__h49703[4] ^ y__h61070,
	       exp___1__h49703[3] ^ y__h60881,
	       exp___1__h49703[2] ^ y__h60692,
	       exp___1__h49703[1] ^ exp___1__h49703[0],
	       IF_INV_exp___19703_BIT_0_THEN_1_ELSE_0__q7[0] } ;
  assign fp_a_BITS_30_TO_23_ULT_fp_b_BITS_30_TO_23_0_1__ETC___d17 =
	     fp_a[30:23] < fp_b[30:23] ||
	     fp_a[30:23] == fp_b[30:23] && fp_a[22:0] < fp_b[22:0] ;
  assign fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 =
	     { x__h2877 ^ y__h2878,
	       IF_fp_a_BIT_23_XOR_IF_INV_INV_fp_b_BITS_30_TO__ETC__q9[0] } ;
  assign fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 =
	     { x__h3190 ^ y__h3191,
	       x__h3004 ^ y__h3005,
	       fp_a_BIT_24_2_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d93 } ;
  assign fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d944 =
	     { x__h40884 ^ y__h40885,
	       x__h40698 ^ y__h40699,
	       x__h40572 ^ IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0],
	       IF_INV_IF_INV_fp_a_BIT_23_THEN_1_ELSE_0_BIT_0__ETC__q8[0] } ;
  assign fp_a_BIT_28_6_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d95 =
	     { x__h3562 ^ y__h3563,
	       x__h3376 ^ y__h3377,
	       fp_a_BIT_26_4_XOR_INV_fp_b_BITS_30_TO_23_0_5_B_ETC___d94 } ;
  assign fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d945 =
	     { x__h41256 ^ y__h41257,
	       x__h41070 ^ y__h41071,
	       fp_a_BIT_26_4_XOR_fp_a_BIT_25_8_AND_fp_a_BIT_2_ETC___d944 } ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872 =
	     fp_a[30] ^ y__h40132 ;
  assign fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d946 =
	     { fp_a_BIT_30_4_XOR_fp_a_BIT_29_2_AND_fp_a_BIT_2_ETC___d872 ^
	       y__h41629,
	       x__h41442 ^ y__h41443,
	       fp_a_BIT_28_6_XOR_fp_a_BIT_27_0_AND_fp_a_BIT_2_ETC___d945 } ;
  assign fp_a_BIT_31_01_EQ_fp_b_BIT_31_05___d106 = fp_a[31] == fp_b[31] ;
  assign got_A_AND_got_B_AND_operands_swapped_if_needed_ETC___d97 =
	     got_A && got_B && operands_swapped_if_needed &&
	     expdiff_calculated ;
  assign temp_A_11_BIT_11_63_XOR_INV_temp_B_02_85_PLUS__ETC___d788 =
	     { x__h18219 ^ y__h18220,
	       x__h18027 ^ y__h18028,
	       temp_A_11_BIT_9_71_XOR_INV_temp_B_02_85_PLUS_1_ETC___d787 } ;
  assign temp_A_11_BIT_11_63_XOR_temp_B_02_BIT_11_64_66_ETC___d463 =
	     { x__h7846 ^ y__h7549,
	       x__h7654 ^ y__h7357,
	       temp_A_11_BIT_9_71_XOR_temp_B_02_BIT_9_72_74_X_ETC___d462 } ;
  assign temp_A_11_BIT_13_55_XOR_INV_temp_B_02_85_PLUS__ETC___d789 =
	     { x__h18603 ^ y__h18604,
	       x__h18411 ^ y__h18412,
	       temp_A_11_BIT_11_63_XOR_INV_temp_B_02_85_PLUS__ETC___d788 } ;
  assign temp_A_11_BIT_13_55_XOR_temp_B_02_BIT_13_56_58_ETC___d464 =
	     { x__h8230 ^ y__h7933,
	       x__h8038 ^ y__h7741,
	       temp_A_11_BIT_11_63_XOR_temp_B_02_BIT_11_64_66_ETC___d463 } ;
  assign temp_A_11_BIT_15_47_XOR_INV_temp_B_02_85_PLUS__ETC___d790 =
	     { x__h18987 ^ y__h18988,
	       x__h18795 ^ y__h18796,
	       temp_A_11_BIT_13_55_XOR_INV_temp_B_02_85_PLUS__ETC___d789 } ;
  assign temp_A_11_BIT_15_47_XOR_temp_B_02_BIT_15_48_50_ETC___d465 =
	     { x__h8614 ^ y__h8317,
	       x__h8422 ^ y__h8125,
	       temp_A_11_BIT_13_55_XOR_temp_B_02_BIT_13_56_58_ETC___d464 } ;
  assign temp_A_11_BIT_17_39_XOR_INV_temp_B_02_85_PLUS__ETC___d791 =
	     { x__h19371 ^ y__h19372,
	       x__h19179 ^ y__h19180,
	       temp_A_11_BIT_15_47_XOR_INV_temp_B_02_85_PLUS__ETC___d790 } ;
  assign temp_A_11_BIT_17_39_XOR_temp_B_02_BIT_17_40_42_ETC___d466 =
	     { x__h8998 ^ y__h8701,
	       x__h8806 ^ y__h8509,
	       temp_A_11_BIT_15_47_XOR_temp_B_02_BIT_15_48_50_ETC___d465 } ;
  assign temp_A_11_BIT_19_31_XOR_INV_temp_B_02_85_PLUS__ETC___d792 =
	     { x__h19755 ^ y__h19756,
	       x__h19563 ^ y__h19564,
	       temp_A_11_BIT_17_39_XOR_INV_temp_B_02_85_PLUS__ETC___d791 } ;
  assign temp_A_11_BIT_19_31_XOR_temp_B_02_BIT_19_32_34_ETC___d467 =
	     { x__h9382 ^ y__h9085,
	       x__h9190 ^ y__h8893,
	       temp_A_11_BIT_17_39_XOR_temp_B_02_BIT_17_40_42_ETC___d466 } ;
  assign temp_A_11_BIT_1_03_XOR_INV_temp_B_02_85_PLUS_1_ETC___d783 =
	     { x__h16362 ^ y__h16363,
	       IF_temp_A_BIT_0_XOR_INV_temp_B_02_85_PLUS_1_86_ETC__q11[0] } ;
  assign temp_A_11_BIT_1_03_XOR_temp_B_02_BIT_1_04_06_X_ETC___d458 =
	     { x__h5926 ^ y__h5927,
	       IF_temp_A_BIT_0_XOR_temp_B_BIT_0_THEN_1_ELSE_0__q10[0] } ;
  assign temp_A_11_BIT_21_23_XOR_INV_temp_B_02_85_PLUS__ETC___d793 =
	     { x__h20139 ^ y__h20140,
	       x__h19947 ^ y__h19948,
	       temp_A_11_BIT_19_31_XOR_INV_temp_B_02_85_PLUS__ETC___d792 } ;
  assign temp_A_11_BIT_21_23_XOR_temp_B_02_BIT_21_24_26_ETC___d468 =
	     { x__h9766 ^ y__h9469,
	       x__h9574 ^ y__h9277,
	       temp_A_11_BIT_19_31_XOR_temp_B_02_BIT_19_32_34_ETC___d467 } ;
  assign temp_A_11_BIT_23_15_XOR_INV_temp_B_02_85_PLUS__ETC___d794 =
	     { x__h20523 ^ y__h20524,
	       x__h20331 ^ y__h20332,
	       temp_A_11_BIT_21_23_XOR_INV_temp_B_02_85_PLUS__ETC___d793 } ;
  assign temp_A_11_BIT_23_15_XOR_temp_B_02_BIT_23_16_18_ETC___d469 =
	     { x__h10150 ^ y__h9853,
	       x__h9958 ^ y__h9661,
	       temp_A_11_BIT_21_23_XOR_temp_B_02_BIT_21_24_26_ETC___d468 } ;
  assign temp_A_11_BIT_25_07_XOR_INV_temp_B_02_85_PLUS__ETC___d795 =
	     { x__h20907 ^ y__h20908,
	       x__h20715 ^ y__h20716,
	       temp_A_11_BIT_23_15_XOR_INV_temp_B_02_85_PLUS__ETC___d794 } ;
  assign temp_A_11_BIT_25_07_XOR_temp_B_02_BIT_25_08_10_ETC___d470 =
	     { x__h10534 ^ y__h10237,
	       x__h10342 ^ y__h10045,
	       temp_A_11_BIT_23_15_XOR_temp_B_02_BIT_23_16_18_ETC___d469 } ;
  assign temp_A_11_BIT_27_99_XOR_INV_temp_B_02_85_PLUS__ETC___d796 =
	     { x__h21291 ^ y__h21292,
	       x__h21099 ^ y__h21100,
	       temp_A_11_BIT_25_07_XOR_INV_temp_B_02_85_PLUS__ETC___d795 } ;
  assign temp_A_11_BIT_27_99_XOR_temp_B_02_BIT_27_00_02_ETC___d471 =
	     { x__h10918 ^ y__h10621,
	       x__h10726 ^ y__h10429,
	       temp_A_11_BIT_25_07_XOR_temp_B_02_BIT_25_08_10_ETC___d470 } ;
  assign temp_A_11_BIT_29_91_XOR_INV_temp_B_02_85_PLUS__ETC___d797 =
	     { x__h21675 ^ y__h21676,
	       x__h21483 ^ y__h21484,
	       temp_A_11_BIT_27_99_XOR_INV_temp_B_02_85_PLUS__ETC___d796 } ;
  assign temp_A_11_BIT_29_91_XOR_temp_B_02_BIT_29_92_94_ETC___d472 =
	     { x__h11302 ^ y__h11005,
	       x__h11110 ^ y__h10813,
	       temp_A_11_BIT_27_99_XOR_temp_B_02_BIT_27_00_02_ETC___d471 } ;
  assign temp_A_11_BIT_31_83_XOR_INV_temp_B_02_85_PLUS__ETC___d798 =
	     { x__h22059 ^ y__h22060,
	       x__h21867 ^ y__h21868,
	       temp_A_11_BIT_29_91_XOR_INV_temp_B_02_85_PLUS__ETC___d797 } ;
  assign temp_A_11_BIT_31_83_XOR_temp_B_02_BIT_31_84_86_ETC___d473 =
	     { x__h11686 ^ y__h11389,
	       x__h11494 ^ y__h11197,
	       temp_A_11_BIT_29_91_XOR_temp_B_02_BIT_29_92_94_ETC___d472 } ;
  assign temp_A_11_BIT_33_75_XOR_INV_temp_B_02_85_PLUS__ETC___d799 =
	     { x__h22443 ^ y__h22444,
	       x__h22251 ^ y__h22252,
	       temp_A_11_BIT_31_83_XOR_INV_temp_B_02_85_PLUS__ETC___d798 } ;
  assign temp_A_11_BIT_33_75_XOR_temp_B_02_BIT_33_76_78_ETC___d474 =
	     { x__h12070 ^ y__h11773,
	       x__h11878 ^ y__h11581,
	       temp_A_11_BIT_31_83_XOR_temp_B_02_BIT_31_84_86_ETC___d473 } ;
  assign temp_A_11_BIT_35_67_XOR_INV_temp_B_02_85_PLUS__ETC___d800 =
	     { x__h22827 ^ y__h22828,
	       x__h22635 ^ y__h22636,
	       temp_A_11_BIT_33_75_XOR_INV_temp_B_02_85_PLUS__ETC___d799 } ;
  assign temp_A_11_BIT_35_67_XOR_temp_B_02_BIT_35_68_70_ETC___d475 =
	     { x__h12454 ^ y__h12157,
	       x__h12262 ^ y__h11965,
	       temp_A_11_BIT_33_75_XOR_temp_B_02_BIT_33_76_78_ETC___d474 } ;
  assign temp_A_11_BIT_37_59_XOR_INV_temp_B_02_85_PLUS__ETC___d801 =
	     { x__h23211 ^ y__h23212,
	       x__h23019 ^ y__h23020,
	       temp_A_11_BIT_35_67_XOR_INV_temp_B_02_85_PLUS__ETC___d800 } ;
  assign temp_A_11_BIT_37_59_XOR_temp_B_02_BIT_37_60_62_ETC___d476 =
	     { x__h12838 ^ y__h12541,
	       x__h12646 ^ y__h12349,
	       temp_A_11_BIT_35_67_XOR_temp_B_02_BIT_35_68_70_ETC___d475 } ;
  assign temp_A_11_BIT_39_51_XOR_INV_temp_B_02_85_PLUS__ETC___d802 =
	     { x__h23595 ^ y__h23596,
	       x__h23403 ^ y__h23404,
	       temp_A_11_BIT_37_59_XOR_INV_temp_B_02_85_PLUS__ETC___d801 } ;
  assign temp_A_11_BIT_39_51_XOR_temp_B_02_BIT_39_52_54_ETC___d477 =
	     { x__h13222 ^ y__h12925,
	       x__h13030 ^ y__h12733,
	       temp_A_11_BIT_37_59_XOR_temp_B_02_BIT_37_60_62_ETC___d476 } ;
  assign temp_A_11_BIT_3_95_XOR_INV_temp_B_02_85_PLUS_1_ETC___d784 =
	     { x__h16683 ^ y__h16684,
	       x__h16491 ^ y__h16492,
	       temp_A_11_BIT_1_03_XOR_INV_temp_B_02_85_PLUS_1_ETC___d783 } ;
  assign temp_A_11_BIT_3_95_XOR_temp_B_02_BIT_3_96_98_X_ETC___d459 =
	     { x__h6310 ^ y__h6013,
	       x__h6118 ^ y__h5821,
	       temp_A_11_BIT_1_03_XOR_temp_B_02_BIT_1_04_06_X_ETC___d458 } ;
  assign temp_A_11_BIT_41_43_XOR_INV_temp_B_02_85_PLUS__ETC___d803 =
	     { x__h23979 ^ y__h23980,
	       x__h23787 ^ y__h23788,
	       temp_A_11_BIT_39_51_XOR_INV_temp_B_02_85_PLUS__ETC___d802 } ;
  assign temp_A_11_BIT_41_43_XOR_temp_B_02_BIT_41_44_46_ETC___d478 =
	     { x__h13606 ^ y__h13309,
	       x__h13414 ^ y__h13117,
	       temp_A_11_BIT_39_51_XOR_temp_B_02_BIT_39_52_54_ETC___d477 } ;
  assign temp_A_11_BIT_43_35_XOR_INV_temp_B_02_85_PLUS__ETC___d804 =
	     { x__h24363 ^ y__h24364,
	       x__h24171 ^ y__h24172,
	       temp_A_11_BIT_41_43_XOR_INV_temp_B_02_85_PLUS__ETC___d803 } ;
  assign temp_A_11_BIT_43_35_XOR_temp_B_02_BIT_43_36_38_ETC___d479 =
	     { x__h13990 ^ y__h13693,
	       x__h13798 ^ y__h13501,
	       temp_A_11_BIT_41_43_XOR_temp_B_02_BIT_41_44_46_ETC___d478 } ;
  assign temp_A_11_BIT_45_27_XOR_INV_temp_B_02_85_PLUS__ETC___d805 =
	     { x__h24747 ^ y__h24748,
	       x__h24555 ^ y__h24556,
	       temp_A_11_BIT_43_35_XOR_INV_temp_B_02_85_PLUS__ETC___d804 } ;
  assign temp_A_11_BIT_45_27_XOR_temp_B_02_BIT_45_28_30_ETC___d480 =
	     { x__h14374 ^ y__h14077,
	       x__h14182 ^ y__h13885,
	       temp_A_11_BIT_43_35_XOR_temp_B_02_BIT_43_36_38_ETC___d479 } ;
  assign temp_A_11_BIT_47_19_XOR_INV_temp_B_02_85_PLUS__ETC___d806 =
	     { x__h25131 ^ y__h25132,
	       x__h24939 ^ y__h24940,
	       temp_A_11_BIT_45_27_XOR_INV_temp_B_02_85_PLUS__ETC___d805 } ;
  assign temp_A_11_BIT_47_19_XOR_temp_B_02_BIT_47_20_22_ETC___d481 =
	     { x__h14758 ^ y__h14461,
	       x__h14566 ^ y__h14269,
	       temp_A_11_BIT_45_27_XOR_temp_B_02_BIT_45_28_30_ETC___d480 } ;
  assign temp_A_11_BIT_5_87_XOR_INV_temp_B_02_85_PLUS_1_ETC___d785 =
	     { x__h17067 ^ y__h17068,
	       x__h16875 ^ y__h16876,
	       temp_A_11_BIT_3_95_XOR_INV_temp_B_02_85_PLUS_1_ETC___d784 } ;
  assign temp_A_11_BIT_5_87_XOR_temp_B_02_BIT_5_88_90_X_ETC___d460 =
	     { x__h6694 ^ y__h6397,
	       x__h6502 ^ y__h6205,
	       temp_A_11_BIT_3_95_XOR_temp_B_02_BIT_3_96_98_X_ETC___d459 } ;
  assign temp_A_11_BIT_7_79_XOR_INV_temp_B_02_85_PLUS_1_ETC___d786 =
	     { x__h17451 ^ y__h17452,
	       x__h17259 ^ y__h17260,
	       temp_A_11_BIT_5_87_XOR_INV_temp_B_02_85_PLUS_1_ETC___d785 } ;
  assign temp_A_11_BIT_7_79_XOR_temp_B_02_BIT_7_80_82_X_ETC___d461 =
	     { x__h7078 ^ y__h6781,
	       x__h6886 ^ y__h6589,
	       temp_A_11_BIT_5_87_XOR_temp_B_02_BIT_5_88_90_X_ETC___d460 } ;
  assign temp_A_11_BIT_9_71_XOR_INV_temp_B_02_85_PLUS_1_ETC___d787 =
	     { x__h17835 ^ y__h17836,
	       x__h17643 ^ y__h17644,
	       temp_A_11_BIT_7_79_XOR_INV_temp_B_02_85_PLUS_1_ETC___d786 } ;
  assign temp_A_11_BIT_9_71_XOR_temp_B_02_BIT_9_72_74_X_ETC___d462 =
	     { x__h7462 ^ y__h7165,
	       x__h7270 ^ y__h6973,
	       temp_A_11_BIT_7_79_XOR_temp_B_02_BIT_7_80_82_X_ETC___d461 } ;
  assign temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178 =
	     temp_sum[24] ^ temp_sum[23] ;
  assign temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177 =
	     temp_sum[25] ^ y__h50666 ;
  assign temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056 =
	     temp_sum[26] ^ temp_sum[25] ;
  assign temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176 =
	     temp_sum[26] ^ y__h50852 ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005 =
	     temp_sum[27] ^ temp_sum[26] ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055 =
	     temp_sum[27] ^ y__h55945 ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175 =
	     temp_sum[27] ^ y__h51038 ;
  assign temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1194 =
	     { temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176,
	       temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177,
	       temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178,
	       IF_INV_temp_sum_BIT_23_THEN_1_ELSE_0__q5[0] } ;
  assign temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004 =
	     temp_sum[28] ^ y__h29183 ;
  assign temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054 =
	     temp_sum[28] ^ y__h56131 ;
  assign temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174 =
	     temp_sum[28] ^ y__h51224 ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003 =
	     temp_sum[29] ^ y__h29369 ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053 =
	     temp_sum[29] ^ y__h56317 ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1072 =
	     { temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056,
	       IF_INV_temp_sum_BIT_25_THEN_1_ELSE_0__q4[0] } ;
  assign temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173 =
	     temp_sum[29] ^ y__h51410 ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002 =
	     temp_sum[30] ^ y__h29555 ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1021 =
	     { temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005,
	       IF_INV_temp_sum_BIT_26_THEN_1_ELSE_0__q6[0] } ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052 =
	     temp_sum[30] ^ y__h56503 ;
  assign temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172 =
	     temp_sum[30] ^ y__h51596 ;
  assign temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001 =
	     temp_sum[31] ^ y__h29741 ;
  assign temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051 =
	     temp_sum[31] ^ y__h56689 ;
  assign temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171 =
	     temp_sum[31] ^ y__h51782 ;
  assign temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000 =
	     temp_sum[32] ^ y__h29927 ;
  assign temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050 =
	     temp_sum[32] ^ y__h56875 ;
  assign temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170 =
	     temp_sum[32] ^ y__h51968 ;
  assign temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049 =
	     temp_sum[33] ^ y__h57061 ;
  assign temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169 =
	     temp_sum[33] ^ y__h52154 ;
  assign temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999 =
	     temp_sum[33] ^ y__h30113 ;
  assign temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048 =
	     temp_sum[34] ^ y__h57247 ;
  assign temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168 =
	     temp_sum[34] ^ y__h52340 ;
  assign temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998 =
	     temp_sum[34] ^ y__h30299 ;
  assign temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047 =
	     temp_sum[35] ^ y__h57433 ;
  assign temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167 =
	     temp_sum[35] ^ y__h52526 ;
  assign temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997 =
	     temp_sum[35] ^ y__h30485 ;
  assign temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046 =
	     temp_sum[36] ^ y__h57619 ;
  assign temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166 =
	     temp_sum[36] ^ y__h52712 ;
  assign temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996 =
	     temp_sum[36] ^ y__h30671 ;
  assign temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045 =
	     temp_sum[37] ^ y__h57805 ;
  assign temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165 =
	     temp_sum[37] ^ y__h52898 ;
  assign temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995 =
	     temp_sum[37] ^ y__h30857 ;
  assign temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044 =
	     temp_sum[38] ^ y__h57991 ;
  assign temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164 =
	     temp_sum[38] ^ y__h53084 ;
  assign temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994 =
	     temp_sum[38] ^ y__h31043 ;
  assign temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043 =
	     temp_sum[39] ^ y__h58177 ;
  assign temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163 =
	     temp_sum[39] ^ y__h53270 ;
  assign temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993 =
	     temp_sum[39] ^ y__h31229 ;
  assign temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042 =
	     temp_sum[40] ^ y__h58363 ;
  assign temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162 =
	     temp_sum[40] ^ y__h53456 ;
  assign temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992 =
	     temp_sum[40] ^ y__h31415 ;
  assign temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041 =
	     temp_sum[41] ^ y__h58549 ;
  assign temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161 =
	     temp_sum[41] ^ y__h53642 ;
  assign temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991 =
	     temp_sum[41] ^ y__h31601 ;
  assign temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040 =
	     temp_sum[42] ^ y__h58735 ;
  assign temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160 =
	     temp_sum[42] ^ y__h53828 ;
  assign temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990 =
	     temp_sum[42] ^ y__h31787 ;
  assign temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039 =
	     temp_sum[43] ^ y__h58921 ;
  assign temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159 =
	     temp_sum[43] ^ y__h54014 ;
  assign temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989 =
	     temp_sum[43] ^ y__h31973 ;
  assign temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038 =
	     temp_sum[44] ^ y__h59107 ;
  assign temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158 =
	     temp_sum[44] ^ y__h54200 ;
  assign temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988 =
	     temp_sum[44] ^ y__h32159 ;
  assign temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037 =
	     temp_sum[45] ^ y__h59293 ;
  assign temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157 =
	     temp_sum[45] ^ y__h54386 ;
  assign temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987 =
	     temp_sum[45] ^ y__h32345 ;
  assign temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036 =
	     temp_sum[46] ^ y__h59479 ;
  assign temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986 =
	     temp_sum[46] ^ y__h32531 ;
  assign temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035 =
	     temp_sum[47] ^ y__h59665 ;
  assign temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1123 =
	     temp_sum[47] ^ y__h54758 ;
  assign temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985 =
	     temp_sum[47] ^ y__h32717 ;
  assign temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984 =
	     temp_sum[48] ^ y__h32903 ;
  assign temp_sum_13_BIT_49_57_AND_temp_sum_13_BIT_48_1_ETC___d926 =
	     temp_sum[49] & y__h33089 ;
  assign temp_sum_13_BIT_49_57_XOR_temp_sum_13_BIT_48_1_ETC___d978 =
	     temp_sum[49] ^ y__h60037 ;
  assign x__h10103 = temp_A[23] & temp_B[23] ;
  assign x__h10150 = temp_A[23] ^ temp_B[23] ;
  assign x__h10295 = temp_A[24] & temp_B[24] ;
  assign x__h10342 = temp_A[24] ^ temp_B[24] ;
  assign x__h10487 = temp_A[25] & temp_B[25] ;
  assign x__h10534 = temp_A[25] ^ temp_B[25] ;
  assign x__h10679 = temp_A[26] & temp_B[26] ;
  assign x__h10726 = temp_A[26] ^ temp_B[26] ;
  assign x__h10871 = temp_A[27] & temp_B[27] ;
  assign x__h10918 = temp_A[27] ^ temp_B[27] ;
  assign x__h11063 = temp_A[28] & temp_B[28] ;
  assign x__h11110 = temp_A[28] ^ temp_B[28] ;
  assign x__h11255 = temp_A[29] & temp_B[29] ;
  assign x__h11302 = temp_A[29] ^ temp_B[29] ;
  assign x__h11447 = temp_A[30] & temp_B[30] ;
  assign x__h11494 = temp_A[30] ^ temp_B[30] ;
  assign x__h11639 = temp_A[31] & temp_B[31] ;
  assign x__h11686 = temp_A[31] ^ temp_B[31] ;
  assign x__h11831 = temp_A[32] & temp_B[32] ;
  assign x__h11878 = temp_A[32] ^ temp_B[32] ;
  assign x__h12023 = temp_A[33] & temp_B[33] ;
  assign x__h12070 = temp_A[33] ^ temp_B[33] ;
  assign x__h12215 = temp_A[34] & temp_B[34] ;
  assign x__h12262 = temp_A[34] ^ temp_B[34] ;
  assign x__h12407 = temp_A[35] & temp_B[35] ;
  assign x__h12454 = temp_A[35] ^ temp_B[35] ;
  assign x__h12599 = temp_A[36] & temp_B[36] ;
  assign x__h12646 = temp_A[36] ^ temp_B[36] ;
  assign x__h12791 = temp_A[37] & temp_B[37] ;
  assign x__h12838 = temp_A[37] ^ temp_B[37] ;
  assign x__h12983 = temp_A[38] & temp_B[38] ;
  assign x__h13030 = temp_A[38] ^ temp_B[38] ;
  assign x__h13175 = temp_A[39] & temp_B[39] ;
  assign x__h13222 = temp_A[39] ^ temp_B[39] ;
  assign x__h13367 = temp_A[40] & temp_B[40] ;
  assign x__h13414 = temp_A[40] ^ temp_B[40] ;
  assign x__h13559 = temp_A[41] & temp_B[41] ;
  assign x__h13606 = temp_A[41] ^ temp_B[41] ;
  assign x__h13751 = temp_A[42] & temp_B[42] ;
  assign x__h13798 = temp_A[42] ^ temp_B[42] ;
  assign x__h13943 = temp_A[43] & temp_B[43] ;
  assign x__h13990 = temp_A[43] ^ temp_B[43] ;
  assign x__h14135 = temp_A[44] & temp_B[44] ;
  assign x__h14182 = temp_A[44] ^ temp_B[44] ;
  assign x__h14327 = temp_A[45] & temp_B[45] ;
  assign x__h14374 = temp_A[45] ^ temp_B[45] ;
  assign x__h14519 = temp_A[46] & temp_B[46] ;
  assign x__h14566 = temp_A[46] ^ temp_B[46] ;
  assign x__h14711 = temp_A[47] & temp_B[47] ;
  assign x__h14758 = temp_A[47] ^ temp_B[47] ;
  assign x__h14844 = temp_A[49] ^ temp_B[49] ;
  assign x__h14903 = temp_A[48] & temp_B[48] ;
  assign x__h14950 = temp_A[48] ^ temp_B[48] ;
  assign x__h16362 = temp_A[1] ^ INV_temp_B_02_85_PLUS_1___d486[1] ;
  assign x__h16491 = temp_A[2] ^ INV_temp_B_02_85_PLUS_1___d486[2] ;
  assign x__h16550 = temp_A[1] & INV_temp_B_02_85_PLUS_1___d486[1] ;
  assign x__h16683 = temp_A[3] ^ INV_temp_B_02_85_PLUS_1___d486[3] ;
  assign x__h16742 = temp_A[2] & INV_temp_B_02_85_PLUS_1___d486[2] ;
  assign x__h16875 = temp_A[4] ^ INV_temp_B_02_85_PLUS_1___d486[4] ;
  assign x__h16934 = temp_A[3] & INV_temp_B_02_85_PLUS_1___d486[3] ;
  assign x__h17067 = temp_A[5] ^ INV_temp_B_02_85_PLUS_1___d486[5] ;
  assign x__h17126 = temp_A[4] & INV_temp_B_02_85_PLUS_1___d486[4] ;
  assign x__h17259 = temp_A[6] ^ INV_temp_B_02_85_PLUS_1___d486[6] ;
  assign x__h17318 = temp_A[5] & INV_temp_B_02_85_PLUS_1___d486[5] ;
  assign x__h17451 = temp_A[7] ^ INV_temp_B_02_85_PLUS_1___d486[7] ;
  assign x__h17510 = temp_A[6] & INV_temp_B_02_85_PLUS_1___d486[6] ;
  assign x__h17643 = temp_A[8] ^ INV_temp_B_02_85_PLUS_1___d486[8] ;
  assign x__h17702 = temp_A[7] & INV_temp_B_02_85_PLUS_1___d486[7] ;
  assign x__h17835 = temp_A[9] ^ INV_temp_B_02_85_PLUS_1___d486[9] ;
  assign x__h17894 = temp_A[8] & INV_temp_B_02_85_PLUS_1___d486[8] ;
  assign x__h18027 = temp_A[10] ^ INV_temp_B_02_85_PLUS_1___d486[10] ;
  assign x__h18086 = temp_A[9] & INV_temp_B_02_85_PLUS_1___d486[9] ;
  assign x__h18219 = temp_A[11] ^ INV_temp_B_02_85_PLUS_1___d486[11] ;
  assign x__h18278 = temp_A[10] & INV_temp_B_02_85_PLUS_1___d486[10] ;
  assign x__h18411 = temp_A[12] ^ INV_temp_B_02_85_PLUS_1___d486[12] ;
  assign x__h18470 = temp_A[11] & INV_temp_B_02_85_PLUS_1___d486[11] ;
  assign x__h18603 = temp_A[13] ^ INV_temp_B_02_85_PLUS_1___d486[13] ;
  assign x__h18662 = temp_A[12] & INV_temp_B_02_85_PLUS_1___d486[12] ;
  assign x__h18795 = temp_A[14] ^ INV_temp_B_02_85_PLUS_1___d486[14] ;
  assign x__h18854 = temp_A[13] & INV_temp_B_02_85_PLUS_1___d486[13] ;
  assign x__h18987 = temp_A[15] ^ INV_temp_B_02_85_PLUS_1___d486[15] ;
  assign x__h19046 = temp_A[14] & INV_temp_B_02_85_PLUS_1___d486[14] ;
  assign x__h19179 = temp_A[16] ^ INV_temp_B_02_85_PLUS_1___d486[16] ;
  assign x__h19238 = temp_A[15] & INV_temp_B_02_85_PLUS_1___d486[15] ;
  assign x__h19371 = temp_A[17] ^ INV_temp_B_02_85_PLUS_1___d486[17] ;
  assign x__h19430 = temp_A[16] & INV_temp_B_02_85_PLUS_1___d486[16] ;
  assign x__h19563 = temp_A[18] ^ INV_temp_B_02_85_PLUS_1___d486[18] ;
  assign x__h19622 = temp_A[17] & INV_temp_B_02_85_PLUS_1___d486[17] ;
  assign x__h19755 = temp_A[19] ^ INV_temp_B_02_85_PLUS_1___d486[19] ;
  assign x__h19814 = temp_A[18] & INV_temp_B_02_85_PLUS_1___d486[18] ;
  assign x__h19947 = temp_A[20] ^ INV_temp_B_02_85_PLUS_1___d486[20] ;
  assign x__h20006 = temp_A[19] & INV_temp_B_02_85_PLUS_1___d486[19] ;
  assign x__h20139 = temp_A[21] ^ INV_temp_B_02_85_PLUS_1___d486[21] ;
  assign x__h20198 = temp_A[20] & INV_temp_B_02_85_PLUS_1___d486[20] ;
  assign x__h20331 = temp_A[22] ^ INV_temp_B_02_85_PLUS_1___d486[22] ;
  assign x__h20390 = temp_A[21] & INV_temp_B_02_85_PLUS_1___d486[21] ;
  assign x__h20523 = temp_A[23] ^ INV_temp_B_02_85_PLUS_1___d486[23] ;
  assign x__h20582 = temp_A[22] & INV_temp_B_02_85_PLUS_1___d486[22] ;
  assign x__h20715 = temp_A[24] ^ INV_temp_B_02_85_PLUS_1___d486[24] ;
  assign x__h20774 = temp_A[23] & INV_temp_B_02_85_PLUS_1___d486[23] ;
  assign x__h20907 = temp_A[25] ^ INV_temp_B_02_85_PLUS_1___d486[25] ;
  assign x__h20966 = temp_A[24] & INV_temp_B_02_85_PLUS_1___d486[24] ;
  assign x__h21099 = temp_A[26] ^ INV_temp_B_02_85_PLUS_1___d486[26] ;
  assign x__h21158 = temp_A[25] & INV_temp_B_02_85_PLUS_1___d486[25] ;
  assign x__h21291 = temp_A[27] ^ INV_temp_B_02_85_PLUS_1___d486[27] ;
  assign x__h21350 = temp_A[26] & INV_temp_B_02_85_PLUS_1___d486[26] ;
  assign x__h21483 = temp_A[28] ^ INV_temp_B_02_85_PLUS_1___d486[28] ;
  assign x__h21542 = temp_A[27] & INV_temp_B_02_85_PLUS_1___d486[27] ;
  assign x__h21675 = temp_A[29] ^ INV_temp_B_02_85_PLUS_1___d486[29] ;
  assign x__h21734 = temp_A[28] & INV_temp_B_02_85_PLUS_1___d486[28] ;
  assign x__h21867 = temp_A[30] ^ INV_temp_B_02_85_PLUS_1___d486[30] ;
  assign x__h21926 = temp_A[29] & INV_temp_B_02_85_PLUS_1___d486[29] ;
  assign x__h22059 = temp_A[31] ^ INV_temp_B_02_85_PLUS_1___d486[31] ;
  assign x__h22118 = temp_A[30] & INV_temp_B_02_85_PLUS_1___d486[30] ;
  assign x__h22251 = temp_A[32] ^ INV_temp_B_02_85_PLUS_1___d486[32] ;
  assign x__h22310 = temp_A[31] & INV_temp_B_02_85_PLUS_1___d486[31] ;
  assign x__h22443 = temp_A[33] ^ INV_temp_B_02_85_PLUS_1___d486[33] ;
  assign x__h22502 = temp_A[32] & INV_temp_B_02_85_PLUS_1___d486[32] ;
  assign x__h22635 = temp_A[34] ^ INV_temp_B_02_85_PLUS_1___d486[34] ;
  assign x__h22694 = temp_A[33] & INV_temp_B_02_85_PLUS_1___d486[33] ;
  assign x__h22827 = temp_A[35] ^ INV_temp_B_02_85_PLUS_1___d486[35] ;
  assign x__h22886 = temp_A[34] & INV_temp_B_02_85_PLUS_1___d486[34] ;
  assign x__h23019 = temp_A[36] ^ INV_temp_B_02_85_PLUS_1___d486[36] ;
  assign x__h23078 = temp_A[35] & INV_temp_B_02_85_PLUS_1___d486[35] ;
  assign x__h23211 = temp_A[37] ^ INV_temp_B_02_85_PLUS_1___d486[37] ;
  assign x__h23270 = temp_A[36] & INV_temp_B_02_85_PLUS_1___d486[36] ;
  assign x__h23403 = temp_A[38] ^ INV_temp_B_02_85_PLUS_1___d486[38] ;
  assign x__h23462 = temp_A[37] & INV_temp_B_02_85_PLUS_1___d486[37] ;
  assign x__h23595 = temp_A[39] ^ INV_temp_B_02_85_PLUS_1___d486[39] ;
  assign x__h23654 = temp_A[38] & INV_temp_B_02_85_PLUS_1___d486[38] ;
  assign x__h23787 = temp_A[40] ^ INV_temp_B_02_85_PLUS_1___d486[40] ;
  assign x__h23846 = temp_A[39] & INV_temp_B_02_85_PLUS_1___d486[39] ;
  assign x__h23979 = temp_A[41] ^ INV_temp_B_02_85_PLUS_1___d486[41] ;
  assign x__h24038 = temp_A[40] & INV_temp_B_02_85_PLUS_1___d486[40] ;
  assign x__h24171 = temp_A[42] ^ INV_temp_B_02_85_PLUS_1___d486[42] ;
  assign x__h24230 = temp_A[41] & INV_temp_B_02_85_PLUS_1___d486[41] ;
  assign x__h24363 = temp_A[43] ^ INV_temp_B_02_85_PLUS_1___d486[43] ;
  assign x__h24422 = temp_A[42] & INV_temp_B_02_85_PLUS_1___d486[42] ;
  assign x__h24555 = temp_A[44] ^ INV_temp_B_02_85_PLUS_1___d486[44] ;
  assign x__h24614 = temp_A[43] & INV_temp_B_02_85_PLUS_1___d486[43] ;
  assign x__h24747 = temp_A[45] ^ INV_temp_B_02_85_PLUS_1___d486[45] ;
  assign x__h24806 = temp_A[44] & INV_temp_B_02_85_PLUS_1___d486[44] ;
  assign x__h24939 = temp_A[46] ^ INV_temp_B_02_85_PLUS_1___d486[46] ;
  assign x__h24998 = temp_A[45] & INV_temp_B_02_85_PLUS_1___d486[45] ;
  assign x__h25131 = temp_A[47] ^ INV_temp_B_02_85_PLUS_1___d486[47] ;
  assign x__h25190 = temp_A[46] & INV_temp_B_02_85_PLUS_1___d486[46] ;
  assign x__h25323 = temp_A[48] ^ INV_temp_B_02_85_PLUS_1___d486[48] ;
  assign x__h25382 = temp_A[47] & INV_temp_B_02_85_PLUS_1___d486[47] ;
  assign x__h25515 = temp_A[49] ^ INV_temp_B_02_85_PLUS_1___d486[49] ;
  assign x__h25574 = temp_A[48] & INV_temp_B_02_85_PLUS_1___d486[48] ;
  assign x__h26106 = ~fp_a[24] ;
  assign x__h26233 = ~fp_a[25] ;
  assign x__h26421 = ~fp_a[26] ;
  assign x__h26609 = ~fp_a[27] ;
  assign x__h26797 = ~fp_a[28] ;
  assign x__h26985 = ~fp_a[29] ;
  assign x__h27173 = ~fp_a[30] ;
  assign x__h2877 = fp_a[24] ^ y__h2880 ;
  assign x__h3004 = fp_a[25] ^ y__h3007 ;
  assign x__h3061 = fp_a[24] & y__h2880 ;
  assign x__h3190 = fp_a[26] ^ y__h3193 ;
  assign x__h3247 = fp_a[25] & y__h3007 ;
  assign x__h33457 =
	     { temp_sum[49] ^ y__h33089,
	       temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984,
	       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1002,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1003,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1004,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_62___d1005 } ;
  assign x__h33480 =
	     { temp_sum_13_BIT_48_14_XOR_temp_sum_13_BIT_47_8_ETC___d984,
	       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d985,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d986,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d987,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d988,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d989,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d990,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d991,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d992,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d993,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d994,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d995,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d996,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d997,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d998,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d999,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1000,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1001,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1021 } ;
  assign x__h3376 = fp_a[27] ^ y__h3379 ;
  assign x__h3433 = fp_a[26] & y__h3193 ;
  assign x__h3562 = fp_a[28] ^ y__h3565 ;
  assign x__h3619 = fp_a[27] & y__h3379 ;
  assign x__h3748 = fp_a[29] ^ y__h3751 ;
  assign x__h3805 = fp_a[28] & y__h3565 ;
  assign x__h38805 =
	     temp_sum[49] ?
	       _theResult___snd_fst__h38808 :
	       _theResult___snd_fst__h41807 ;
  assign x__h3934 = fp_a[30] ^ y__h3937 ;
  assign x__h3991 = fp_a[29] & y__h3751 ;
  assign x__h40572 = fp_a[24] ^ fp_a[23] ;
  assign x__h40698 = fp_a[25] ^ y__h39202 ;
  assign x__h40884 = fp_a[26] ^ y__h39388 ;
  assign x__h41070 = fp_a[27] ^ y__h39574 ;
  assign x__h41256 = fp_a[28] ^ y__h39760 ;
  assign x__h41442 = fp_a[29] ^ y__h39946 ;
  assign x__h54940 =
	     { temp_sum[46] ^ y__h54572,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1175,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_5_ETC___d1176,
	       temp_sum_13_BIT_25_58_XOR_temp_sum_13_BIT_24_4_ETC___d1177,
	       temp_sum_13_BIT_24_49_XOR_temp_sum_13_BIT_23_093___d1178 } ;
  assign x__h54963 =
	     { temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1157,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1158,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1159,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1160,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1161,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1162,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1163,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1164,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1165,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1166,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1167,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1168,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1169,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1170,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1171,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1172,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1173,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1174,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1194 } ;
  assign x__h5879 = temp_A[1] & temp_B[1] ;
  assign x__h5926 = temp_A[1] ^ temp_B[1] ;
  assign x__h60219 =
	     { temp_sum[48] ^ y__h59851,
	       temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1053,
	       temp_sum_13_BIT_28_02_XOR_temp_sum_13_BIT_27_0_ETC___d1054,
	       temp_sum_13_BIT_27_03_XOR_temp_sum_13_BIT_26_6_ETC___d1055,
	       temp_sum_13_BIT_26_62_XOR_temp_sum_13_BIT_25_58___d1056 } ;
  assign x__h60242 =
	     { temp_sum_13_BIT_47_83_XOR_temp_sum_13_BIT_46_8_ETC___d1035,
	       temp_sum_13_BIT_46_84_XOR_temp_sum_13_BIT_45_8_ETC___d1036,
	       temp_sum_13_BIT_45_85_XOR_temp_sum_13_BIT_44_8_ETC___d1037,
	       temp_sum_13_BIT_44_86_XOR_temp_sum_13_BIT_43_8_ETC___d1038,
	       temp_sum_13_BIT_43_87_XOR_temp_sum_13_BIT_42_8_ETC___d1039,
	       temp_sum_13_BIT_42_88_XOR_temp_sum_13_BIT_41_8_ETC___d1040,
	       temp_sum_13_BIT_41_89_XOR_temp_sum_13_BIT_40_9_ETC___d1041,
	       temp_sum_13_BIT_40_90_XOR_temp_sum_13_BIT_39_9_ETC___d1042,
	       temp_sum_13_BIT_39_91_XOR_temp_sum_13_BIT_38_9_ETC___d1043,
	       temp_sum_13_BIT_38_92_XOR_temp_sum_13_BIT_37_9_ETC___d1044,
	       temp_sum_13_BIT_37_93_XOR_temp_sum_13_BIT_36_9_ETC___d1045,
	       temp_sum_13_BIT_36_94_XOR_temp_sum_13_BIT_35_9_ETC___d1046,
	       temp_sum_13_BIT_35_95_XOR_temp_sum_13_BIT_34_9_ETC___d1047,
	       temp_sum_13_BIT_34_96_XOR_temp_sum_13_BIT_33_9_ETC___d1048,
	       temp_sum_13_BIT_33_97_XOR_temp_sum_13_BIT_32_9_ETC___d1049,
	       temp_sum_13_BIT_32_98_XOR_temp_sum_13_BIT_31_9_ETC___d1050,
	       temp_sum_13_BIT_31_99_XOR_temp_sum_13_BIT_30_0_ETC___d1051,
	       temp_sum_13_BIT_30_00_XOR_temp_sum_13_BIT_29_0_ETC___d1052,
	       temp_sum_13_BIT_29_01_XOR_temp_sum_13_BIT_28_0_ETC___d1072 } ;
  assign x__h60288 =
	     temp_sum[48] ?
	       _theResult___snd_fst__h41807 :
	       _theResult___snd_fst__h60291 ;
  assign x__h6071 = temp_A[2] & temp_B[2] ;
  assign x__h6118 = temp_A[2] ^ temp_B[2] ;
  assign x__h6263 = temp_A[3] & temp_B[3] ;
  assign x__h6310 = temp_A[3] ^ temp_B[3] ;
  assign x__h6455 = temp_A[4] & temp_B[4] ;
  assign x__h6502 = temp_A[4] ^ temp_B[4] ;
  assign x__h6647 = temp_A[5] & temp_B[5] ;
  assign x__h6694 = temp_A[5] ^ temp_B[5] ;
  assign x__h6839 = temp_A[6] & temp_B[6] ;
  assign x__h6886 = temp_A[6] ^ temp_B[6] ;
  assign x__h7031 = temp_A[7] & temp_B[7] ;
  assign x__h7078 = temp_A[7] ^ temp_B[7] ;
  assign x__h7223 = temp_A[8] & temp_B[8] ;
  assign x__h7270 = temp_A[8] ^ temp_B[8] ;
  assign x__h7415 = temp_A[9] & temp_B[9] ;
  assign x__h7462 = temp_A[9] ^ temp_B[9] ;
  assign x__h7607 = temp_A[10] & temp_B[10] ;
  assign x__h7654 = temp_A[10] ^ temp_B[10] ;
  assign x__h7799 = temp_A[11] & temp_B[11] ;
  assign x__h7846 = temp_A[11] ^ temp_B[11] ;
  assign x__h7991 = temp_A[12] & temp_B[12] ;
  assign x__h8038 = temp_A[12] ^ temp_B[12] ;
  assign x__h8183 = temp_A[13] & temp_B[13] ;
  assign x__h8230 = temp_A[13] ^ temp_B[13] ;
  assign x__h8375 = temp_A[14] & temp_B[14] ;
  assign x__h8422 = temp_A[14] ^ temp_B[14] ;
  assign x__h8567 = temp_A[15] & temp_B[15] ;
  assign x__h8614 = temp_A[15] ^ temp_B[15] ;
  assign x__h8759 = temp_A[16] & temp_B[16] ;
  assign x__h8806 = temp_A[16] ^ temp_B[16] ;
  assign x__h8951 = temp_A[17] & temp_B[17] ;
  assign x__h8998 = temp_A[17] ^ temp_B[17] ;
  assign x__h9143 = temp_A[18] & temp_B[18] ;
  assign x__h9190 = temp_A[18] ^ temp_B[18] ;
  assign x__h9335 = temp_A[19] & temp_B[19] ;
  assign x__h9382 = temp_A[19] ^ temp_B[19] ;
  assign x__h9527 = temp_A[20] & temp_B[20] ;
  assign x__h9574 = temp_A[20] ^ temp_B[20] ;
  assign x__h9719 = temp_A[21] & temp_B[21] ;
  assign x__h9766 = temp_A[21] ^ temp_B[21] ;
  assign x__h9911 = temp_A[22] & temp_B[22] ;
  assign x__h9958 = temp_A[22] ^ temp_B[22] ;
  assign x_exponent__h25841 =
	     { x__h27173 ^ y__h27174,
	       x__h26985 ^ y__h26986,
	       INV_fp_a_BIT_28_6_18_XOR_fp_a_BIT_27_0_OR_INV__ETC___d847 } ;
  assign y__h10045 = x__h10103 | y__h10104 ;
  assign y__h10104 = x__h10150 & y__h9853 ;
  assign y__h10237 = x__h10295 | y__h10296 ;
  assign y__h10296 = x__h10342 & y__h10045 ;
  assign y__h10429 = x__h10487 | y__h10488 ;
  assign y__h10488 = x__h10534 & y__h10237 ;
  assign y__h10621 = x__h10679 | y__h10680 ;
  assign y__h10680 = x__h10726 & y__h10429 ;
  assign y__h10813 = x__h10871 | y__h10872 ;
  assign y__h10872 = x__h10918 & y__h10621 ;
  assign y__h11005 = x__h11063 | y__h11064 ;
  assign y__h11064 = x__h11110 & y__h10813 ;
  assign y__h11197 = x__h11255 | y__h11256 ;
  assign y__h11256 = x__h11302 & y__h11005 ;
  assign y__h11389 = x__h11447 | y__h11448 ;
  assign y__h11448 = x__h11494 & y__h11197 ;
  assign y__h11581 = x__h11639 | y__h11640 ;
  assign y__h11640 = x__h11686 & y__h11389 ;
  assign y__h11773 = x__h11831 | y__h11832 ;
  assign y__h11832 = x__h11878 & y__h11581 ;
  assign y__h11965 = x__h12023 | y__h12024 ;
  assign y__h12024 = x__h12070 & y__h11773 ;
  assign y__h12157 = x__h12215 | y__h12216 ;
  assign y__h12216 = x__h12262 & y__h11965 ;
  assign y__h12349 = x__h12407 | y__h12408 ;
  assign y__h12408 = x__h12454 & y__h12157 ;
  assign y__h12541 = x__h12599 | y__h12600 ;
  assign y__h12600 = x__h12646 & y__h12349 ;
  assign y__h12733 = x__h12791 | y__h12792 ;
  assign y__h12792 = x__h12838 & y__h12541 ;
  assign y__h12925 = x__h12983 | y__h12984 ;
  assign y__h12984 = x__h13030 & y__h12733 ;
  assign y__h13117 = x__h13175 | y__h13176 ;
  assign y__h13176 = x__h13222 & y__h12925 ;
  assign y__h13309 = x__h13367 | y__h13368 ;
  assign y__h13368 = x__h13414 & y__h13117 ;
  assign y__h13501 = x__h13559 | y__h13560 ;
  assign y__h13560 = x__h13606 & y__h13309 ;
  assign y__h13693 = x__h13751 | y__h13752 ;
  assign y__h13752 = x__h13798 & y__h13501 ;
  assign y__h13885 = x__h13943 | y__h13944 ;
  assign y__h13944 = x__h13990 & y__h13693 ;
  assign y__h14077 = x__h14135 | y__h14136 ;
  assign y__h14136 = x__h14182 & y__h13885 ;
  assign y__h14269 = x__h14327 | y__h14328 ;
  assign y__h14328 = x__h14374 & y__h14077 ;
  assign y__h14461 = x__h14519 | y__h14520 ;
  assign y__h14520 = x__h14566 & y__h14269 ;
  assign y__h14653 = x__h14711 | y__h14712 ;
  assign y__h14712 = x__h14758 & y__h14461 ;
  assign y__h14845 = x__h14903 | y__h14904 ;
  assign y__h14904 = x__h14950 & y__h14653 ;
  assign y__h16363 = temp_A[0] & INV_temp_B_02_85_PLUS_1___d486[0] ;
  assign y__h16492 = x__h16550 | y__h16551 ;
  assign y__h16551 = x__h16362 & y__h16363 ;
  assign y__h16684 = x__h16742 | y__h16743 ;
  assign y__h16743 = x__h16491 & y__h16492 ;
  assign y__h16876 = x__h16934 | y__h16935 ;
  assign y__h16935 = x__h16683 & y__h16684 ;
  assign y__h17068 = x__h17126 | y__h17127 ;
  assign y__h17127 = x__h16875 & y__h16876 ;
  assign y__h1720 =
	     INV_fp_b_BITS_30_TO_23__q1[1] & INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h17260 = x__h17318 | y__h17319 ;
  assign y__h17319 = x__h17067 & y__h17068 ;
  assign y__h17452 = x__h17510 | y__h17511 ;
  assign y__h17511 = x__h17259 & y__h17260 ;
  assign y__h17644 = x__h17702 | y__h17703 ;
  assign y__h17703 = x__h17451 & y__h17452 ;
  assign y__h17836 = x__h17894 | y__h17895 ;
  assign y__h17895 = x__h17643 & y__h17644 ;
  assign y__h18028 = x__h18086 | y__h18087 ;
  assign y__h18087 = x__h17835 & y__h17836 ;
  assign y__h18220 = x__h18278 | y__h18279 ;
  assign y__h18279 = x__h18027 & y__h18028 ;
  assign y__h18412 = x__h18470 | y__h18471 ;
  assign y__h18471 = x__h18219 & y__h18220 ;
  assign y__h18604 = x__h18662 | y__h18663 ;
  assign y__h18663 = x__h18411 & y__h18412 ;
  assign y__h18796 = x__h18854 | y__h18855 ;
  assign y__h18855 = x__h18603 & y__h18604 ;
  assign y__h18988 = x__h19046 | y__h19047 ;
  assign y__h19047 = x__h18795 & y__h18796 ;
  assign y__h1909 = INV_fp_b_BITS_30_TO_23__q1[2] & y__h1720 ;
  assign y__h19180 = x__h19238 | y__h19239 ;
  assign y__h19239 = x__h18987 & y__h18988 ;
  assign y__h19372 = x__h19430 | y__h19431 ;
  assign y__h19431 = x__h19179 & y__h19180 ;
  assign y__h19564 = x__h19622 | y__h19623 ;
  assign y__h19623 = x__h19371 & y__h19372 ;
  assign y__h19756 = x__h19814 | y__h19815 ;
  assign y__h19815 = x__h19563 & y__h19564 ;
  assign y__h19948 = x__h20006 | y__h20007 ;
  assign y__h20007 = x__h19755 & y__h19756 ;
  assign y__h20140 = x__h20198 | y__h20199 ;
  assign y__h20199 = x__h19947 & y__h19948 ;
  assign y__h20332 = x__h20390 | y__h20391 ;
  assign y__h20391 = x__h20139 & y__h20140 ;
  assign y__h20524 = x__h20582 | y__h20583 ;
  assign y__h20583 = x__h20331 & y__h20332 ;
  assign y__h20716 = x__h20774 | y__h20775 ;
  assign y__h20775 = x__h20523 & y__h20524 ;
  assign y__h20908 = x__h20966 | y__h20967 ;
  assign y__h20967 = x__h20715 & y__h20716 ;
  assign y__h2098 = INV_fp_b_BITS_30_TO_23__q1[3] & y__h1909 ;
  assign y__h21100 = x__h21158 | y__h21159 ;
  assign y__h21159 = x__h20907 & y__h20908 ;
  assign y__h21292 = x__h21350 | y__h21351 ;
  assign y__h21351 = x__h21099 & y__h21100 ;
  assign y__h21484 = x__h21542 | y__h21543 ;
  assign y__h21543 = x__h21291 & y__h21292 ;
  assign y__h21676 = x__h21734 | y__h21735 ;
  assign y__h21735 = x__h21483 & y__h21484 ;
  assign y__h21868 = x__h21926 | y__h21927 ;
  assign y__h21927 = x__h21675 & y__h21676 ;
  assign y__h22060 = x__h22118 | y__h22119 ;
  assign y__h22119 = x__h21867 & y__h21868 ;
  assign y__h22252 = x__h22310 | y__h22311 ;
  assign y__h22311 = x__h22059 & y__h22060 ;
  assign y__h22444 = x__h22502 | y__h22503 ;
  assign y__h22503 = x__h22251 & y__h22252 ;
  assign y__h22636 = x__h22694 | y__h22695 ;
  assign y__h22695 = x__h22443 & y__h22444 ;
  assign y__h22828 = x__h22886 | y__h22887 ;
  assign y__h2287 = INV_fp_b_BITS_30_TO_23__q1[4] & y__h2098 ;
  assign y__h22887 = x__h22635 & y__h22636 ;
  assign y__h23020 = x__h23078 | y__h23079 ;
  assign y__h23079 = x__h22827 & y__h22828 ;
  assign y__h23212 = x__h23270 | y__h23271 ;
  assign y__h23271 = x__h23019 & y__h23020 ;
  assign y__h23404 = x__h23462 | y__h23463 ;
  assign y__h23463 = x__h23211 & y__h23212 ;
  assign y__h23596 = x__h23654 | y__h23655 ;
  assign y__h23655 = x__h23403 & y__h23404 ;
  assign y__h23788 = x__h23846 | y__h23847 ;
  assign y__h23847 = x__h23595 & y__h23596 ;
  assign y__h23980 = x__h24038 | y__h24039 ;
  assign y__h24039 = x__h23787 & y__h23788 ;
  assign y__h24172 = x__h24230 | y__h24231 ;
  assign y__h24231 = x__h23979 & y__h23980 ;
  assign y__h24364 = x__h24422 | y__h24423 ;
  assign y__h24423 = x__h24171 & y__h24172 ;
  assign y__h24556 = x__h24614 | y__h24615 ;
  assign y__h24615 = x__h24363 & y__h24364 ;
  assign y__h24748 = x__h24806 | y__h24807 ;
  assign y__h2476 = INV_fp_b_BITS_30_TO_23__q1[5] & y__h2287 ;
  assign y__h24807 = x__h24555 & y__h24556 ;
  assign y__h24940 = x__h24998 | y__h24999 ;
  assign y__h24999 = x__h24747 & y__h24748 ;
  assign y__h25132 = x__h25190 | y__h25191 ;
  assign y__h25191 = x__h24939 & y__h24940 ;
  assign y__h25324 = x__h25382 | y__h25383 ;
  assign y__h25383 = x__h25131 & y__h25132 ;
  assign y__h25516 = x__h25574 | y__h25575 ;
  assign y__h25575 = x__h25323 & y__h25324 ;
  assign y__h26234 = fp_a[24] | y__h26292 ;
  assign y__h26292 = x__h26106 & fp_a[23] ;
  assign y__h26422 = fp_a[25] | y__h26480 ;
  assign y__h26480 = x__h26233 & y__h26234 ;
  assign y__h26610 = fp_a[26] | y__h26668 ;
  assign y__h2665 = INV_fp_b_BITS_30_TO_23__q1[6] & y__h2476 ;
  assign y__h26668 = x__h26421 & y__h26422 ;
  assign y__h26798 = fp_a[27] | y__h26856 ;
  assign y__h26856 = x__h26609 & y__h26610 ;
  assign y__h26986 = fp_a[28] | y__h27044 ;
  assign y__h27044 = x__h26797 & y__h26798 ;
  assign y__h27174 = fp_a[29] | y__h27232 ;
  assign y__h27232 = x__h26985 & y__h26986 ;
  assign y__h2878 =
	     fp_a[23] &
	     IF_INV_INV_fp_b_BITS_30_TO_23_BIT_0_THEN_1_ELSE_0__q2[0] ;
  assign y__h2880 =
	     INV_fp_b_BITS_30_TO_23__q1[1] ^ INV_fp_b_BITS_30_TO_23__q1[0] ;
  assign y__h29183 = temp_sum[27] & temp_sum[26] ;
  assign y__h29369 = temp_sum[28] & y__h29183 ;
  assign y__h29555 = temp_sum[29] & y__h29369 ;
  assign y__h29741 = temp_sum[30] & y__h29555 ;
  assign y__h29927 = temp_sum[31] & y__h29741 ;
  assign y__h3005 = x__h3061 | y__h3062 ;
  assign y__h3007 = INV_fp_b_BITS_30_TO_23__q1[2] ^ y__h1720 ;
  assign y__h30113 = temp_sum[32] & y__h29927 ;
  assign y__h30299 = temp_sum[33] & y__h30113 ;
  assign y__h30485 = temp_sum[34] & y__h30299 ;
  assign y__h3062 = x__h2877 & y__h2878 ;
  assign y__h30671 = temp_sum[35] & y__h30485 ;
  assign y__h30857 = temp_sum[36] & y__h30671 ;
  assign y__h31043 = temp_sum[37] & y__h30857 ;
  assign y__h31229 = temp_sum[38] & y__h31043 ;
  assign y__h31415 = temp_sum[39] & y__h31229 ;
  assign y__h31601 = temp_sum[40] & y__h31415 ;
  assign y__h31787 = temp_sum[41] & y__h31601 ;
  assign y__h3191 = x__h3247 | y__h3248 ;
  assign y__h3193 = INV_fp_b_BITS_30_TO_23__q1[3] ^ y__h1909 ;
  assign y__h31973 = temp_sum[42] & y__h31787 ;
  assign y__h32159 = temp_sum[43] & y__h31973 ;
  assign y__h32345 = temp_sum[44] & y__h32159 ;
  assign y__h3248 = x__h3004 & y__h3005 ;
  assign y__h32531 = temp_sum[45] & y__h32345 ;
  assign y__h32717 = temp_sum[46] & y__h32531 ;
  assign y__h32903 = temp_sum[47] & y__h32717 ;
  assign y__h33089 = temp_sum[48] & y__h32903 ;
  assign y__h3377 = x__h3433 | y__h3434 ;
  assign y__h3379 = INV_fp_b_BITS_30_TO_23__q1[4] ^ y__h2098 ;
  assign y__h3434 = x__h3190 & y__h3191 ;
  assign y__h3563 = x__h3619 | y__h3620 ;
  assign y__h3565 = INV_fp_b_BITS_30_TO_23__q1[5] ^ y__h2287 ;
  assign y__h3620 = x__h3376 & y__h3377 ;
  assign y__h3749 = x__h3805 | y__h3806 ;
  assign y__h3751 = INV_fp_b_BITS_30_TO_23__q1[6] ^ y__h2476 ;
  assign y__h3806 = x__h3562 & y__h3563 ;
  assign y__h39202 = fp_a[24] & fp_a[23] ;
  assign y__h3935 = x__h3991 | y__h3992 ;
  assign y__h3937 = INV_fp_b_BITS_30_TO_23__q1[7] ^ y__h2665 ;
  assign y__h39388 = fp_a[25] & y__h39202 ;
  assign y__h39574 = fp_a[26] & y__h39388 ;
  assign y__h39760 = fp_a[27] & y__h39574 ;
  assign y__h3992 = x__h3748 & y__h3749 ;
  assign y__h39946 = fp_a[28] & y__h39760 ;
  assign y__h40132 = fp_a[29] & y__h39946 ;
  assign y__h40699 = x__h40572 & IF_INV_fp_a_BIT_23_THEN_1_ELSE_0__q3[0] ;
  assign y__h40885 = x__h40698 & y__h40699 ;
  assign y__h41071 = x__h40884 & y__h40885 ;
  assign y__h41257 = x__h41070 & y__h41071 ;
  assign y__h41443 = x__h41256 & y__h41257 ;
  assign y__h41629 = x__h41442 & y__h41443 ;
  assign y__h50666 = temp_sum[24] & temp_sum[23] ;
  assign y__h50852 = temp_sum[25] & y__h50666 ;
  assign y__h51038 = temp_sum[26] & y__h50852 ;
  assign y__h51224 = temp_sum[27] & y__h51038 ;
  assign y__h51410 = temp_sum[28] & y__h51224 ;
  assign y__h51596 = temp_sum[29] & y__h51410 ;
  assign y__h51782 = temp_sum[30] & y__h51596 ;
  assign y__h51968 = temp_sum[31] & y__h51782 ;
  assign y__h52154 = temp_sum[32] & y__h51968 ;
  assign y__h52340 = temp_sum[33] & y__h52154 ;
  assign y__h52526 = temp_sum[34] & y__h52340 ;
  assign y__h52712 = temp_sum[35] & y__h52526 ;
  assign y__h52898 = temp_sum[36] & y__h52712 ;
  assign y__h53084 = temp_sum[37] & y__h52898 ;
  assign y__h53270 = temp_sum[38] & y__h53084 ;
  assign y__h53456 = temp_sum[39] & y__h53270 ;
  assign y__h53642 = temp_sum[40] & y__h53456 ;
  assign y__h53828 = temp_sum[41] & y__h53642 ;
  assign y__h54014 = temp_sum[42] & y__h53828 ;
  assign y__h54200 = temp_sum[43] & y__h54014 ;
  assign y__h54386 = temp_sum[44] & y__h54200 ;
  assign y__h54572 = temp_sum[45] & y__h54386 ;
  assign y__h54758 = temp_sum[46] & y__h54572 ;
  assign y__h55945 = temp_sum[26] & temp_sum[25] ;
  assign y__h56131 = temp_sum[27] & y__h55945 ;
  assign y__h56317 = temp_sum[28] & y__h56131 ;
  assign y__h56503 = temp_sum[29] & y__h56317 ;
  assign y__h56689 = temp_sum[30] & y__h56503 ;
  assign y__h56875 = temp_sum[31] & y__h56689 ;
  assign y__h57061 = temp_sum[32] & y__h56875 ;
  assign y__h57247 = temp_sum[33] & y__h57061 ;
  assign y__h57433 = temp_sum[34] & y__h57247 ;
  assign y__h57619 = temp_sum[35] & y__h57433 ;
  assign y__h57805 = temp_sum[36] & y__h57619 ;
  assign y__h57991 = temp_sum[37] & y__h57805 ;
  assign y__h58177 = temp_sum[38] & y__h57991 ;
  assign y__h5821 = x__h5879 | y__h5880 ;
  assign y__h58363 = temp_sum[39] & y__h58177 ;
  assign y__h58549 = temp_sum[40] & y__h58363 ;
  assign y__h58735 = temp_sum[41] & y__h58549 ;
  assign y__h5880 = x__h5926 & y__h5927 ;
  assign y__h58921 = temp_sum[42] & y__h58735 ;
  assign y__h59107 = temp_sum[43] & y__h58921 ;
  assign y__h5927 = temp_A[0] & temp_B[0] ;
  assign y__h59293 = temp_sum[44] & y__h59107 ;
  assign y__h59479 = temp_sum[45] & y__h59293 ;
  assign y__h59665 = temp_sum[46] & y__h59479 ;
  assign y__h59851 = temp_sum[47] & y__h59665 ;
  assign y__h60037 = temp_sum[48] & y__h59851 ;
  assign y__h6013 = x__h6071 | y__h6072 ;
  assign y__h60692 = exp___1__h49703[1] & exp___1__h49703[0] ;
  assign y__h6072 = x__h6118 & y__h5821 ;
  assign y__h60881 = exp___1__h49703[2] & y__h60692 ;
  assign y__h61070 = exp___1__h49703[3] & y__h60881 ;
  assign y__h61259 = exp___1__h49703[4] & y__h61070 ;
  assign y__h61448 = exp___1__h49703[5] & y__h61259 ;
  assign y__h61637 = exp___1__h49703[6] & y__h61448 ;
  assign y__h6205 = x__h6263 | y__h6264 ;
  assign y__h6264 = x__h6310 & y__h6013 ;
  assign y__h6397 = x__h6455 | y__h6456 ;
  assign y__h6456 = x__h6502 & y__h6205 ;
  assign y__h6589 = x__h6647 | y__h6648 ;
  assign y__h6648 = x__h6694 & y__h6397 ;
  assign y__h6781 = x__h6839 | y__h6840 ;
  assign y__h6840 = x__h6886 & y__h6589 ;
  assign y__h6973 = x__h7031 | y__h7032 ;
  assign y__h7032 = x__h7078 & y__h6781 ;
  assign y__h7165 = x__h7223 | y__h7224 ;
  assign y__h7224 = x__h7270 & y__h6973 ;
  assign y__h7357 = x__h7415 | y__h7416 ;
  assign y__h7416 = x__h7462 & y__h7165 ;
  assign y__h7549 = x__h7607 | y__h7608 ;
  assign y__h7608 = x__h7654 & y__h7357 ;
  assign y__h7741 = x__h7799 | y__h7800 ;
  assign y__h7800 = x__h7846 & y__h7549 ;
  assign y__h7933 = x__h7991 | y__h7992 ;
  assign y__h7992 = x__h8038 & y__h7741 ;
  assign y__h8125 = x__h8183 | y__h8184 ;
  assign y__h8184 = x__h8230 & y__h7933 ;
  assign y__h8317 = x__h8375 | y__h8376 ;
  assign y__h8376 = x__h8422 & y__h8125 ;
  assign y__h8509 = x__h8567 | y__h8568 ;
  assign y__h8568 = x__h8614 & y__h8317 ;
  assign y__h8701 = x__h8759 | y__h8760 ;
  assign y__h8760 = x__h8806 & y__h8509 ;
  assign y__h8893 = x__h8951 | y__h8952 ;
  assign y__h8952 = x__h8998 & y__h8701 ;
  assign y__h9085 = x__h9143 | y__h9144 ;
  assign y__h9144 = x__h9190 & y__h8893 ;
  assign y__h9277 = x__h9335 | y__h9336 ;
  assign y__h9336 = x__h9382 & y__h9085 ;
  assign y__h9469 = x__h9527 | y__h9528 ;
  assign y__h9528 = x__h9574 & y__h9277 ;
  assign y__h9661 = x__h9719 | y__h9720 ;
  assign y__h9720 = x__h9766 & y__h9469 ;
  assign y__h9853 = x__h9911 | y__h9912 ;
  assign y__h9912 = x__h9958 & y__h9661 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        add_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_prep_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY 31'd0;
	adj_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	adj_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	assembled_answer <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_add <= `BSV_ASSIGNMENT_DELAY 1'd0;
	do_sub <= `BSV_ASSIGNMENT_DELAY 1'd0;
	expdiff <= `BSV_ASSIGNMENT_DELAY 8'd0;
	expdiff_calculated <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fp_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fp_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	got_A <= `BSV_ASSIGNMENT_DELAY 1'd0;
	got_B <= `BSV_ASSIGNMENT_DELAY 1'd0;
	operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_addition_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	round_subtraction_result <= `BSV_ASSIGNMENT_DELAY 1'd0;
	sign_c <= `BSV_ASSIGNMENT_DELAY 1'd0;
	temp_A <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_B <= `BSV_ASSIGNMENT_DELAY 50'd0;
	temp_sum <= `BSV_ASSIGNMENT_DELAY 50'd0;
      end
    else
      begin
        if (add_done_EN) add_done <= `BSV_ASSIGNMENT_DELAY add_done_D_IN;
	if (add_prep_done_EN)
	  add_prep_done <= `BSV_ASSIGNMENT_DELAY add_prep_done_D_IN;
	if (add_res_with_adj_exp_EN)
	  add_res_with_adj_exp <= `BSV_ASSIGNMENT_DELAY
	      add_res_with_adj_exp_D_IN;
	if (adj_done_EN) adj_done <= `BSV_ASSIGNMENT_DELAY adj_done_D_IN;
	if (adj_sub_EN) adj_sub <= `BSV_ASSIGNMENT_DELAY adj_sub_D_IN;
	if (assembled_answer_EN)
	  assembled_answer <= `BSV_ASSIGNMENT_DELAY assembled_answer_D_IN;
	if (do_add_EN) do_add <= `BSV_ASSIGNMENT_DELAY do_add_D_IN;
	if (do_sub_EN) do_sub <= `BSV_ASSIGNMENT_DELAY do_sub_D_IN;
	if (expdiff_EN) expdiff <= `BSV_ASSIGNMENT_DELAY expdiff_D_IN;
	if (expdiff_calculated_EN)
	  expdiff_calculated <= `BSV_ASSIGNMENT_DELAY expdiff_calculated_D_IN;
	if (fp_a_EN) fp_a <= `BSV_ASSIGNMENT_DELAY fp_a_D_IN;
	if (fp_b_EN) fp_b <= `BSV_ASSIGNMENT_DELAY fp_b_D_IN;
	if (fp_c_EN) fp_c <= `BSV_ASSIGNMENT_DELAY fp_c_D_IN;
	if (got_A_EN) got_A <= `BSV_ASSIGNMENT_DELAY got_A_D_IN;
	if (got_B_EN) got_B <= `BSV_ASSIGNMENT_DELAY got_B_D_IN;
	if (operands_swapped_if_needed_EN)
	  operands_swapped_if_needed <= `BSV_ASSIGNMENT_DELAY
	      operands_swapped_if_needed_D_IN;
	if (round_addition_result_EN)
	  round_addition_result <= `BSV_ASSIGNMENT_DELAY
	      round_addition_result_D_IN;
	if (round_done_EN)
	  round_done <= `BSV_ASSIGNMENT_DELAY round_done_D_IN;
	if (round_subtraction_result_EN)
	  round_subtraction_result <= `BSV_ASSIGNMENT_DELAY
	      round_subtraction_result_D_IN;
	if (sign_c_EN) sign_c <= `BSV_ASSIGNMENT_DELAY sign_c_D_IN;
	if (temp_A_EN) temp_A <= `BSV_ASSIGNMENT_DELAY temp_A_D_IN;
	if (temp_B_EN) temp_B <= `BSV_ASSIGNMENT_DELAY temp_B_D_IN;
	if (temp_sum_EN) temp_sum <= `BSV_ASSIGNMENT_DELAY temp_sum_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    add_done = 1'h0;
    add_prep_done = 1'h0;
    add_res_with_adj_exp = 31'h2AAAAAAA;
    adj_done = 1'h0;
    adj_sub = 1'h0;
    assembled_answer = 1'h0;
    do_add = 1'h0;
    do_sub = 1'h0;
    expdiff = 8'hAA;
    expdiff_calculated = 1'h0;
    fp_a = 32'hAAAAAAAA;
    fp_b = 32'hAAAAAAAA;
    fp_c = 32'hAAAAAAAA;
    got_A = 1'h0;
    got_B = 1'h0;
    operands_swapped_if_needed = 1'h0;
    round_addition_result = 1'h0;
    round_done = 1'h0;
    round_subtraction_result = 1'h0;
    sign_c = 1'h0;
    temp_A = 50'h2AAAAAAAAAAAA;
    temp_B = 50'h2AAAAAAAAAAAA;
    temp_sum = 50'h2AAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkfp32_add

